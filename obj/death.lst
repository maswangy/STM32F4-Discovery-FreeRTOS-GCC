   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"death.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.bss.usCreationCount,"aw",%nobits
  20              		.align	1
  23              	usCreationCount:
  24 0000 0000     		.space	2
  25              		.section	.bss.uxTasksRunningAtStart,"aw",%nobits
  26              		.align	2
  29              	uxTasksRunningAtStart:
  30 0000 00000000 		.space	4
  31              		.section	.rodata.uxMaxNumberOfExtraTasksRunning,"a",%progbits
  32              		.align	2
  35              	uxMaxNumberOfExtraTasksRunning:
  36 0000 03000000 		.word	3
  37              		.comm	xCreatedTask,4,4
  38              		.section	.rodata
  39              		.align	2
  40              	.LC0:
  41 0000 43524541 		.ascii	"CREATOR\000"
  41      544F5200 
  42              		.section	.text.vCreateSuicidalTasks,"ax",%progbits
  43              		.align	2
  44              		.global	vCreateSuicidalTasks
  45              		.thumb
  46              		.thumb_func
  48              	vCreateSuicidalTasks:
  49              	.LFB110:
  50              		.file 1 "App/Common/Minimal/death.c"
   1:App/Common/Minimal/death.c **** /*
   2:App/Common/Minimal/death.c ****     FreeRTOS V7.5.3 - Copyright (C) 2013 Real Time Engineers Ltd. 
   3:App/Common/Minimal/death.c ****     All rights reserved
   4:App/Common/Minimal/death.c **** 
   5:App/Common/Minimal/death.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:App/Common/Minimal/death.c **** 
   7:App/Common/Minimal/death.c ****     ***************************************************************************
   8:App/Common/Minimal/death.c ****      *                                                                       *
   9:App/Common/Minimal/death.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:App/Common/Minimal/death.c ****      *    robust, strictly quality controlled, supported, and cross          *
  11:App/Common/Minimal/death.c ****      *    platform software that has become a de facto standard.             *
  12:App/Common/Minimal/death.c ****      *                                                                       *
  13:App/Common/Minimal/death.c ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:App/Common/Minimal/death.c ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  15:App/Common/Minimal/death.c ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:App/Common/Minimal/death.c ****      *                                                                       *
  17:App/Common/Minimal/death.c ****      *    Thank you!                                                         *
  18:App/Common/Minimal/death.c ****      *                                                                       *
  19:App/Common/Minimal/death.c ****     ***************************************************************************
  20:App/Common/Minimal/death.c **** 
  21:App/Common/Minimal/death.c ****     This file is part of the FreeRTOS distribution.
  22:App/Common/Minimal/death.c **** 
  23:App/Common/Minimal/death.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  24:App/Common/Minimal/death.c ****     the terms of the GNU General Public License (version 2) as published by the
  25:App/Common/Minimal/death.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:App/Common/Minimal/death.c **** 
  27:App/Common/Minimal/death.c ****     >>! NOTE: The modification to the GPL is included to allow you to distribute
  28:App/Common/Minimal/death.c ****     >>! a combined work that includes FreeRTOS without being obliged to provide
  29:App/Common/Minimal/death.c ****     >>! the source code for proprietary components outside of the FreeRTOS
  30:App/Common/Minimal/death.c ****     >>! kernel.
  31:App/Common/Minimal/death.c **** 
  32:App/Common/Minimal/death.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:App/Common/Minimal/death.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:App/Common/Minimal/death.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:App/Common/Minimal/death.c ****     link: http://www.freertos.org/a00114.html
  36:App/Common/Minimal/death.c **** 
  37:App/Common/Minimal/death.c ****     1 tab == 4 spaces!
  38:App/Common/Minimal/death.c **** 
  39:App/Common/Minimal/death.c ****     ***************************************************************************
  40:App/Common/Minimal/death.c ****      *                                                                       *
  41:App/Common/Minimal/death.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:App/Common/Minimal/death.c ****      *    not run, what could be wrong?"                                     *
  43:App/Common/Minimal/death.c ****      *                                                                       *
  44:App/Common/Minimal/death.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  45:App/Common/Minimal/death.c ****      *                                                                       *
  46:App/Common/Minimal/death.c ****     ***************************************************************************
  47:App/Common/Minimal/death.c **** 
  48:App/Common/Minimal/death.c ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:App/Common/Minimal/death.c ****     license and Real Time Engineers Ltd. contact details.
  50:App/Common/Minimal/death.c **** 
  51:App/Common/Minimal/death.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:App/Common/Minimal/death.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:App/Common/Minimal/death.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:App/Common/Minimal/death.c **** 
  55:App/Common/Minimal/death.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:App/Common/Minimal/death.c ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:App/Common/Minimal/death.c ****     licenses offer ticketed support, indemnification and middleware.
  58:App/Common/Minimal/death.c **** 
  59:App/Common/Minimal/death.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:App/Common/Minimal/death.c ****     engineered and independently SIL3 certified version for use in safety and
  61:App/Common/Minimal/death.c ****     mission critical applications that require provable dependability.
  62:App/Common/Minimal/death.c **** 
  63:App/Common/Minimal/death.c ****     1 tab == 4 spaces!
  64:App/Common/Minimal/death.c **** */
  65:App/Common/Minimal/death.c **** 
  66:App/Common/Minimal/death.c **** /**
  67:App/Common/Minimal/death.c ****  * Create a single persistent task which periodically dynamically creates another
  68:App/Common/Minimal/death.c ****  * two tasks.  The original task is called the creator task, the two tasks it
  69:App/Common/Minimal/death.c ****  * creates are called suicidal tasks.
  70:App/Common/Minimal/death.c ****  *
  71:App/Common/Minimal/death.c ****  * One of the created suicidal tasks kill one other suicidal task before killing
  72:App/Common/Minimal/death.c ****  * itself - leaving just the original task remaining.
  73:App/Common/Minimal/death.c ****  *
  74:App/Common/Minimal/death.c ****  * The creator task must be spawned after all of the other demo application tasks
  75:App/Common/Minimal/death.c ****  * as it keeps a check on the number of tasks under the scheduler control.  The
  76:App/Common/Minimal/death.c ****  * number of tasks it expects to see running should never be greater than the
  77:App/Common/Minimal/death.c ****  * number of tasks that were in existence when the creator task was spawned, plus
  78:App/Common/Minimal/death.c ****  * one set of four suicidal tasks.  If this number is exceeded an error is flagged.
  79:App/Common/Minimal/death.c ****  *
  80:App/Common/Minimal/death.c ****  * \page DeathC death.c
  81:App/Common/Minimal/death.c ****  * \ingroup DemoFiles
  82:App/Common/Minimal/death.c ****  * <HR>
  83:App/Common/Minimal/death.c ****  */
  84:App/Common/Minimal/death.c **** 
  85:App/Common/Minimal/death.c **** /*
  86:App/Common/Minimal/death.c **** Changes from V3.0.0
  87:App/Common/Minimal/death.c **** 	+ CreationCount sizes changed from unsigned portBASE_TYPE to
  88:App/Common/Minimal/death.c **** 	  unsigned short to minimize the risk of overflowing.
  89:App/Common/Minimal/death.c **** 	
  90:App/Common/Minimal/death.c **** 	+ Reset of usLastCreationCount added
  91:App/Common/Minimal/death.c **** 	
  92:App/Common/Minimal/death.c **** Changes from V3.1.0
  93:App/Common/Minimal/death.c **** 	+ Changed the dummy calculation to use variables of type long, rather than
  94:App/Common/Minimal/death.c **** 	  float.  This allows the file to be used with ports that do not support
  95:App/Common/Minimal/death.c **** 	  floating point.
  96:App/Common/Minimal/death.c **** 
  97:App/Common/Minimal/death.c **** */
  98:App/Common/Minimal/death.c **** 
  99:App/Common/Minimal/death.c **** #include <stdlib.h>
 100:App/Common/Minimal/death.c **** 
 101:App/Common/Minimal/death.c **** /* Scheduler include files. */
 102:App/Common/Minimal/death.c **** #include "FreeRTOS.h"
 103:App/Common/Minimal/death.c **** #include "task.h"
 104:App/Common/Minimal/death.c **** 
 105:App/Common/Minimal/death.c **** /* Demo program include files. */
 106:App/Common/Minimal/death.c **** #include "death.h"
 107:App/Common/Minimal/death.c **** 
 108:App/Common/Minimal/death.c **** #define deathSTACK_SIZE		( configMINIMAL_STACK_SIZE + 60 )
 109:App/Common/Minimal/death.c **** 
 110:App/Common/Minimal/death.c **** /* The task originally created which is responsible for periodically dynamically
 111:App/Common/Minimal/death.c **** creating another four tasks. */
 112:App/Common/Minimal/death.c **** static portTASK_FUNCTION_PROTO( vCreateTasks, pvParameters );
 113:App/Common/Minimal/death.c **** 
 114:App/Common/Minimal/death.c **** /* The task function of the dynamically created tasks. */
 115:App/Common/Minimal/death.c **** static portTASK_FUNCTION_PROTO( vSuicidalTask, pvParameters );
 116:App/Common/Minimal/death.c **** 
 117:App/Common/Minimal/death.c **** /* A variable which is incremented every time the dynamic tasks are created.  This
 118:App/Common/Minimal/death.c **** is used to check that the task is still running. */
 119:App/Common/Minimal/death.c **** static volatile unsigned short usCreationCount = 0;
 120:App/Common/Minimal/death.c **** 
 121:App/Common/Minimal/death.c **** /* Used to store the number of tasks that were originally running so the creator
 122:App/Common/Minimal/death.c **** task can tell if any of the suicidal tasks have failed to die.
 123:App/Common/Minimal/death.c **** */
 124:App/Common/Minimal/death.c **** static volatile unsigned portBASE_TYPE uxTasksRunningAtStart = 0;
 125:App/Common/Minimal/death.c **** 
 126:App/Common/Minimal/death.c **** /* Tasks are deleted by the idle task.  Under heavy load the idle task might
 127:App/Common/Minimal/death.c **** not get much processing time, so it would be legitimate for several tasks to
 128:App/Common/Minimal/death.c **** remain undeleted for a short period. */
 129:App/Common/Minimal/death.c **** static const unsigned portBASE_TYPE uxMaxNumberOfExtraTasksRunning = 3;
 130:App/Common/Minimal/death.c **** 
 131:App/Common/Minimal/death.c **** /* Used to store a handle to the task that should be killed by a suicidal task,
 132:App/Common/Minimal/death.c **** before it kills itself. */
 133:App/Common/Minimal/death.c **** xTaskHandle xCreatedTask;
 134:App/Common/Minimal/death.c **** 
 135:App/Common/Minimal/death.c **** /*-----------------------------------------------------------*/
 136:App/Common/Minimal/death.c **** 
 137:App/Common/Minimal/death.c **** void vCreateSuicidalTasks( unsigned portBASE_TYPE uxPriority )
 138:App/Common/Minimal/death.c **** {
  51              		.loc 1 138 0
  52              		.cfi_startproc
  53              		@ args = 0, pretend = 0, frame = 16
  54              		@ frame_needed = 1, uses_anonymous_args = 0
  55 0000 80B5     		push	{r7, lr}
  56              	.LCFI0:
  57              		.cfi_def_cfa_offset 8
  58              		.cfi_offset 7, -8
  59              		.cfi_offset 14, -4
  60 0002 88B0     		sub	sp, sp, #32
  61              	.LCFI1:
  62              		.cfi_def_cfa_offset 40
  63 0004 04AF     		add	r7, sp, #16
  64              	.LCFI2:
  65              		.cfi_def_cfa 7, 24
  66 0006 7860     		str	r0, [r7, #4]
 139:App/Common/Minimal/death.c **** unsigned portBASE_TYPE *puxPriority;
 140:App/Common/Minimal/death.c **** 
 141:App/Common/Minimal/death.c **** 	/* Create the Creator tasks - passing in as a parameter the priority at which
 142:App/Common/Minimal/death.c **** 	the suicidal tasks should be created. */
 143:App/Common/Minimal/death.c **** 	puxPriority = ( unsigned portBASE_TYPE * ) pvPortMalloc( sizeof( unsigned portBASE_TYPE ) );
  67              		.loc 1 143 0
  68 0008 4FF00400 		mov	r0, #4
  69 000c FFF7FEFF 		bl	pvPortMalloc
  70 0010 F860     		str	r0, [r7, #12]
 144:App/Common/Minimal/death.c **** 	*puxPriority = uxPriority;
  71              		.loc 1 144 0
  72 0012 FB68     		ldr	r3, [r7, #12]
  73 0014 7A68     		ldr	r2, [r7, #4]
  74 0016 1A60     		str	r2, [r3, #0]
 145:App/Common/Minimal/death.c **** 
 146:App/Common/Minimal/death.c **** 	xTaskCreate( vCreateTasks, ( signed char * ) "CREATOR", deathSTACK_SIZE, ( void * ) puxPriority, u
  75              		.loc 1 146 0
  76 0018 7B68     		ldr	r3, [r7, #4]
  77 001a 0093     		str	r3, [sp, #0]
  78 001c 4FF00003 		mov	r3, #0
  79 0020 0193     		str	r3, [sp, #4]
  80 0022 4FF00003 		mov	r3, #0
  81 0026 0293     		str	r3, [sp, #8]
  82 0028 4FF00003 		mov	r3, #0
  83 002c 0393     		str	r3, [sp, #12]
  84 002e 40F20000 		movw	r0, #:lower16:vCreateTasks
  85 0032 C0F20000 		movt	r0, #:upper16:vCreateTasks
  86 0036 40F20001 		movw	r1, #:lower16:.LC0
  87 003a C0F20001 		movt	r1, #:upper16:.LC0
  88 003e 4FF0BE02 		mov	r2, #190
  89 0042 FB68     		ldr	r3, [r7, #12]
  90 0044 FFF7FEFF 		bl	xTaskGenericCreate
 147:App/Common/Minimal/death.c **** 
 148:App/Common/Minimal/death.c **** 	/* Record the number of tasks that are running now so we know if any of the
 149:App/Common/Minimal/death.c **** 	suicidal tasks have failed to be killed. */
 150:App/Common/Minimal/death.c **** 	uxTasksRunningAtStart = ( unsigned portBASE_TYPE ) uxTaskGetNumberOfTasks();
  91              		.loc 1 150 0
  92 0048 FFF7FEFF 		bl	uxTaskGetNumberOfTasks
  93 004c 0246     		mov	r2, r0
  94 004e 40F20003 		movw	r3, #:lower16:uxTasksRunningAtStart
  95 0052 C0F20003 		movt	r3, #:upper16:uxTasksRunningAtStart
  96 0056 1A60     		str	r2, [r3, #0]
 151:App/Common/Minimal/death.c **** 	
 152:App/Common/Minimal/death.c **** 	/* FreeRTOS.org versions before V3.0 started the idle-task as the very
 153:App/Common/Minimal/death.c **** 	first task. The idle task was then already included in uxTasksRunningAtStart.
 154:App/Common/Minimal/death.c **** 	From FreeRTOS V3.0 on, the idle task is started when the scheduler is
 155:App/Common/Minimal/death.c **** 	started. Therefore the idle task is not yet accounted for. We correct
 156:App/Common/Minimal/death.c **** 	this by increasing uxTasksRunningAtStart by 1. */
 157:App/Common/Minimal/death.c **** 	uxTasksRunningAtStart++;
  97              		.loc 1 157 0
  98 0058 40F20003 		movw	r3, #:lower16:uxTasksRunningAtStart
  99 005c C0F20003 		movt	r3, #:upper16:uxTasksRunningAtStart
 100 0060 1B68     		ldr	r3, [r3, #0]
 101 0062 03F10102 		add	r2, r3, #1
 102 0066 40F20003 		movw	r3, #:lower16:uxTasksRunningAtStart
 103 006a C0F20003 		movt	r3, #:upper16:uxTasksRunningAtStart
 104 006e 1A60     		str	r2, [r3, #0]
 158:App/Common/Minimal/death.c **** 	
 159:App/Common/Minimal/death.c **** 	/* From FreeRTOS version 7.0.0 can optionally create a timer service task.  
 160:App/Common/Minimal/death.c **** 	If this is done, then uxTasksRunningAtStart needs incrementing again as that
 161:App/Common/Minimal/death.c **** 	too is created when the scheduler is started. */
 162:App/Common/Minimal/death.c **** 	#if configUSE_TIMERS == 1
 163:App/Common/Minimal/death.c **** 		uxTasksRunningAtStart++;
 105              		.loc 1 163 0
 106 0070 40F20003 		movw	r3, #:lower16:uxTasksRunningAtStart
 107 0074 C0F20003 		movt	r3, #:upper16:uxTasksRunningAtStart
 108 0078 1B68     		ldr	r3, [r3, #0]
 109 007a 03F10102 		add	r2, r3, #1
 110 007e 40F20003 		movw	r3, #:lower16:uxTasksRunningAtStart
 111 0082 C0F20003 		movt	r3, #:upper16:uxTasksRunningAtStart
 112 0086 1A60     		str	r2, [r3, #0]
 164:App/Common/Minimal/death.c **** 	#endif
 165:App/Common/Minimal/death.c **** }
 113              		.loc 1 165 0
 114 0088 07F11007 		add	r7, r7, #16
 115 008c BD46     		mov	sp, r7
 116 008e 80BD     		pop	{r7, pc}
 117              		.cfi_endproc
 118              	.LFE110:
 120              		.section	.text.vSuicidalTask,"ax",%progbits
 121              		.align	2
 122              		.thumb
 123              		.thumb_func
 125              	vSuicidalTask:
 126              	.LFB111:
 166:App/Common/Minimal/death.c **** /*-----------------------------------------------------------*/
 167:App/Common/Minimal/death.c **** 					
 168:App/Common/Minimal/death.c **** static portTASK_FUNCTION( vSuicidalTask, pvParameters )
 169:App/Common/Minimal/death.c **** {
 127              		.loc 1 169 0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 24
 130              		@ frame_needed = 1, uses_anonymous_args = 0
 131 0000 80B5     		push	{r7, lr}
 132              	.LCFI3:
 133              		.cfi_def_cfa_offset 8
 134              		.cfi_offset 7, -8
 135              		.cfi_offset 14, -4
 136 0002 86B0     		sub	sp, sp, #24
 137              	.LCFI4:
 138              		.cfi_def_cfa_offset 32
 139 0004 00AF     		add	r7, sp, #0
 140              	.LCFI5:
 141              		.cfi_def_cfa_register 7
 142 0006 7860     		str	r0, [r7, #4]
 170:App/Common/Minimal/death.c **** volatile long l1, l2;
 171:App/Common/Minimal/death.c **** xTaskHandle xTaskToKill;
 172:App/Common/Minimal/death.c **** const portTickType xDelay = ( portTickType ) 200 / portTICK_RATE_MS;
 143              		.loc 1 172 0
 144 0008 4FF0C803 		mov	r3, #200
 145 000c 3B61     		str	r3, [r7, #16]
 173:App/Common/Minimal/death.c **** 
 174:App/Common/Minimal/death.c **** 	if( pvParameters != NULL )
 146              		.loc 1 174 0
 147 000e 7B68     		ldr	r3, [r7, #4]
 148 0010 002B     		cmp	r3, #0
 149 0012 03D0     		beq	.L3
 175:App/Common/Minimal/death.c **** 	{
 176:App/Common/Minimal/death.c **** 		/* This task is periodically created four times.  Two created tasks are
 177:App/Common/Minimal/death.c **** 		passed a handle to the other task so it can kill it before killing itself.
 178:App/Common/Minimal/death.c **** 		The other task is passed in null. */
 179:App/Common/Minimal/death.c **** 		xTaskToKill = *( xTaskHandle* )pvParameters;
 150              		.loc 1 179 0
 151 0014 7B68     		ldr	r3, [r7, #4]
 152 0016 1B68     		ldr	r3, [r3, #0]
 153 0018 7B61     		str	r3, [r7, #20]
 154 001a 04E0     		b	.L4
 155              	.L3:
 180:App/Common/Minimal/death.c **** 	}
 181:App/Common/Minimal/death.c **** 	else
 182:App/Common/Minimal/death.c **** 	{
 183:App/Common/Minimal/death.c **** 		xTaskToKill = NULL;
 156              		.loc 1 183 0
 157 001c 4FF00003 		mov	r3, #0
 158 0020 7B61     		str	r3, [r7, #20]
 159 0022 00E0     		b	.L4
 160              	.L6:
 184:App/Common/Minimal/death.c **** 	}
 185:App/Common/Minimal/death.c **** 
 186:App/Common/Minimal/death.c **** 	for( ;; )
 187:App/Common/Minimal/death.c **** 	{
 188:App/Common/Minimal/death.c **** 		/* Do something random just to use some stack and registers. */
 189:App/Common/Minimal/death.c **** 		l1 = 2;
 190:App/Common/Minimal/death.c **** 		l2 = 89;
 191:App/Common/Minimal/death.c **** 		l2 *= l1;
 192:App/Common/Minimal/death.c **** 		vTaskDelay( xDelay );
 193:App/Common/Minimal/death.c **** 
 194:App/Common/Minimal/death.c **** 		if( xTaskToKill != NULL )
 195:App/Common/Minimal/death.c **** 		{
 196:App/Common/Minimal/death.c **** 			/* Make sure the other task has a go before we delete it. */
 197:App/Common/Minimal/death.c **** 			vTaskDelay( ( portTickType ) 0 );
 198:App/Common/Minimal/death.c **** 
 199:App/Common/Minimal/death.c **** 			/* Kill the other task that was created by vCreateTasks(). */
 200:App/Common/Minimal/death.c **** 			vTaskDelete( xTaskToKill );
 201:App/Common/Minimal/death.c **** 
 202:App/Common/Minimal/death.c **** 			/* Kill ourselves. */
 203:App/Common/Minimal/death.c **** 			vTaskDelete( NULL );
 204:App/Common/Minimal/death.c **** 		}
 205:App/Common/Minimal/death.c **** 	}
 161              		.loc 1 205 0
 162 0024 00BF     		nop
 163              	.L4:
 189:App/Common/Minimal/death.c **** 		l1 = 2;
 164              		.loc 1 189 0
 165 0026 4FF00203 		mov	r3, #2
 166 002a FB60     		str	r3, [r7, #12]
 190:App/Common/Minimal/death.c **** 		l2 = 89;
 167              		.loc 1 190 0
 168 002c 4FF05903 		mov	r3, #89
 169 0030 BB60     		str	r3, [r7, #8]
 191:App/Common/Minimal/death.c **** 		l2 *= l1;
 170              		.loc 1 191 0
 171 0032 BB68     		ldr	r3, [r7, #8]
 172 0034 FA68     		ldr	r2, [r7, #12]
 173 0036 02FB03F3 		mul	r3, r2, r3
 174 003a BB60     		str	r3, [r7, #8]
 192:App/Common/Minimal/death.c **** 		vTaskDelay( xDelay );
 175              		.loc 1 192 0
 176 003c 3869     		ldr	r0, [r7, #16]
 177 003e FFF7FEFF 		bl	vTaskDelay
 194:App/Common/Minimal/death.c **** 		if( xTaskToKill != NULL )
 178              		.loc 1 194 0
 179 0042 7B69     		ldr	r3, [r7, #20]
 180 0044 002B     		cmp	r3, #0
 181 0046 EDD0     		beq	.L6
 197:App/Common/Minimal/death.c **** 			vTaskDelay( ( portTickType ) 0 );
 182              		.loc 1 197 0
 183 0048 4FF00000 		mov	r0, #0
 184 004c FFF7FEFF 		bl	vTaskDelay
 200:App/Common/Minimal/death.c **** 			vTaskDelete( xTaskToKill );
 185              		.loc 1 200 0
 186 0050 7869     		ldr	r0, [r7, #20]
 187 0052 FFF7FEFF 		bl	vTaskDelete
 203:App/Common/Minimal/death.c **** 			vTaskDelete( NULL );
 188              		.loc 1 203 0
 189 0056 4FF00000 		mov	r0, #0
 190 005a FFF7FEFF 		bl	vTaskDelete
 191              		.loc 1 205 0
 192 005e E1E7     		b	.L6
 193              		.cfi_endproc
 194              	.LFE111:
 196              		.section	.rodata
 197              		.align	2
 198              	.LC1:
 199 0008 53554943 		.ascii	"SUICID1\000"
 199      49443100 
 200              		.align	2
 201              	.LC2:
 202 0010 53554943 		.ascii	"SUICID2\000"
 202      49443200 
 203              		.section	.text.vCreateTasks,"ax",%progbits
 204              		.align	2
 205              		.thumb
 206              		.thumb_func
 208              	vCreateTasks:
 209              	.LFB112:
 206:App/Common/Minimal/death.c **** }/*lint !e818 !e550 Function prototype must be as per standard for task functions. */
 207:App/Common/Minimal/death.c **** /*-----------------------------------------------------------*/
 208:App/Common/Minimal/death.c **** 
 209:App/Common/Minimal/death.c **** static portTASK_FUNCTION( vCreateTasks, pvParameters )
 210:App/Common/Minimal/death.c **** {
 210              		.loc 1 210 0
 211              		.cfi_startproc
 212              		@ args = 0, pretend = 0, frame = 16
 213              		@ frame_needed = 1, uses_anonymous_args = 0
 214 0000 80B5     		push	{r7, lr}
 215              	.LCFI6:
 216              		.cfi_def_cfa_offset 8
 217              		.cfi_offset 7, -8
 218              		.cfi_offset 14, -4
 219 0002 88B0     		sub	sp, sp, #32
 220              	.LCFI7:
 221              		.cfi_def_cfa_offset 40
 222 0004 04AF     		add	r7, sp, #16
 223              	.LCFI8:
 224              		.cfi_def_cfa 7, 24
 225 0006 7860     		str	r0, [r7, #4]
 211:App/Common/Minimal/death.c **** const portTickType xDelay = ( portTickType ) 1000 / portTICK_RATE_MS;
 226              		.loc 1 211 0
 227 0008 4FF47A73 		mov	r3, #1000
 228 000c FB60     		str	r3, [r7, #12]
 212:App/Common/Minimal/death.c **** unsigned portBASE_TYPE uxPriority;
 213:App/Common/Minimal/death.c **** 
 214:App/Common/Minimal/death.c **** 	uxPriority = *( unsigned portBASE_TYPE * ) pvParameters;
 229              		.loc 1 214 0
 230 000e 7B68     		ldr	r3, [r7, #4]
 231 0010 1B68     		ldr	r3, [r3, #0]
 232 0012 BB60     		str	r3, [r7, #8]
 215:App/Common/Minimal/death.c **** 	vPortFree( pvParameters );
 233              		.loc 1 215 0
 234 0014 7868     		ldr	r0, [r7, #4]
 235 0016 FFF7FEFF 		bl	vPortFree
 236              	.L8:
 216:App/Common/Minimal/death.c **** 
 217:App/Common/Minimal/death.c **** 	for( ;; )
 218:App/Common/Minimal/death.c **** 	{
 219:App/Common/Minimal/death.c **** 		/* Just loop round, delaying then creating the four suicidal tasks. */
 220:App/Common/Minimal/death.c **** 		vTaskDelay( xDelay );
 237              		.loc 1 220 0 discriminator 1
 238 001a F868     		ldr	r0, [r7, #12]
 239 001c FFF7FEFF 		bl	vTaskDelay
 221:App/Common/Minimal/death.c **** 
 222:App/Common/Minimal/death.c **** 		xCreatedTask = NULL;
 240              		.loc 1 222 0 discriminator 1
 241 0020 40F20003 		movw	r3, #:lower16:xCreatedTask
 242 0024 C0F20003 		movt	r3, #:upper16:xCreatedTask
 243 0028 4FF00002 		mov	r2, #0
 244 002c 1A60     		str	r2, [r3, #0]
 223:App/Common/Minimal/death.c **** 
 224:App/Common/Minimal/death.c **** 		xTaskCreate( vSuicidalTask, ( signed char * ) "SUICID1", configMINIMAL_STACK_SIZE, NULL, uxPriori
 245              		.loc 1 224 0 discriminator 1
 246 002e BB68     		ldr	r3, [r7, #8]
 247 0030 0093     		str	r3, [sp, #0]
 248 0032 40F20003 		movw	r3, #:lower16:xCreatedTask
 249 0036 C0F20003 		movt	r3, #:upper16:xCreatedTask
 250 003a 0193     		str	r3, [sp, #4]
 251 003c 4FF00003 		mov	r3, #0
 252 0040 0293     		str	r3, [sp, #8]
 253 0042 4FF00003 		mov	r3, #0
 254 0046 0393     		str	r3, [sp, #12]
 255 0048 40F20000 		movw	r0, #:lower16:vSuicidalTask
 256 004c C0F20000 		movt	r0, #:upper16:vSuicidalTask
 257 0050 40F20001 		movw	r1, #:lower16:.LC1
 258 0054 C0F20001 		movt	r1, #:upper16:.LC1
 259 0058 4FF08202 		mov	r2, #130
 260 005c 4FF00003 		mov	r3, #0
 261 0060 FFF7FEFF 		bl	xTaskGenericCreate
 225:App/Common/Minimal/death.c **** 		xTaskCreate( vSuicidalTask, ( signed char * ) "SUICID2", configMINIMAL_STACK_SIZE, &xCreatedTask,
 262              		.loc 1 225 0 discriminator 1
 263 0064 BB68     		ldr	r3, [r7, #8]
 264 0066 0093     		str	r3, [sp, #0]
 265 0068 4FF00003 		mov	r3, #0
 266 006c 0193     		str	r3, [sp, #4]
 267 006e 4FF00003 		mov	r3, #0
 268 0072 0293     		str	r3, [sp, #8]
 269 0074 4FF00003 		mov	r3, #0
 270 0078 0393     		str	r3, [sp, #12]
 271 007a 40F20000 		movw	r0, #:lower16:vSuicidalTask
 272 007e C0F20000 		movt	r0, #:upper16:vSuicidalTask
 273 0082 40F20001 		movw	r1, #:lower16:.LC2
 274 0086 C0F20001 		movt	r1, #:upper16:.LC2
 275 008a 4FF08202 		mov	r2, #130
 276 008e 40F20003 		movw	r3, #:lower16:xCreatedTask
 277 0092 C0F20003 		movt	r3, #:upper16:xCreatedTask
 278 0096 FFF7FEFF 		bl	xTaskGenericCreate
 226:App/Common/Minimal/death.c **** 
 227:App/Common/Minimal/death.c **** 		++usCreationCount;
 279              		.loc 1 227 0 discriminator 1
 280 009a 40F20003 		movw	r3, #:lower16:usCreationCount
 281 009e C0F20003 		movt	r3, #:upper16:usCreationCount
 282 00a2 1B88     		ldrh	r3, [r3, #0]	@ movhi
 283 00a4 9BB2     		uxth	r3, r3
 284 00a6 03F10103 		add	r3, r3, #1
 285 00aa 9AB2     		uxth	r2, r3
 286 00ac 40F20003 		movw	r3, #:lower16:usCreationCount
 287 00b0 C0F20003 		movt	r3, #:upper16:usCreationCount
 288 00b4 1A80     		strh	r2, [r3, #0]	@ movhi
 228:App/Common/Minimal/death.c **** 	}
 289              		.loc 1 228 0 discriminator 1
 290 00b6 B0E7     		b	.L8
 291              		.cfi_endproc
 292              	.LFE112:
 294              		.section	.text.xIsCreateTaskStillRunning,"ax",%progbits
 295              		.align	2
 296              		.global	xIsCreateTaskStillRunning
 297              		.thumb
 298              		.thumb_func
 300              	xIsCreateTaskStillRunning:
 301              	.LFB113:
 229:App/Common/Minimal/death.c **** }
 230:App/Common/Minimal/death.c **** /*-----------------------------------------------------------*/
 231:App/Common/Minimal/death.c **** 
 232:App/Common/Minimal/death.c **** /* This is called to check that the creator task is still running and that there
 233:App/Common/Minimal/death.c **** are not any more than four extra tasks. */
 234:App/Common/Minimal/death.c **** portBASE_TYPE xIsCreateTaskStillRunning( void )
 235:App/Common/Minimal/death.c **** {
 302              		.loc 1 235 0
 303              		.cfi_startproc
 304              		@ args = 0, pretend = 0, frame = 8
 305              		@ frame_needed = 1, uses_anonymous_args = 0
 306 0000 80B5     		push	{r7, lr}
 307              	.LCFI9:
 308              		.cfi_def_cfa_offset 8
 309              		.cfi_offset 7, -8
 310              		.cfi_offset 14, -4
 311 0002 82B0     		sub	sp, sp, #8
 312              	.LCFI10:
 313              		.cfi_def_cfa_offset 16
 314 0004 00AF     		add	r7, sp, #0
 315              	.LCFI11:
 316              		.cfi_def_cfa_register 7
 236:App/Common/Minimal/death.c **** static unsigned short usLastCreationCount = 0xfff;
 237:App/Common/Minimal/death.c **** portBASE_TYPE xReturn = pdTRUE;
 317              		.loc 1 237 0
 318 0006 4FF00103 		mov	r3, #1
 319 000a 7B60     		str	r3, [r7, #4]
 238:App/Common/Minimal/death.c **** static unsigned portBASE_TYPE uxTasksRunningNow;
 239:App/Common/Minimal/death.c **** 
 240:App/Common/Minimal/death.c **** 	if( usLastCreationCount == usCreationCount )
 320              		.loc 1 240 0
 321 000c 40F20003 		movw	r3, #:lower16:usLastCreationCount.8109
 322 0010 C0F20003 		movt	r3, #:upper16:usLastCreationCount.8109
 323 0014 1A88     		ldrh	r2, [r3, #0]
 324 0016 40F20003 		movw	r3, #:lower16:usCreationCount
 325 001a C0F20003 		movt	r3, #:upper16:usCreationCount
 326 001e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 327 0020 9BB2     		uxth	r3, r3
 328 0022 9A42     		cmp	r2, r3
 329 0024 03D1     		bne	.L10
 241:App/Common/Minimal/death.c **** 	{
 242:App/Common/Minimal/death.c **** 		xReturn = pdFALSE;
 330              		.loc 1 242 0
 331 0026 4FF00003 		mov	r3, #0
 332 002a 7B60     		str	r3, [r7, #4]
 333 002c 0AE0     		b	.L11
 334              	.L10:
 243:App/Common/Minimal/death.c **** 	}
 244:App/Common/Minimal/death.c **** 	else
 245:App/Common/Minimal/death.c **** 	{
 246:App/Common/Minimal/death.c **** 		usLastCreationCount = usCreationCount;
 335              		.loc 1 246 0
 336 002e 40F20003 		movw	r3, #:lower16:usCreationCount
 337 0032 C0F20003 		movt	r3, #:upper16:usCreationCount
 338 0036 1B88     		ldrh	r3, [r3, #0]	@ movhi
 339 0038 9AB2     		uxth	r2, r3
 340 003a 40F20003 		movw	r3, #:lower16:usLastCreationCount.8109
 341 003e C0F20003 		movt	r3, #:upper16:usLastCreationCount.8109
 342 0042 1A80     		strh	r2, [r3, #0]	@ movhi
 343              	.L11:
 247:App/Common/Minimal/death.c **** 	}
 248:App/Common/Minimal/death.c **** 	
 249:App/Common/Minimal/death.c **** 	uxTasksRunningNow = ( unsigned portBASE_TYPE ) uxTaskGetNumberOfTasks();
 344              		.loc 1 249 0
 345 0044 FFF7FEFF 		bl	uxTaskGetNumberOfTasks
 346 0048 0246     		mov	r2, r0
 347 004a 40F20003 		movw	r3, #:lower16:uxTasksRunningNow.8111
 348 004e C0F20003 		movt	r3, #:upper16:uxTasksRunningNow.8111
 349 0052 1A60     		str	r2, [r3, #0]
 250:App/Common/Minimal/death.c **** 
 251:App/Common/Minimal/death.c **** 	if( uxTasksRunningNow < uxTasksRunningAtStart )
 350              		.loc 1 251 0
 351 0054 40F20003 		movw	r3, #:lower16:uxTasksRunningNow.8111
 352 0058 C0F20003 		movt	r3, #:upper16:uxTasksRunningNow.8111
 353 005c 1A68     		ldr	r2, [r3, #0]
 354 005e 40F20003 		movw	r3, #:lower16:uxTasksRunningAtStart
 355 0062 C0F20003 		movt	r3, #:upper16:uxTasksRunningAtStart
 356 0066 1B68     		ldr	r3, [r3, #0]
 357 0068 9A42     		cmp	r2, r3
 358 006a 03D2     		bcs	.L12
 252:App/Common/Minimal/death.c **** 	{
 253:App/Common/Minimal/death.c **** 		xReturn = pdFALSE;
 359              		.loc 1 253 0
 360 006c 4FF00003 		mov	r3, #0
 361 0070 7B60     		str	r3, [r7, #4]
 362 0072 14E0     		b	.L13
 363              	.L12:
 254:App/Common/Minimal/death.c **** 	}
 255:App/Common/Minimal/death.c **** 	else if( ( uxTasksRunningNow - uxTasksRunningAtStart ) > uxMaxNumberOfExtraTasksRunning )
 364              		.loc 1 255 0
 365 0074 40F20003 		movw	r3, #:lower16:uxTasksRunningNow.8111
 366 0078 C0F20003 		movt	r3, #:upper16:uxTasksRunningNow.8111
 367 007c 1A68     		ldr	r2, [r3, #0]
 368 007e 40F20003 		movw	r3, #:lower16:uxTasksRunningAtStart
 369 0082 C0F20003 		movt	r3, #:upper16:uxTasksRunningAtStart
 370 0086 1B68     		ldr	r3, [r3, #0]
 371 0088 D21A     		subs	r2, r2, r3
 372 008a 40F20003 		movw	r3, #:lower16:uxMaxNumberOfExtraTasksRunning
 373 008e C0F20003 		movt	r3, #:upper16:uxMaxNumberOfExtraTasksRunning
 374 0092 1B68     		ldr	r3, [r3, #0]
 375 0094 9A42     		cmp	r2, r3
 376 0096 02D9     		bls	.L13
 256:App/Common/Minimal/death.c **** 	{
 257:App/Common/Minimal/death.c **** 		xReturn = pdFALSE;
 377              		.loc 1 257 0
 378 0098 4FF00003 		mov	r3, #0
 379 009c 7B60     		str	r3, [r7, #4]
 380              	.L13:
 258:App/Common/Minimal/death.c **** 	}
 259:App/Common/Minimal/death.c **** 	else
 260:App/Common/Minimal/death.c **** 	{
 261:App/Common/Minimal/death.c **** 		/* Everything is okay. */
 262:App/Common/Minimal/death.c **** 	}
 263:App/Common/Minimal/death.c **** 
 264:App/Common/Minimal/death.c **** 	return xReturn;
 381              		.loc 1 264 0
 382 009e 7B68     		ldr	r3, [r7, #4]
 265:App/Common/Minimal/death.c **** }
 383              		.loc 1 265 0
 384 00a0 1846     		mov	r0, r3
 385 00a2 07F10807 		add	r7, r7, #8
 386 00a6 BD46     		mov	sp, r7
 387 00a8 80BD     		pop	{r7, pc}
 388              		.cfi_endproc
 389              	.LFE113:
 391 00aa 00BF     		.section	.data.usLastCreationCount.8109,"aw",%progbits
 392              		.align	1
 395              	usLastCreationCount.8109:
 396 0000 FF0F     		.short	4095
 397              		.section	.bss.uxTasksRunningNow.8111,"aw",%nobits
 398              		.align	2
 401              	uxTasksRunningNow.8111:
 402 0000 00000000 		.space	4
 403              		.text
 404              	.Letext0:
 405              		.file 2 "/home/thanhtruong/embedded-development/toolchain/gcc-arm-none-eabi-4_7-2013q1/bin/../lib/
 406              		.file 3 "Source/portable/GCC/ARM_CM4F/portmacro.h"
 407              		.file 4 "Source/include/task.h"
 408              		.file 5 "App/STM32F4-Discovery/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 death.c
     /tmp/ccFkqGFz.s:20     .bss.usCreationCount:00000000 $d
     /tmp/ccFkqGFz.s:23     .bss.usCreationCount:00000000 usCreationCount
     /tmp/ccFkqGFz.s:26     .bss.uxTasksRunningAtStart:00000000 $d
     /tmp/ccFkqGFz.s:29     .bss.uxTasksRunningAtStart:00000000 uxTasksRunningAtStart
     /tmp/ccFkqGFz.s:32     .rodata.uxMaxNumberOfExtraTasksRunning:00000000 $d
     /tmp/ccFkqGFz.s:35     .rodata.uxMaxNumberOfExtraTasksRunning:00000000 uxMaxNumberOfExtraTasksRunning
                            *COM*:00000004 xCreatedTask
     /tmp/ccFkqGFz.s:39     .rodata:00000000 $d
     /tmp/ccFkqGFz.s:40     .rodata:00000000 .LC0
     /tmp/ccFkqGFz.s:43     .text.vCreateSuicidalTasks:00000000 $t
     /tmp/ccFkqGFz.s:48     .text.vCreateSuicidalTasks:00000000 vCreateSuicidalTasks
     /tmp/ccFkqGFz.s:208    .text.vCreateTasks:00000000 vCreateTasks
     /tmp/ccFkqGFz.s:121    .text.vSuicidalTask:00000000 $t
     /tmp/ccFkqGFz.s:125    .text.vSuicidalTask:00000000 vSuicidalTask
     /tmp/ccFkqGFz.s:198    .rodata:00000008 .LC1
     /tmp/ccFkqGFz.s:201    .rodata:00000010 .LC2
     /tmp/ccFkqGFz.s:204    .text.vCreateTasks:00000000 $t
     /tmp/ccFkqGFz.s:295    .text.xIsCreateTaskStillRunning:00000000 $t
     /tmp/ccFkqGFz.s:300    .text.xIsCreateTaskStillRunning:00000000 xIsCreateTaskStillRunning
     /tmp/ccFkqGFz.s:395    .data.usLastCreationCount.8109:00000000 usLastCreationCount.8109
     /tmp/ccFkqGFz.s:401    .bss.uxTasksRunningNow.8111:00000000 uxTasksRunningNow.8111
     /tmp/ccFkqGFz.s:392    .data.usLastCreationCount.8109:00000000 $d
     /tmp/ccFkqGFz.s:398    .bss.uxTasksRunningNow.8111:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
pvPortMalloc
xTaskGenericCreate
uxTaskGetNumberOfTasks
vTaskDelay
vTaskDelete
vPortFree
