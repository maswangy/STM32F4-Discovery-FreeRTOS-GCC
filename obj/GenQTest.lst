   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"GenQTest.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.bss.xErrorDetected,"aw",%nobits
  20              		.align	2
  23              	xErrorDetected:
  24 0000 00000000 		.space	4
  25              		.section	.bss.ulLoopCounter,"aw",%nobits
  26              		.align	2
  29              	ulLoopCounter:
  30 0000 00000000 		.space	4
  31              		.section	.bss.ulLoopCounter2,"aw",%nobits
  32              		.align	2
  35              	ulLoopCounter2:
  36 0000 00000000 		.space	4
  37              		.section	.bss.ulGuardedVariable,"aw",%nobits
  38              		.align	2
  41              	ulGuardedVariable:
  42 0000 00000000 		.space	4
  43              		.section	.bss.xHighPriorityMutexTask,"aw",%nobits
  44              		.align	2
  47              	xHighPriorityMutexTask:
  48 0000 00000000 		.space	4
  49              		.section	.bss.xMediumPriorityMutexTask,"aw",%nobits
  50              		.align	2
  53              	xMediumPriorityMutexTask:
  54 0000 00000000 		.space	4
  55              		.section	.rodata
  56              		.align	2
  57              	.LC0:
  58 0000 47656E5F 		.ascii	"Gen_Queue_Test\000"
  58      51756575 
  58      655F5465 
  58      737400
  59 000f 00       		.align	2
  60              	.LC1:
  61 0010 47656E51 		.ascii	"GenQ\000"
  61      00
  62 0015 000000   		.align	2
  63              	.LC2:
  64 0018 47656E5F 		.ascii	"Gen_Queue_Mutex\000"
  64      51756575 
  64      655F4D75 
  64      74657800 
  65              		.align	2
  66              	.LC3:
  67 0028 4D754C6F 		.ascii	"MuLow\000"
  67      7700
  68 002e 0000     		.align	2
  69              	.LC4:
  70 0030 4D754D65 		.ascii	"MuMed\000"
  70      6400
  71 0036 0000     		.align	2
  72              	.LC5:
  73 0038 4D754869 		.ascii	"MuHigh\000"
  73      676800
  74 003f 00       		.section	.text.vStartGenericQueueTasks,"ax",%progbits
  75              		.align	2
  76              		.global	vStartGenericQueueTasks
  77              		.thumb
  78              		.thumb_func
  80              	vStartGenericQueueTasks:
  81              	.LFB110:
  82              		.file 1 "App/Common/Minimal/GenQTest.c"
   1:App/Common/Minimal/GenQTest.c **** /*
   2:App/Common/Minimal/GenQTest.c ****     FreeRTOS V7.5.3 - Copyright (C) 2013 Real Time Engineers Ltd. 
   3:App/Common/Minimal/GenQTest.c ****     All rights reserved
   4:App/Common/Minimal/GenQTest.c **** 
   5:App/Common/Minimal/GenQTest.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:App/Common/Minimal/GenQTest.c **** 
   7:App/Common/Minimal/GenQTest.c ****     ***************************************************************************
   8:App/Common/Minimal/GenQTest.c ****      *                                                                       *
   9:App/Common/Minimal/GenQTest.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:App/Common/Minimal/GenQTest.c ****      *    robust, strictly quality controlled, supported, and cross          *
  11:App/Common/Minimal/GenQTest.c ****      *    platform software that has become a de facto standard.             *
  12:App/Common/Minimal/GenQTest.c ****      *                                                                       *
  13:App/Common/Minimal/GenQTest.c ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:App/Common/Minimal/GenQTest.c ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  15:App/Common/Minimal/GenQTest.c ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:App/Common/Minimal/GenQTest.c ****      *                                                                       *
  17:App/Common/Minimal/GenQTest.c ****      *    Thank you!                                                         *
  18:App/Common/Minimal/GenQTest.c ****      *                                                                       *
  19:App/Common/Minimal/GenQTest.c ****     ***************************************************************************
  20:App/Common/Minimal/GenQTest.c **** 
  21:App/Common/Minimal/GenQTest.c ****     This file is part of the FreeRTOS distribution.
  22:App/Common/Minimal/GenQTest.c **** 
  23:App/Common/Minimal/GenQTest.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  24:App/Common/Minimal/GenQTest.c ****     the terms of the GNU General Public License (version 2) as published by the
  25:App/Common/Minimal/GenQTest.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:App/Common/Minimal/GenQTest.c **** 
  27:App/Common/Minimal/GenQTest.c ****     >>! NOTE: The modification to the GPL is included to allow you to distribute
  28:App/Common/Minimal/GenQTest.c ****     >>! a combined work that includes FreeRTOS without being obliged to provide
  29:App/Common/Minimal/GenQTest.c ****     >>! the source code for proprietary components outside of the FreeRTOS
  30:App/Common/Minimal/GenQTest.c ****     >>! kernel.
  31:App/Common/Minimal/GenQTest.c **** 
  32:App/Common/Minimal/GenQTest.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:App/Common/Minimal/GenQTest.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:App/Common/Minimal/GenQTest.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:App/Common/Minimal/GenQTest.c ****     link: http://www.freertos.org/a00114.html
  36:App/Common/Minimal/GenQTest.c **** 
  37:App/Common/Minimal/GenQTest.c ****     1 tab == 4 spaces!
  38:App/Common/Minimal/GenQTest.c **** 
  39:App/Common/Minimal/GenQTest.c ****     ***************************************************************************
  40:App/Common/Minimal/GenQTest.c ****      *                                                                       *
  41:App/Common/Minimal/GenQTest.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:App/Common/Minimal/GenQTest.c ****      *    not run, what could be wrong?"                                     *
  43:App/Common/Minimal/GenQTest.c ****      *                                                                       *
  44:App/Common/Minimal/GenQTest.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  45:App/Common/Minimal/GenQTest.c ****      *                                                                       *
  46:App/Common/Minimal/GenQTest.c ****     ***************************************************************************
  47:App/Common/Minimal/GenQTest.c **** 
  48:App/Common/Minimal/GenQTest.c ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:App/Common/Minimal/GenQTest.c ****     license and Real Time Engineers Ltd. contact details.
  50:App/Common/Minimal/GenQTest.c **** 
  51:App/Common/Minimal/GenQTest.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:App/Common/Minimal/GenQTest.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:App/Common/Minimal/GenQTest.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:App/Common/Minimal/GenQTest.c **** 
  55:App/Common/Minimal/GenQTest.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:App/Common/Minimal/GenQTest.c ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:App/Common/Minimal/GenQTest.c ****     licenses offer ticketed support, indemnification and middleware.
  58:App/Common/Minimal/GenQTest.c **** 
  59:App/Common/Minimal/GenQTest.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:App/Common/Minimal/GenQTest.c ****     engineered and independently SIL3 certified version for use in safety and
  61:App/Common/Minimal/GenQTest.c ****     mission critical applications that require provable dependability.
  62:App/Common/Minimal/GenQTest.c **** 
  63:App/Common/Minimal/GenQTest.c ****     1 tab == 4 spaces!
  64:App/Common/Minimal/GenQTest.c **** */
  65:App/Common/Minimal/GenQTest.c **** 
  66:App/Common/Minimal/GenQTest.c **** 
  67:App/Common/Minimal/GenQTest.c **** /* 
  68:App/Common/Minimal/GenQTest.c ****  * Tests the extra queue functionality introduced in FreeRTOS.org V4.5.0 - 
  69:App/Common/Minimal/GenQTest.c ****  * including xQueueSendToFront(), xQueueSendToBack(), xQueuePeek() and 
  70:App/Common/Minimal/GenQTest.c ****  * mutex behaviour. 
  71:App/Common/Minimal/GenQTest.c ****  *
  72:App/Common/Minimal/GenQTest.c ****  * See the comments above the prvSendFrontAndBackTest() and 
  73:App/Common/Minimal/GenQTest.c ****  * prvLowPriorityMutexTask() prototypes below for more information.
  74:App/Common/Minimal/GenQTest.c ****  */
  75:App/Common/Minimal/GenQTest.c **** 
  76:App/Common/Minimal/GenQTest.c **** 
  77:App/Common/Minimal/GenQTest.c **** #include <stdlib.h>
  78:App/Common/Minimal/GenQTest.c **** 
  79:App/Common/Minimal/GenQTest.c **** /* Scheduler include files. */
  80:App/Common/Minimal/GenQTest.c **** #include "FreeRTOS.h"
  81:App/Common/Minimal/GenQTest.c **** #include "task.h"
  82:App/Common/Minimal/GenQTest.c **** #include "queue.h"
  83:App/Common/Minimal/GenQTest.c **** #include "semphr.h"
  84:App/Common/Minimal/GenQTest.c **** 
  85:App/Common/Minimal/GenQTest.c **** /* Demo program include files. */
  86:App/Common/Minimal/GenQTest.c **** #include "GenQTest.h"
  87:App/Common/Minimal/GenQTest.c **** 
  88:App/Common/Minimal/GenQTest.c **** #define genqQUEUE_LENGTH		( 5 )
  89:App/Common/Minimal/GenQTest.c **** #define genqNO_BLOCK			( 0 )
  90:App/Common/Minimal/GenQTest.c **** 
  91:App/Common/Minimal/GenQTest.c **** #define genqMUTEX_LOW_PRIORITY		( tskIDLE_PRIORITY )
  92:App/Common/Minimal/GenQTest.c **** #define genqMUTEX_TEST_PRIORITY		( tskIDLE_PRIORITY + 1 )
  93:App/Common/Minimal/GenQTest.c **** #define genqMUTEX_MEDIUM_PRIORITY	( tskIDLE_PRIORITY + 2 )
  94:App/Common/Minimal/GenQTest.c **** #define genqMUTEX_HIGH_PRIORITY		( tskIDLE_PRIORITY + 3 )
  95:App/Common/Minimal/GenQTest.c **** 
  96:App/Common/Minimal/GenQTest.c **** /*-----------------------------------------------------------*/
  97:App/Common/Minimal/GenQTest.c **** 
  98:App/Common/Minimal/GenQTest.c **** /*
  99:App/Common/Minimal/GenQTest.c ****  * Tests the behaviour of the xQueueSendToFront() and xQueueSendToBack()
 100:App/Common/Minimal/GenQTest.c ****  * macros by using both to fill a queue, then reading from the queue to
 101:App/Common/Minimal/GenQTest.c ****  * check the resultant queue order is as expected.  Queue data is also
 102:App/Common/Minimal/GenQTest.c ****  * peeked.
 103:App/Common/Minimal/GenQTest.c ****  */
 104:App/Common/Minimal/GenQTest.c **** static void prvSendFrontAndBackTest( void *pvParameters );
 105:App/Common/Minimal/GenQTest.c **** 
 106:App/Common/Minimal/GenQTest.c **** /*
 107:App/Common/Minimal/GenQTest.c ****  * The following three tasks are used to demonstrate the mutex behaviour.
 108:App/Common/Minimal/GenQTest.c ****  * Each task is given a different priority to demonstrate the priority
 109:App/Common/Minimal/GenQTest.c ****  * inheritance mechanism.
 110:App/Common/Minimal/GenQTest.c ****  *
 111:App/Common/Minimal/GenQTest.c ****  * The low priority task obtains a mutex.  After this a high priority task
 112:App/Common/Minimal/GenQTest.c ****  * attempts to obtain the same mutex, causing its priority to be inherited
 113:App/Common/Minimal/GenQTest.c ****  * by the low priority task.  The task with the inherited high priority then
 114:App/Common/Minimal/GenQTest.c ****  * resumes a medium priority task to ensure it is not blocked by the medium
 115:App/Common/Minimal/GenQTest.c ****  * priority task while it holds the inherited high priority.  Once the mutex
 116:App/Common/Minimal/GenQTest.c ****  * is returned the task with the inherited priority returns to its original
 117:App/Common/Minimal/GenQTest.c ****  * low priority, and is therefore immediately preempted by first the high
 118:App/Common/Minimal/GenQTest.c ****  * priority task and then the medium prioroity task before it can continue.
 119:App/Common/Minimal/GenQTest.c ****  */
 120:App/Common/Minimal/GenQTest.c **** static void prvLowPriorityMutexTask( void *pvParameters );
 121:App/Common/Minimal/GenQTest.c **** static void prvMediumPriorityMutexTask( void *pvParameters );
 122:App/Common/Minimal/GenQTest.c **** static void prvHighPriorityMutexTask( void *pvParameters );
 123:App/Common/Minimal/GenQTest.c **** 
 124:App/Common/Minimal/GenQTest.c **** /*-----------------------------------------------------------*/
 125:App/Common/Minimal/GenQTest.c **** 
 126:App/Common/Minimal/GenQTest.c **** /* Flag that will be latched to pdTRUE should any unexpected behaviour be
 127:App/Common/Minimal/GenQTest.c **** detected in any of the tasks. */
 128:App/Common/Minimal/GenQTest.c **** static volatile portBASE_TYPE xErrorDetected = pdFALSE;
 129:App/Common/Minimal/GenQTest.c **** 
 130:App/Common/Minimal/GenQTest.c **** /* Counters that are incremented on each cycle of a test.  This is used to
 131:App/Common/Minimal/GenQTest.c **** detect a stalled task - a test that is no longer running. */
 132:App/Common/Minimal/GenQTest.c **** static volatile unsigned portLONG ulLoopCounter = 0;
 133:App/Common/Minimal/GenQTest.c **** static volatile unsigned portLONG ulLoopCounter2 = 0;
 134:App/Common/Minimal/GenQTest.c **** 
 135:App/Common/Minimal/GenQTest.c **** /* The variable that is guarded by the mutex in the mutex demo tasks. */
 136:App/Common/Minimal/GenQTest.c **** static volatile unsigned portLONG ulGuardedVariable = 0;
 137:App/Common/Minimal/GenQTest.c **** 
 138:App/Common/Minimal/GenQTest.c **** /* Handles used in the mutext test to suspend and resume the high and medium
 139:App/Common/Minimal/GenQTest.c **** priority mutex test tasks. */
 140:App/Common/Minimal/GenQTest.c **** static xTaskHandle xHighPriorityMutexTask, xMediumPriorityMutexTask;
 141:App/Common/Minimal/GenQTest.c **** 
 142:App/Common/Minimal/GenQTest.c **** /*-----------------------------------------------------------*/
 143:App/Common/Minimal/GenQTest.c **** 
 144:App/Common/Minimal/GenQTest.c **** void vStartGenericQueueTasks( unsigned portBASE_TYPE uxPriority )
 145:App/Common/Minimal/GenQTest.c **** {
  83              		.loc 1 145 0
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 16
  86              		@ frame_needed = 1, uses_anonymous_args = 0
  87 0000 80B5     		push	{r7, lr}
  88              	.LCFI0:
  89              		.cfi_def_cfa_offset 8
  90              		.cfi_offset 7, -8
  91              		.cfi_offset 14, -4
  92 0002 88B0     		sub	sp, sp, #32
  93              	.LCFI1:
  94              		.cfi_def_cfa_offset 40
  95 0004 04AF     		add	r7, sp, #16
  96              	.LCFI2:
  97              		.cfi_def_cfa 7, 24
  98 0006 7860     		str	r0, [r7, #4]
 146:App/Common/Minimal/GenQTest.c **** xQueueHandle xQueue;
 147:App/Common/Minimal/GenQTest.c **** xSemaphoreHandle xMutex;
 148:App/Common/Minimal/GenQTest.c **** 
 149:App/Common/Minimal/GenQTest.c **** 	/* Create the queue that we are going to use for the
 150:App/Common/Minimal/GenQTest.c **** 	prvSendFrontAndBackTest demo. */
 151:App/Common/Minimal/GenQTest.c **** 	xQueue = xQueueCreate( genqQUEUE_LENGTH, sizeof( unsigned portLONG ) );
  99              		.loc 1 151 0
 100 0008 4FF00500 		mov	r0, #5
 101 000c 4FF00401 		mov	r1, #4
 102 0010 4FF00002 		mov	r2, #0
 103 0014 FFF7FEFF 		bl	xQueueGenericCreate
 104 0018 F860     		str	r0, [r7, #12]
 152:App/Common/Minimal/GenQTest.c **** 
 153:App/Common/Minimal/GenQTest.c **** 	/* vQueueAddToRegistry() adds the queue to the queue registry, if one is
 154:App/Common/Minimal/GenQTest.c **** 	in use.  The queue registry is provided as a means for kernel aware 
 155:App/Common/Minimal/GenQTest.c **** 	debuggers to locate queues and has no purpose if a kernel aware debugger
 156:App/Common/Minimal/GenQTest.c **** 	is not being used.  The call to vQueueAddToRegistry() will be removed
 157:App/Common/Minimal/GenQTest.c **** 	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
 158:App/Common/Minimal/GenQTest.c **** 	defined to be less than 1. */
 159:App/Common/Minimal/GenQTest.c **** 	vQueueAddToRegistry( xQueue, ( signed portCHAR * ) "Gen_Queue_Test" );
 105              		.loc 1 159 0
 106 001a F868     		ldr	r0, [r7, #12]
 107 001c 40F20001 		movw	r1, #:lower16:.LC0
 108 0020 C0F20001 		movt	r1, #:upper16:.LC0
 109 0024 FFF7FEFF 		bl	vQueueAddToRegistry
 160:App/Common/Minimal/GenQTest.c **** 
 161:App/Common/Minimal/GenQTest.c **** 	/* Create the demo task and pass it the queue just created.  We are
 162:App/Common/Minimal/GenQTest.c **** 	passing the queue handle by value so it does not matter that it is
 163:App/Common/Minimal/GenQTest.c **** 	declared on the stack here. */
 164:App/Common/Minimal/GenQTest.c **** 	xTaskCreate( prvSendFrontAndBackTest, ( signed portCHAR * )"GenQ", configMINIMAL_STACK_SIZE, ( voi
 110              		.loc 1 164 0
 111 0028 7B68     		ldr	r3, [r7, #4]
 112 002a 0093     		str	r3, [sp, #0]
 113 002c 4FF00003 		mov	r3, #0
 114 0030 0193     		str	r3, [sp, #4]
 115 0032 4FF00003 		mov	r3, #0
 116 0036 0293     		str	r3, [sp, #8]
 117 0038 4FF00003 		mov	r3, #0
 118 003c 0393     		str	r3, [sp, #12]
 119 003e 40F20000 		movw	r0, #:lower16:prvSendFrontAndBackTest
 120 0042 C0F20000 		movt	r0, #:upper16:prvSendFrontAndBackTest
 121 0046 40F20001 		movw	r1, #:lower16:.LC1
 122 004a C0F20001 		movt	r1, #:upper16:.LC1
 123 004e 4FF08202 		mov	r2, #130
 124 0052 FB68     		ldr	r3, [r7, #12]
 125 0054 FFF7FEFF 		bl	xTaskGenericCreate
 165:App/Common/Minimal/GenQTest.c **** 
 166:App/Common/Minimal/GenQTest.c **** 	/* Create the mutex used by the prvMutexTest task. */
 167:App/Common/Minimal/GenQTest.c **** 	xMutex = xSemaphoreCreateMutex();
 126              		.loc 1 167 0
 127 0058 4FF00100 		mov	r0, #1
 128 005c FFF7FEFF 		bl	xQueueCreateMutex
 129 0060 B860     		str	r0, [r7, #8]
 168:App/Common/Minimal/GenQTest.c **** 
 169:App/Common/Minimal/GenQTest.c **** 	/* vQueueAddToRegistry() adds the mutex to the registry, if one is
 170:App/Common/Minimal/GenQTest.c **** 	in use.  The registry is provided as a means for kernel aware 
 171:App/Common/Minimal/GenQTest.c **** 	debuggers to locate mutexes and has no purpose if a kernel aware debugger
 172:App/Common/Minimal/GenQTest.c **** 	is not being used.  The call to vQueueAddToRegistry() will be removed
 173:App/Common/Minimal/GenQTest.c **** 	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
 174:App/Common/Minimal/GenQTest.c **** 	defined to be less than 1. */
 175:App/Common/Minimal/GenQTest.c **** 	vQueueAddToRegistry( ( xQueueHandle ) xMutex, ( signed portCHAR * ) "Gen_Queue_Mutex" );
 130              		.loc 1 175 0
 131 0062 B868     		ldr	r0, [r7, #8]
 132 0064 40F20001 		movw	r1, #:lower16:.LC2
 133 0068 C0F20001 		movt	r1, #:upper16:.LC2
 134 006c FFF7FEFF 		bl	vQueueAddToRegistry
 176:App/Common/Minimal/GenQTest.c **** 
 177:App/Common/Minimal/GenQTest.c **** 	/* Create the mutex demo tasks and pass it the mutex just created.  We are
 178:App/Common/Minimal/GenQTest.c **** 	passing the mutex handle by value so it does not matter that it is declared
 179:App/Common/Minimal/GenQTest.c **** 	on the stack here. */
 180:App/Common/Minimal/GenQTest.c **** 	xTaskCreate( prvLowPriorityMutexTask, ( signed portCHAR * )"MuLow", configMINIMAL_STACK_SIZE, ( vo
 135              		.loc 1 180 0
 136 0070 4FF00003 		mov	r3, #0
 137 0074 0093     		str	r3, [sp, #0]
 138 0076 4FF00003 		mov	r3, #0
 139 007a 0193     		str	r3, [sp, #4]
 140 007c 4FF00003 		mov	r3, #0
 141 0080 0293     		str	r3, [sp, #8]
 142 0082 4FF00003 		mov	r3, #0
 143 0086 0393     		str	r3, [sp, #12]
 144 0088 40F20000 		movw	r0, #:lower16:prvLowPriorityMutexTask
 145 008c C0F20000 		movt	r0, #:upper16:prvLowPriorityMutexTask
 146 0090 40F20001 		movw	r1, #:lower16:.LC3
 147 0094 C0F20001 		movt	r1, #:upper16:.LC3
 148 0098 4FF08202 		mov	r2, #130
 149 009c BB68     		ldr	r3, [r7, #8]
 150 009e FFF7FEFF 		bl	xTaskGenericCreate
 181:App/Common/Minimal/GenQTest.c **** 	xTaskCreate( prvMediumPriorityMutexTask, ( signed portCHAR * )"MuMed", configMINIMAL_STACK_SIZE, N
 151              		.loc 1 181 0
 152 00a2 4FF00203 		mov	r3, #2
 153 00a6 0093     		str	r3, [sp, #0]
 154 00a8 40F20003 		movw	r3, #:lower16:xMediumPriorityMutexTask
 155 00ac C0F20003 		movt	r3, #:upper16:xMediumPriorityMutexTask
 156 00b0 0193     		str	r3, [sp, #4]
 157 00b2 4FF00003 		mov	r3, #0
 158 00b6 0293     		str	r3, [sp, #8]
 159 00b8 4FF00003 		mov	r3, #0
 160 00bc 0393     		str	r3, [sp, #12]
 161 00be 40F20000 		movw	r0, #:lower16:prvMediumPriorityMutexTask
 162 00c2 C0F20000 		movt	r0, #:upper16:prvMediumPriorityMutexTask
 163 00c6 40F20001 		movw	r1, #:lower16:.LC4
 164 00ca C0F20001 		movt	r1, #:upper16:.LC4
 165 00ce 4FF08202 		mov	r2, #130
 166 00d2 4FF00003 		mov	r3, #0
 167 00d6 FFF7FEFF 		bl	xTaskGenericCreate
 182:App/Common/Minimal/GenQTest.c **** 	xTaskCreate( prvHighPriorityMutexTask, ( signed portCHAR * )"MuHigh", configMINIMAL_STACK_SIZE, ( 
 168              		.loc 1 182 0
 169 00da 4FF00303 		mov	r3, #3
 170 00de 0093     		str	r3, [sp, #0]
 171 00e0 40F20003 		movw	r3, #:lower16:xHighPriorityMutexTask
 172 00e4 C0F20003 		movt	r3, #:upper16:xHighPriorityMutexTask
 173 00e8 0193     		str	r3, [sp, #4]
 174 00ea 4FF00003 		mov	r3, #0
 175 00ee 0293     		str	r3, [sp, #8]
 176 00f0 4FF00003 		mov	r3, #0
 177 00f4 0393     		str	r3, [sp, #12]
 178 00f6 40F20000 		movw	r0, #:lower16:prvHighPriorityMutexTask
 179 00fa C0F20000 		movt	r0, #:upper16:prvHighPriorityMutexTask
 180 00fe 40F20001 		movw	r1, #:lower16:.LC5
 181 0102 C0F20001 		movt	r1, #:upper16:.LC5
 182 0106 4FF08202 		mov	r2, #130
 183 010a BB68     		ldr	r3, [r7, #8]
 184 010c FFF7FEFF 		bl	xTaskGenericCreate
 183:App/Common/Minimal/GenQTest.c **** }
 185              		.loc 1 183 0
 186 0110 07F11007 		add	r7, r7, #16
 187 0114 BD46     		mov	sp, r7
 188 0116 80BD     		pop	{r7, pc}
 189              		.cfi_endproc
 190              	.LFE110:
 192              		.section	.text.prvSendFrontAndBackTest,"ax",%progbits
 193              		.align	2
 194              		.thumb
 195              		.thumb_func
 197              	prvSendFrontAndBackTest:
 198              	.LFB111:
 184:App/Common/Minimal/GenQTest.c **** /*-----------------------------------------------------------*/
 185:App/Common/Minimal/GenQTest.c **** 
 186:App/Common/Minimal/GenQTest.c **** static void prvSendFrontAndBackTest( void *pvParameters )
 187:App/Common/Minimal/GenQTest.c **** {
 199              		.loc 1 187 0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 24
 202              		@ frame_needed = 1, uses_anonymous_args = 0
 203 0000 80B5     		push	{r7, lr}
 204              	.LCFI3:
 205              		.cfi_def_cfa_offset 8
 206              		.cfi_offset 7, -8
 207              		.cfi_offset 14, -4
 208 0002 86B0     		sub	sp, sp, #24
 209              	.LCFI4:
 210              		.cfi_def_cfa_offset 32
 211 0004 00AF     		add	r7, sp, #0
 212              	.LCFI5:
 213              		.cfi_def_cfa_register 7
 214 0006 7860     		str	r0, [r7, #4]
 188:App/Common/Minimal/GenQTest.c **** unsigned portLONG ulData, ulData2;
 189:App/Common/Minimal/GenQTest.c **** xQueueHandle xQueue;
 190:App/Common/Minimal/GenQTest.c **** 
 191:App/Common/Minimal/GenQTest.c **** 	#ifdef USE_STDIO
 192:App/Common/Minimal/GenQTest.c **** 	void vPrintDisplayMessage( const portCHAR * const * ppcMessageToSend );
 193:App/Common/Minimal/GenQTest.c **** 	
 194:App/Common/Minimal/GenQTest.c **** 		const portCHAR * const pcTaskStartMsg = "Queue SendToFront/SendToBack/Peek test started.\r\n";
 195:App/Common/Minimal/GenQTest.c **** 
 196:App/Common/Minimal/GenQTest.c **** 		/* Queue a message for printing to say the task has started. */
 197:App/Common/Minimal/GenQTest.c **** 		vPrintDisplayMessage( &pcTaskStartMsg );
 198:App/Common/Minimal/GenQTest.c **** 	#endif
 199:App/Common/Minimal/GenQTest.c **** 
 200:App/Common/Minimal/GenQTest.c **** 	xQueue = ( xQueueHandle ) pvParameters;
 215              		.loc 1 200 0
 216 0008 7B68     		ldr	r3, [r7, #4]
 217 000a 7B61     		str	r3, [r7, #20]
 218              	.L38:
 201:App/Common/Minimal/GenQTest.c **** 
 202:App/Common/Minimal/GenQTest.c **** 	for( ;; )
 203:App/Common/Minimal/GenQTest.c **** 	{
 204:App/Common/Minimal/GenQTest.c **** 		/* The queue is empty, so sending an item to the back of the queue
 205:App/Common/Minimal/GenQTest.c **** 		should have the same efect as sending it to the front of the queue.
 206:App/Common/Minimal/GenQTest.c **** 
 207:App/Common/Minimal/GenQTest.c **** 		First send to the front and check everything is as expected. */
 208:App/Common/Minimal/GenQTest.c **** 		xQueueSendToFront( xQueue, ( void * ) &ulLoopCounter, genqNO_BLOCK );
 219              		.loc 1 208 0
 220 000c 7869     		ldr	r0, [r7, #20]
 221 000e 40F20001 		movw	r1, #:lower16:ulLoopCounter
 222 0012 C0F20001 		movt	r1, #:upper16:ulLoopCounter
 223 0016 4FF00002 		mov	r2, #0
 224 001a 4FF00103 		mov	r3, #1
 225 001e FFF7FEFF 		bl	xQueueGenericSend
 209:App/Common/Minimal/GenQTest.c **** 
 210:App/Common/Minimal/GenQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 226              		.loc 1 210 0
 227 0022 7869     		ldr	r0, [r7, #20]
 228 0024 FFF7FEFF 		bl	uxQueueMessagesWaiting
 229 0028 0346     		mov	r3, r0
 230 002a 012B     		cmp	r3, #1
 231 002c 06D0     		beq	.L3
 211:App/Common/Minimal/GenQTest.c **** 		{
 212:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 232              		.loc 1 212 0
 233 002e 40F20003 		movw	r3, #:lower16:xErrorDetected
 234 0032 C0F20003 		movt	r3, #:upper16:xErrorDetected
 235 0036 4FF00102 		mov	r2, #1
 236 003a 1A60     		str	r2, [r3, #0]
 237              	.L3:
 213:App/Common/Minimal/GenQTest.c **** 		}
 214:App/Common/Minimal/GenQTest.c **** 
 215:App/Common/Minimal/GenQTest.c **** 		if( xQueueReceive( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != pdPASS )
 238              		.loc 1 215 0
 239 003c 07F11003 		add	r3, r7, #16
 240 0040 7869     		ldr	r0, [r7, #20]
 241 0042 1946     		mov	r1, r3
 242 0044 4FF00002 		mov	r2, #0
 243 0048 4FF00003 		mov	r3, #0
 244 004c FFF7FEFF 		bl	xQueueGenericReceive
 245 0050 0346     		mov	r3, r0
 246 0052 012B     		cmp	r3, #1
 247 0054 06D0     		beq	.L4
 216:App/Common/Minimal/GenQTest.c **** 		{
 217:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 248              		.loc 1 217 0
 249 0056 40F20003 		movw	r3, #:lower16:xErrorDetected
 250 005a C0F20003 		movt	r3, #:upper16:xErrorDetected
 251 005e 4FF00102 		mov	r2, #1
 252 0062 1A60     		str	r2, [r3, #0]
 253              	.L4:
 218:App/Common/Minimal/GenQTest.c **** 		}
 219:App/Common/Minimal/GenQTest.c **** 
 220:App/Common/Minimal/GenQTest.c **** 		/* The data we sent to the queue should equal the data we just received
 221:App/Common/Minimal/GenQTest.c **** 		from the queue. */
 222:App/Common/Minimal/GenQTest.c **** 		if( ulLoopCounter != ulData )
 254              		.loc 1 222 0
 255 0064 40F20003 		movw	r3, #:lower16:ulLoopCounter
 256 0068 C0F20003 		movt	r3, #:upper16:ulLoopCounter
 257 006c 1A68     		ldr	r2, [r3, #0]
 258 006e 3B69     		ldr	r3, [r7, #16]
 259 0070 9A42     		cmp	r2, r3
 260 0072 06D0     		beq	.L5
 223:App/Common/Minimal/GenQTest.c **** 		{
 224:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 261              		.loc 1 224 0
 262 0074 40F20003 		movw	r3, #:lower16:xErrorDetected
 263 0078 C0F20003 		movt	r3, #:upper16:xErrorDetected
 264 007c 4FF00102 		mov	r2, #1
 265 0080 1A60     		str	r2, [r3, #0]
 266              	.L5:
 225:App/Common/Minimal/GenQTest.c **** 		}
 226:App/Common/Minimal/GenQTest.c **** 
 227:App/Common/Minimal/GenQTest.c **** 		/* Then do the same, sending the data to the back, checking everything
 228:App/Common/Minimal/GenQTest.c **** 		is as expected. */
 229:App/Common/Minimal/GenQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 267              		.loc 1 229 0
 268 0082 7869     		ldr	r0, [r7, #20]
 269 0084 FFF7FEFF 		bl	uxQueueMessagesWaiting
 270 0088 0346     		mov	r3, r0
 271 008a 002B     		cmp	r3, #0
 272 008c 06D0     		beq	.L6
 230:App/Common/Minimal/GenQTest.c **** 		{
 231:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 273              		.loc 1 231 0
 274 008e 40F20003 		movw	r3, #:lower16:xErrorDetected
 275 0092 C0F20003 		movt	r3, #:upper16:xErrorDetected
 276 0096 4FF00102 		mov	r2, #1
 277 009a 1A60     		str	r2, [r3, #0]
 278              	.L6:
 232:App/Common/Minimal/GenQTest.c **** 		}
 233:App/Common/Minimal/GenQTest.c **** 
 234:App/Common/Minimal/GenQTest.c **** 		xQueueSendToBack( xQueue, ( void * ) &ulLoopCounter, genqNO_BLOCK );
 279              		.loc 1 234 0
 280 009c 7869     		ldr	r0, [r7, #20]
 281 009e 40F20001 		movw	r1, #:lower16:ulLoopCounter
 282 00a2 C0F20001 		movt	r1, #:upper16:ulLoopCounter
 283 00a6 4FF00002 		mov	r2, #0
 284 00aa 4FF00003 		mov	r3, #0
 285 00ae FFF7FEFF 		bl	xQueueGenericSend
 235:App/Common/Minimal/GenQTest.c **** 
 236:App/Common/Minimal/GenQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 286              		.loc 1 236 0
 287 00b2 7869     		ldr	r0, [r7, #20]
 288 00b4 FFF7FEFF 		bl	uxQueueMessagesWaiting
 289 00b8 0346     		mov	r3, r0
 290 00ba 012B     		cmp	r3, #1
 291 00bc 06D0     		beq	.L7
 237:App/Common/Minimal/GenQTest.c **** 		{
 238:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 292              		.loc 1 238 0
 293 00be 40F20003 		movw	r3, #:lower16:xErrorDetected
 294 00c2 C0F20003 		movt	r3, #:upper16:xErrorDetected
 295 00c6 4FF00102 		mov	r2, #1
 296 00ca 1A60     		str	r2, [r3, #0]
 297              	.L7:
 239:App/Common/Minimal/GenQTest.c **** 		}
 240:App/Common/Minimal/GenQTest.c **** 
 241:App/Common/Minimal/GenQTest.c **** 		if( xQueueReceive( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != pdPASS )
 298              		.loc 1 241 0
 299 00cc 07F11003 		add	r3, r7, #16
 300 00d0 7869     		ldr	r0, [r7, #20]
 301 00d2 1946     		mov	r1, r3
 302 00d4 4FF00002 		mov	r2, #0
 303 00d8 4FF00003 		mov	r3, #0
 304 00dc FFF7FEFF 		bl	xQueueGenericReceive
 305 00e0 0346     		mov	r3, r0
 306 00e2 012B     		cmp	r3, #1
 307 00e4 06D0     		beq	.L8
 242:App/Common/Minimal/GenQTest.c **** 		{
 243:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 308              		.loc 1 243 0
 309 00e6 40F20003 		movw	r3, #:lower16:xErrorDetected
 310 00ea C0F20003 		movt	r3, #:upper16:xErrorDetected
 311 00ee 4FF00102 		mov	r2, #1
 312 00f2 1A60     		str	r2, [r3, #0]
 313              	.L8:
 244:App/Common/Minimal/GenQTest.c **** 		}
 245:App/Common/Minimal/GenQTest.c **** 
 246:App/Common/Minimal/GenQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 314              		.loc 1 246 0
 315 00f4 7869     		ldr	r0, [r7, #20]
 316 00f6 FFF7FEFF 		bl	uxQueueMessagesWaiting
 317 00fa 0346     		mov	r3, r0
 318 00fc 002B     		cmp	r3, #0
 319 00fe 06D0     		beq	.L9
 247:App/Common/Minimal/GenQTest.c **** 		{
 248:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 320              		.loc 1 248 0
 321 0100 40F20003 		movw	r3, #:lower16:xErrorDetected
 322 0104 C0F20003 		movt	r3, #:upper16:xErrorDetected
 323 0108 4FF00102 		mov	r2, #1
 324 010c 1A60     		str	r2, [r3, #0]
 325              	.L9:
 249:App/Common/Minimal/GenQTest.c **** 		}
 250:App/Common/Minimal/GenQTest.c **** 
 251:App/Common/Minimal/GenQTest.c **** 		/* The data we sent to the queue should equal the data we just received
 252:App/Common/Minimal/GenQTest.c **** 		from the queue. */
 253:App/Common/Minimal/GenQTest.c **** 		if( ulLoopCounter != ulData )
 326              		.loc 1 253 0
 327 010e 40F20003 		movw	r3, #:lower16:ulLoopCounter
 328 0112 C0F20003 		movt	r3, #:upper16:ulLoopCounter
 329 0116 1A68     		ldr	r2, [r3, #0]
 330 0118 3B69     		ldr	r3, [r7, #16]
 331 011a 9A42     		cmp	r2, r3
 332 011c 06D0     		beq	.L10
 254:App/Common/Minimal/GenQTest.c **** 		{
 255:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 333              		.loc 1 255 0
 334 011e 40F20003 		movw	r3, #:lower16:xErrorDetected
 335 0122 C0F20003 		movt	r3, #:upper16:xErrorDetected
 336 0126 4FF00102 		mov	r2, #1
 337 012a 1A60     		str	r2, [r3, #0]
 338              	.L10:
 256:App/Common/Minimal/GenQTest.c **** 		}
 257:App/Common/Minimal/GenQTest.c **** 
 258:App/Common/Minimal/GenQTest.c **** 		#if configUSE_PREEMPTION == 0
 259:App/Common/Minimal/GenQTest.c **** 			taskYIELD();
 260:App/Common/Minimal/GenQTest.c **** 		#endif
 261:App/Common/Minimal/GenQTest.c **** 
 262:App/Common/Minimal/GenQTest.c **** 
 263:App/Common/Minimal/GenQTest.c **** 
 264:App/Common/Minimal/GenQTest.c **** 		/* Place 2, 3, 4 into the queue, adding items to the back of the queue. */
 265:App/Common/Minimal/GenQTest.c **** 		for( ulData = 2; ulData < 5; ulData++ )
 339              		.loc 1 265 0
 340 012c 4FF00203 		mov	r3, #2
 341 0130 3B61     		str	r3, [r7, #16]
 342 0132 0DE0     		b	.L11
 343              	.L12:
 266:App/Common/Minimal/GenQTest.c **** 		{
 267:App/Common/Minimal/GenQTest.c **** 			xQueueSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK );
 344              		.loc 1 267 0 discriminator 2
 345 0134 07F11003 		add	r3, r7, #16
 346 0138 7869     		ldr	r0, [r7, #20]
 347 013a 1946     		mov	r1, r3
 348 013c 4FF00002 		mov	r2, #0
 349 0140 4FF00003 		mov	r3, #0
 350 0144 FFF7FEFF 		bl	xQueueGenericSend
 265:App/Common/Minimal/GenQTest.c **** 		for( ulData = 2; ulData < 5; ulData++ )
 351              		.loc 1 265 0 discriminator 2
 352 0148 3B69     		ldr	r3, [r7, #16]
 353 014a 03F10103 		add	r3, r3, #1
 354 014e 3B61     		str	r3, [r7, #16]
 355              	.L11:
 265:App/Common/Minimal/GenQTest.c **** 		for( ulData = 2; ulData < 5; ulData++ )
 356              		.loc 1 265 0 is_stmt 0 discriminator 1
 357 0150 3B69     		ldr	r3, [r7, #16]
 358 0152 042B     		cmp	r3, #4
 359 0154 EED9     		bls	.L12
 268:App/Common/Minimal/GenQTest.c **** 		}
 269:App/Common/Minimal/GenQTest.c **** 
 270:App/Common/Minimal/GenQTest.c **** 		/* Now the order in the queue should be 2, 3, 4, with 2 being the first
 271:App/Common/Minimal/GenQTest.c **** 		thing to be read out.  Now add 1 then 0 to the front of the queue. */
 272:App/Common/Minimal/GenQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 3 )
 360              		.loc 1 272 0 is_stmt 1
 361 0156 7869     		ldr	r0, [r7, #20]
 362 0158 FFF7FEFF 		bl	uxQueueMessagesWaiting
 363 015c 0346     		mov	r3, r0
 364 015e 032B     		cmp	r3, #3
 365 0160 06D0     		beq	.L13
 273:App/Common/Minimal/GenQTest.c **** 		{
 274:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 366              		.loc 1 274 0
 367 0162 40F20003 		movw	r3, #:lower16:xErrorDetected
 368 0166 C0F20003 		movt	r3, #:upper16:xErrorDetected
 369 016a 4FF00102 		mov	r2, #1
 370 016e 1A60     		str	r2, [r3, #0]
 371              	.L13:
 275:App/Common/Minimal/GenQTest.c **** 		}
 276:App/Common/Minimal/GenQTest.c **** 		ulData = 1;
 372              		.loc 1 276 0
 373 0170 4FF00103 		mov	r3, #1
 374 0174 3B61     		str	r3, [r7, #16]
 277:App/Common/Minimal/GenQTest.c **** 		xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK );
 375              		.loc 1 277 0
 376 0176 07F11003 		add	r3, r7, #16
 377 017a 7869     		ldr	r0, [r7, #20]
 378 017c 1946     		mov	r1, r3
 379 017e 4FF00002 		mov	r2, #0
 380 0182 4FF00103 		mov	r3, #1
 381 0186 FFF7FEFF 		bl	xQueueGenericSend
 278:App/Common/Minimal/GenQTest.c **** 		ulData = 0;
 382              		.loc 1 278 0
 383 018a 4FF00003 		mov	r3, #0
 384 018e 3B61     		str	r3, [r7, #16]
 279:App/Common/Minimal/GenQTest.c **** 		xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK );
 385              		.loc 1 279 0
 386 0190 07F11003 		add	r3, r7, #16
 387 0194 7869     		ldr	r0, [r7, #20]
 388 0196 1946     		mov	r1, r3
 389 0198 4FF00002 		mov	r2, #0
 390 019c 4FF00103 		mov	r3, #1
 391 01a0 FFF7FEFF 		bl	xQueueGenericSend
 280:App/Common/Minimal/GenQTest.c **** 
 281:App/Common/Minimal/GenQTest.c **** 		/* Now the queue should be full, and when we read the data out we
 282:App/Common/Minimal/GenQTest.c **** 		should receive 0, 1, 2, 3, 4. */
 283:App/Common/Minimal/GenQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 5 )
 392              		.loc 1 283 0
 393 01a4 7869     		ldr	r0, [r7, #20]
 394 01a6 FFF7FEFF 		bl	uxQueueMessagesWaiting
 395 01aa 0346     		mov	r3, r0
 396 01ac 052B     		cmp	r3, #5
 397 01ae 06D0     		beq	.L14
 284:App/Common/Minimal/GenQTest.c **** 		{
 285:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 398              		.loc 1 285 0
 399 01b0 40F20003 		movw	r3, #:lower16:xErrorDetected
 400 01b4 C0F20003 		movt	r3, #:upper16:xErrorDetected
 401 01b8 4FF00102 		mov	r2, #1
 402 01bc 1A60     		str	r2, [r3, #0]
 403              	.L14:
 286:App/Common/Minimal/GenQTest.c **** 		}
 287:App/Common/Minimal/GenQTest.c **** 
 288:App/Common/Minimal/GenQTest.c **** 		if( xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
 404              		.loc 1 288 0
 405 01be 07F11003 		add	r3, r7, #16
 406 01c2 7869     		ldr	r0, [r7, #20]
 407 01c4 1946     		mov	r1, r3
 408 01c6 4FF00002 		mov	r2, #0
 409 01ca 4FF00103 		mov	r3, #1
 410 01ce FFF7FEFF 		bl	xQueueGenericSend
 411 01d2 0346     		mov	r3, r0
 412 01d4 002B     		cmp	r3, #0
 413 01d6 06D0     		beq	.L15
 289:App/Common/Minimal/GenQTest.c **** 		{
 290:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 414              		.loc 1 290 0
 415 01d8 40F20003 		movw	r3, #:lower16:xErrorDetected
 416 01dc C0F20003 		movt	r3, #:upper16:xErrorDetected
 417 01e0 4FF00102 		mov	r2, #1
 418 01e4 1A60     		str	r2, [r3, #0]
 419              	.L15:
 291:App/Common/Minimal/GenQTest.c **** 		}
 292:App/Common/Minimal/GenQTest.c **** 
 293:App/Common/Minimal/GenQTest.c **** 		if( xQueueSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
 420              		.loc 1 293 0
 421 01e6 07F11003 		add	r3, r7, #16
 422 01ea 7869     		ldr	r0, [r7, #20]
 423 01ec 1946     		mov	r1, r3
 424 01ee 4FF00002 		mov	r2, #0
 425 01f2 4FF00003 		mov	r3, #0
 426 01f6 FFF7FEFF 		bl	xQueueGenericSend
 427 01fa 0346     		mov	r3, r0
 428 01fc 002B     		cmp	r3, #0
 429 01fe 06D0     		beq	.L16
 294:App/Common/Minimal/GenQTest.c **** 		{
 295:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 430              		.loc 1 295 0
 431 0200 40F20003 		movw	r3, #:lower16:xErrorDetected
 432 0204 C0F20003 		movt	r3, #:upper16:xErrorDetected
 433 0208 4FF00102 		mov	r2, #1
 434 020c 1A60     		str	r2, [r3, #0]
 435              	.L16:
 296:App/Common/Minimal/GenQTest.c **** 		}
 297:App/Common/Minimal/GenQTest.c **** 
 298:App/Common/Minimal/GenQTest.c **** 		#if configUSE_PREEMPTION == 0
 299:App/Common/Minimal/GenQTest.c **** 			taskYIELD();
 300:App/Common/Minimal/GenQTest.c **** 		#endif
 301:App/Common/Minimal/GenQTest.c **** 
 302:App/Common/Minimal/GenQTest.c **** 		/* Check the data we read out is in the expected order. */
 303:App/Common/Minimal/GenQTest.c **** 		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
 436              		.loc 1 303 0
 437 020e 4FF00003 		mov	r3, #0
 438 0212 3B61     		str	r3, [r7, #16]
 439 0214 45E0     		b	.L17
 440              	.L22:
 304:App/Common/Minimal/GenQTest.c **** 		{
 305:App/Common/Minimal/GenQTest.c **** 			/* Try peeking the data first. */
 306:App/Common/Minimal/GenQTest.c **** 			if( xQueuePeek( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
 441              		.loc 1 306 0
 442 0216 07F10C03 		add	r3, r7, #12
 443 021a 7869     		ldr	r0, [r7, #20]
 444 021c 1946     		mov	r1, r3
 445 021e 4FF00002 		mov	r2, #0
 446 0222 4FF00103 		mov	r3, #1
 447 0226 FFF7FEFF 		bl	xQueueGenericReceive
 448 022a 0346     		mov	r3, r0
 449 022c 012B     		cmp	r3, #1
 450 022e 06D0     		beq	.L18
 307:App/Common/Minimal/GenQTest.c **** 			{
 308:App/Common/Minimal/GenQTest.c **** 				xErrorDetected = pdTRUE;
 451              		.loc 1 308 0
 452 0230 40F20003 		movw	r3, #:lower16:xErrorDetected
 453 0234 C0F20003 		movt	r3, #:upper16:xErrorDetected
 454 0238 4FF00102 		mov	r2, #1
 455 023c 1A60     		str	r2, [r3, #0]
 456              	.L18:
 309:App/Common/Minimal/GenQTest.c **** 			}
 310:App/Common/Minimal/GenQTest.c **** 
 311:App/Common/Minimal/GenQTest.c **** 			if( ulData != ulData2 )
 457              		.loc 1 311 0
 458 023e 3A69     		ldr	r2, [r7, #16]
 459 0240 FB68     		ldr	r3, [r7, #12]
 460 0242 9A42     		cmp	r2, r3
 461 0244 06D0     		beq	.L19
 312:App/Common/Minimal/GenQTest.c **** 			{
 313:App/Common/Minimal/GenQTest.c **** 				xErrorDetected = pdTRUE;
 462              		.loc 1 313 0
 463 0246 40F20003 		movw	r3, #:lower16:xErrorDetected
 464 024a C0F20003 		movt	r3, #:upper16:xErrorDetected
 465 024e 4FF00102 		mov	r2, #1
 466 0252 1A60     		str	r2, [r3, #0]
 467              	.L19:
 314:App/Common/Minimal/GenQTest.c **** 			}
 315:App/Common/Minimal/GenQTest.c **** 			
 316:App/Common/Minimal/GenQTest.c **** 
 317:App/Common/Minimal/GenQTest.c **** 			/* Now try receiving the data for real.  The value should be the
 318:App/Common/Minimal/GenQTest.c **** 			same.  Clobber the value first so we know we really received it. */
 319:App/Common/Minimal/GenQTest.c **** 			ulData2 = ~ulData2;
 468              		.loc 1 319 0
 469 0254 FB68     		ldr	r3, [r7, #12]
 470 0256 6FEA0303 		mvn	r3, r3
 471 025a FB60     		str	r3, [r7, #12]
 320:App/Common/Minimal/GenQTest.c **** 			if( xQueueReceive( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
 472              		.loc 1 320 0
 473 025c 07F10C03 		add	r3, r7, #12
 474 0260 7869     		ldr	r0, [r7, #20]
 475 0262 1946     		mov	r1, r3
 476 0264 4FF00002 		mov	r2, #0
 477 0268 4FF00003 		mov	r3, #0
 478 026c FFF7FEFF 		bl	xQueueGenericReceive
 479 0270 0346     		mov	r3, r0
 480 0272 012B     		cmp	r3, #1
 481 0274 06D0     		beq	.L20
 321:App/Common/Minimal/GenQTest.c **** 			{
 322:App/Common/Minimal/GenQTest.c **** 				xErrorDetected = pdTRUE;
 482              		.loc 1 322 0
 483 0276 40F20003 		movw	r3, #:lower16:xErrorDetected
 484 027a C0F20003 		movt	r3, #:upper16:xErrorDetected
 485 027e 4FF00102 		mov	r2, #1
 486 0282 1A60     		str	r2, [r3, #0]
 487              	.L20:
 323:App/Common/Minimal/GenQTest.c **** 			}
 324:App/Common/Minimal/GenQTest.c **** 
 325:App/Common/Minimal/GenQTest.c **** 			if( ulData != ulData2 )
 488              		.loc 1 325 0
 489 0284 3A69     		ldr	r2, [r7, #16]
 490 0286 FB68     		ldr	r3, [r7, #12]
 491 0288 9A42     		cmp	r2, r3
 492 028a 06D0     		beq	.L21
 326:App/Common/Minimal/GenQTest.c **** 			{
 327:App/Common/Minimal/GenQTest.c **** 				xErrorDetected = pdTRUE;
 493              		.loc 1 327 0
 494 028c 40F20003 		movw	r3, #:lower16:xErrorDetected
 495 0290 C0F20003 		movt	r3, #:upper16:xErrorDetected
 496 0294 4FF00102 		mov	r2, #1
 497 0298 1A60     		str	r2, [r3, #0]
 498              	.L21:
 303:App/Common/Minimal/GenQTest.c **** 		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
 499              		.loc 1 303 0
 500 029a 3B69     		ldr	r3, [r7, #16]
 501 029c 03F10103 		add	r3, r3, #1
 502 02a0 3B61     		str	r3, [r7, #16]
 503              	.L17:
 303:App/Common/Minimal/GenQTest.c **** 		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
 504              		.loc 1 303 0 is_stmt 0 discriminator 1
 505 02a2 3B69     		ldr	r3, [r7, #16]
 506 02a4 042B     		cmp	r3, #4
 507 02a6 B6D9     		bls	.L22
 328:App/Common/Minimal/GenQTest.c **** 			}
 329:App/Common/Minimal/GenQTest.c **** 		}
 330:App/Common/Minimal/GenQTest.c **** 
 331:App/Common/Minimal/GenQTest.c **** 		/* The queue should now be empty again. */
 332:App/Common/Minimal/GenQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 508              		.loc 1 332 0 is_stmt 1
 509 02a8 7869     		ldr	r0, [r7, #20]
 510 02aa FFF7FEFF 		bl	uxQueueMessagesWaiting
 511 02ae 0346     		mov	r3, r0
 512 02b0 002B     		cmp	r3, #0
 513 02b2 06D0     		beq	.L23
 333:App/Common/Minimal/GenQTest.c **** 		{
 334:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 514              		.loc 1 334 0
 515 02b4 40F20003 		movw	r3, #:lower16:xErrorDetected
 516 02b8 C0F20003 		movt	r3, #:upper16:xErrorDetected
 517 02bc 4FF00102 		mov	r2, #1
 518 02c0 1A60     		str	r2, [r3, #0]
 519              	.L23:
 335:App/Common/Minimal/GenQTest.c **** 		}
 336:App/Common/Minimal/GenQTest.c **** 
 337:App/Common/Minimal/GenQTest.c **** 		#if configUSE_PREEMPTION == 0
 338:App/Common/Minimal/GenQTest.c **** 			taskYIELD();
 339:App/Common/Minimal/GenQTest.c **** 		#endif
 340:App/Common/Minimal/GenQTest.c **** 
 341:App/Common/Minimal/GenQTest.c **** 
 342:App/Common/Minimal/GenQTest.c **** 		/* Our queue is empty once more, add 10, 11 to the back. */
 343:App/Common/Minimal/GenQTest.c **** 		ulData = 10;
 520              		.loc 1 343 0
 521 02c2 4FF00A03 		mov	r3, #10
 522 02c6 3B61     		str	r3, [r7, #16]
 344:App/Common/Minimal/GenQTest.c **** 		if( xQueueSend( xQueue, &ulData, genqNO_BLOCK ) != pdPASS )
 523              		.loc 1 344 0
 524 02c8 07F11003 		add	r3, r7, #16
 525 02cc 7869     		ldr	r0, [r7, #20]
 526 02ce 1946     		mov	r1, r3
 527 02d0 4FF00002 		mov	r2, #0
 528 02d4 4FF00003 		mov	r3, #0
 529 02d8 FFF7FEFF 		bl	xQueueGenericSend
 530 02dc 0346     		mov	r3, r0
 531 02de 012B     		cmp	r3, #1
 532 02e0 06D0     		beq	.L24
 345:App/Common/Minimal/GenQTest.c **** 		{
 346:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 533              		.loc 1 346 0
 534 02e2 40F20003 		movw	r3, #:lower16:xErrorDetected
 535 02e6 C0F20003 		movt	r3, #:upper16:xErrorDetected
 536 02ea 4FF00102 		mov	r2, #1
 537 02ee 1A60     		str	r2, [r3, #0]
 538              	.L24:
 347:App/Common/Minimal/GenQTest.c **** 		}
 348:App/Common/Minimal/GenQTest.c **** 		ulData = 11;
 539              		.loc 1 348 0
 540 02f0 4FF00B03 		mov	r3, #11
 541 02f4 3B61     		str	r3, [r7, #16]
 349:App/Common/Minimal/GenQTest.c **** 		if( xQueueSend( xQueue, &ulData, genqNO_BLOCK ) != pdPASS )
 542              		.loc 1 349 0
 543 02f6 07F11003 		add	r3, r7, #16
 544 02fa 7869     		ldr	r0, [r7, #20]
 545 02fc 1946     		mov	r1, r3
 546 02fe 4FF00002 		mov	r2, #0
 547 0302 4FF00003 		mov	r3, #0
 548 0306 FFF7FEFF 		bl	xQueueGenericSend
 549 030a 0346     		mov	r3, r0
 550 030c 012B     		cmp	r3, #1
 551 030e 06D0     		beq	.L25
 350:App/Common/Minimal/GenQTest.c **** 		{
 351:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 552              		.loc 1 351 0
 553 0310 40F20003 		movw	r3, #:lower16:xErrorDetected
 554 0314 C0F20003 		movt	r3, #:upper16:xErrorDetected
 555 0318 4FF00102 		mov	r2, #1
 556 031c 1A60     		str	r2, [r3, #0]
 557              	.L25:
 352:App/Common/Minimal/GenQTest.c **** 		}
 353:App/Common/Minimal/GenQTest.c **** 
 354:App/Common/Minimal/GenQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 2 )
 558              		.loc 1 354 0
 559 031e 7869     		ldr	r0, [r7, #20]
 560 0320 FFF7FEFF 		bl	uxQueueMessagesWaiting
 561 0324 0346     		mov	r3, r0
 562 0326 022B     		cmp	r3, #2
 563 0328 06D0     		beq	.L26
 355:App/Common/Minimal/GenQTest.c **** 		{
 356:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 564              		.loc 1 356 0
 565 032a 40F20003 		movw	r3, #:lower16:xErrorDetected
 566 032e C0F20003 		movt	r3, #:upper16:xErrorDetected
 567 0332 4FF00102 		mov	r2, #1
 568 0336 1A60     		str	r2, [r3, #0]
 569              	.L26:
 357:App/Common/Minimal/GenQTest.c **** 		}
 358:App/Common/Minimal/GenQTest.c **** 
 359:App/Common/Minimal/GenQTest.c **** 		/* Now we should have 10, 11 in the queue.  Add 7, 8, 9 to the
 360:App/Common/Minimal/GenQTest.c **** 		front. */
 361:App/Common/Minimal/GenQTest.c **** 		for( ulData = 9; ulData >= 7; ulData-- )
 570              		.loc 1 361 0
 571 0338 4FF00903 		mov	r3, #9
 572 033c 3B61     		str	r3, [r7, #16]
 573 033e 17E0     		b	.L27
 574              	.L29:
 362:App/Common/Minimal/GenQTest.c **** 		{
 363:App/Common/Minimal/GenQTest.c **** 			if( xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != pdPASS )
 575              		.loc 1 363 0
 576 0340 07F11003 		add	r3, r7, #16
 577 0344 7869     		ldr	r0, [r7, #20]
 578 0346 1946     		mov	r1, r3
 579 0348 4FF00002 		mov	r2, #0
 580 034c 4FF00103 		mov	r3, #1
 581 0350 FFF7FEFF 		bl	xQueueGenericSend
 582 0354 0346     		mov	r3, r0
 583 0356 012B     		cmp	r3, #1
 584 0358 06D0     		beq	.L28
 364:App/Common/Minimal/GenQTest.c **** 			{
 365:App/Common/Minimal/GenQTest.c **** 				xErrorDetected = pdTRUE;
 585              		.loc 1 365 0
 586 035a 40F20003 		movw	r3, #:lower16:xErrorDetected
 587 035e C0F20003 		movt	r3, #:upper16:xErrorDetected
 588 0362 4FF00102 		mov	r2, #1
 589 0366 1A60     		str	r2, [r3, #0]
 590              	.L28:
 361:App/Common/Minimal/GenQTest.c **** 		for( ulData = 9; ulData >= 7; ulData-- )
 591              		.loc 1 361 0
 592 0368 3B69     		ldr	r3, [r7, #16]
 593 036a 03F1FF33 		add	r3, r3, #-1
 594 036e 3B61     		str	r3, [r7, #16]
 595              	.L27:
 361:App/Common/Minimal/GenQTest.c **** 		for( ulData = 9; ulData >= 7; ulData-- )
 596              		.loc 1 361 0 is_stmt 0 discriminator 1
 597 0370 3B69     		ldr	r3, [r7, #16]
 598 0372 062B     		cmp	r3, #6
 599 0374 E4D8     		bhi	.L29
 366:App/Common/Minimal/GenQTest.c **** 			}
 367:App/Common/Minimal/GenQTest.c **** 		}
 368:App/Common/Minimal/GenQTest.c **** 
 369:App/Common/Minimal/GenQTest.c **** 		/* Now check that the queue is full, and that receiving data provides
 370:App/Common/Minimal/GenQTest.c **** 		the expected sequence of 7, 8, 9, 10, 11. */
 371:App/Common/Minimal/GenQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 5 )
 600              		.loc 1 371 0 is_stmt 1
 601 0376 7869     		ldr	r0, [r7, #20]
 602 0378 FFF7FEFF 		bl	uxQueueMessagesWaiting
 603 037c 0346     		mov	r3, r0
 604 037e 052B     		cmp	r3, #5
 605 0380 06D0     		beq	.L30
 372:App/Common/Minimal/GenQTest.c **** 		{
 373:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 606              		.loc 1 373 0
 607 0382 40F20003 		movw	r3, #:lower16:xErrorDetected
 608 0386 C0F20003 		movt	r3, #:upper16:xErrorDetected
 609 038a 4FF00102 		mov	r2, #1
 610 038e 1A60     		str	r2, [r3, #0]
 611              	.L30:
 374:App/Common/Minimal/GenQTest.c **** 		}
 375:App/Common/Minimal/GenQTest.c **** 
 376:App/Common/Minimal/GenQTest.c **** 		if( xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
 612              		.loc 1 376 0
 613 0390 07F11003 		add	r3, r7, #16
 614 0394 7869     		ldr	r0, [r7, #20]
 615 0396 1946     		mov	r1, r3
 616 0398 4FF00002 		mov	r2, #0
 617 039c 4FF00103 		mov	r3, #1
 618 03a0 FFF7FEFF 		bl	xQueueGenericSend
 619 03a4 0346     		mov	r3, r0
 620 03a6 002B     		cmp	r3, #0
 621 03a8 06D0     		beq	.L31
 377:App/Common/Minimal/GenQTest.c **** 		{
 378:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 622              		.loc 1 378 0
 623 03aa 40F20003 		movw	r3, #:lower16:xErrorDetected
 624 03ae C0F20003 		movt	r3, #:upper16:xErrorDetected
 625 03b2 4FF00102 		mov	r2, #1
 626 03b6 1A60     		str	r2, [r3, #0]
 627              	.L31:
 379:App/Common/Minimal/GenQTest.c **** 		}
 380:App/Common/Minimal/GenQTest.c **** 
 381:App/Common/Minimal/GenQTest.c **** 		if( xQueueSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
 628              		.loc 1 381 0
 629 03b8 07F11003 		add	r3, r7, #16
 630 03bc 7869     		ldr	r0, [r7, #20]
 631 03be 1946     		mov	r1, r3
 632 03c0 4FF00002 		mov	r2, #0
 633 03c4 4FF00003 		mov	r3, #0
 634 03c8 FFF7FEFF 		bl	xQueueGenericSend
 635 03cc 0346     		mov	r3, r0
 636 03ce 002B     		cmp	r3, #0
 637 03d0 06D0     		beq	.L32
 382:App/Common/Minimal/GenQTest.c **** 		{
 383:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 638              		.loc 1 383 0
 639 03d2 40F20003 		movw	r3, #:lower16:xErrorDetected
 640 03d6 C0F20003 		movt	r3, #:upper16:xErrorDetected
 641 03da 4FF00102 		mov	r2, #1
 642 03de 1A60     		str	r2, [r3, #0]
 643              	.L32:
 384:App/Common/Minimal/GenQTest.c **** 		}
 385:App/Common/Minimal/GenQTest.c **** 
 386:App/Common/Minimal/GenQTest.c **** 		#if configUSE_PREEMPTION == 0
 387:App/Common/Minimal/GenQTest.c **** 			taskYIELD();
 388:App/Common/Minimal/GenQTest.c **** 		#endif
 389:App/Common/Minimal/GenQTest.c **** 
 390:App/Common/Minimal/GenQTest.c **** 		/* Check the data we read out is in the expected order. */
 391:App/Common/Minimal/GenQTest.c **** 		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
 644              		.loc 1 391 0
 645 03e0 4FF00703 		mov	r3, #7
 646 03e4 3B61     		str	r3, [r7, #16]
 647 03e6 22E0     		b	.L33
 648              	.L36:
 392:App/Common/Minimal/GenQTest.c **** 		{
 393:App/Common/Minimal/GenQTest.c **** 			if( xQueueReceive( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
 649              		.loc 1 393 0
 650 03e8 07F10C03 		add	r3, r7, #12
 651 03ec 7869     		ldr	r0, [r7, #20]
 652 03ee 1946     		mov	r1, r3
 653 03f0 4FF00002 		mov	r2, #0
 654 03f4 4FF00003 		mov	r3, #0
 655 03f8 FFF7FEFF 		bl	xQueueGenericReceive
 656 03fc 0346     		mov	r3, r0
 657 03fe 012B     		cmp	r3, #1
 658 0400 06D0     		beq	.L34
 394:App/Common/Minimal/GenQTest.c **** 			{
 395:App/Common/Minimal/GenQTest.c **** 				xErrorDetected = pdTRUE;
 659              		.loc 1 395 0
 660 0402 40F20003 		movw	r3, #:lower16:xErrorDetected
 661 0406 C0F20003 		movt	r3, #:upper16:xErrorDetected
 662 040a 4FF00102 		mov	r2, #1
 663 040e 1A60     		str	r2, [r3, #0]
 664              	.L34:
 396:App/Common/Minimal/GenQTest.c **** 			}
 397:App/Common/Minimal/GenQTest.c **** 
 398:App/Common/Minimal/GenQTest.c **** 			if( ulData != ulData2 )
 665              		.loc 1 398 0
 666 0410 3A69     		ldr	r2, [r7, #16]
 667 0412 FB68     		ldr	r3, [r7, #12]
 668 0414 9A42     		cmp	r2, r3
 669 0416 06D0     		beq	.L35
 399:App/Common/Minimal/GenQTest.c **** 			{
 400:App/Common/Minimal/GenQTest.c **** 				xErrorDetected = pdTRUE;
 670              		.loc 1 400 0
 671 0418 40F20003 		movw	r3, #:lower16:xErrorDetected
 672 041c C0F20003 		movt	r3, #:upper16:xErrorDetected
 673 0420 4FF00102 		mov	r2, #1
 674 0424 1A60     		str	r2, [r3, #0]
 675              	.L35:
 391:App/Common/Minimal/GenQTest.c **** 		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
 676              		.loc 1 391 0
 677 0426 3B69     		ldr	r3, [r7, #16]
 678 0428 03F10103 		add	r3, r3, #1
 679 042c 3B61     		str	r3, [r7, #16]
 680              	.L33:
 391:App/Common/Minimal/GenQTest.c **** 		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
 681              		.loc 1 391 0 is_stmt 0 discriminator 1
 682 042e 3B69     		ldr	r3, [r7, #16]
 683 0430 0B2B     		cmp	r3, #11
 684 0432 D9D9     		bls	.L36
 401:App/Common/Minimal/GenQTest.c **** 			}
 402:App/Common/Minimal/GenQTest.c **** 		}
 403:App/Common/Minimal/GenQTest.c **** 
 404:App/Common/Minimal/GenQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 685              		.loc 1 404 0 is_stmt 1
 686 0434 7869     		ldr	r0, [r7, #20]
 687 0436 FFF7FEFF 		bl	uxQueueMessagesWaiting
 688 043a 0346     		mov	r3, r0
 689 043c 002B     		cmp	r3, #0
 690 043e 06D0     		beq	.L37
 405:App/Common/Minimal/GenQTest.c **** 		{
 406:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 691              		.loc 1 406 0
 692 0440 40F20003 		movw	r3, #:lower16:xErrorDetected
 693 0444 C0F20003 		movt	r3, #:upper16:xErrorDetected
 694 0448 4FF00102 		mov	r2, #1
 695 044c 1A60     		str	r2, [r3, #0]
 696              	.L37:
 407:App/Common/Minimal/GenQTest.c **** 		}
 408:App/Common/Minimal/GenQTest.c **** 
 409:App/Common/Minimal/GenQTest.c **** 		ulLoopCounter++;
 697              		.loc 1 409 0
 698 044e 40F20003 		movw	r3, #:lower16:ulLoopCounter
 699 0452 C0F20003 		movt	r3, #:upper16:ulLoopCounter
 700 0456 1B68     		ldr	r3, [r3, #0]
 701 0458 03F10102 		add	r2, r3, #1
 702 045c 40F20003 		movw	r3, #:lower16:ulLoopCounter
 703 0460 C0F20003 		movt	r3, #:upper16:ulLoopCounter
 704 0464 1A60     		str	r2, [r3, #0]
 410:App/Common/Minimal/GenQTest.c **** 	}
 705              		.loc 1 410 0
 706 0466 D1E5     		b	.L38
 707              		.cfi_endproc
 708              	.LFE111:
 710              		.section	.text.prvLowPriorityMutexTask,"ax",%progbits
 711              		.align	2
 712              		.thumb
 713              		.thumb_func
 715              	prvLowPriorityMutexTask:
 716              	.LFB112:
 411:App/Common/Minimal/GenQTest.c **** }
 412:App/Common/Minimal/GenQTest.c **** /*-----------------------------------------------------------*/
 413:App/Common/Minimal/GenQTest.c **** 
 414:App/Common/Minimal/GenQTest.c **** static void prvLowPriorityMutexTask( void *pvParameters )
 415:App/Common/Minimal/GenQTest.c **** {
 717              		.loc 1 415 0
 718              		.cfi_startproc
 719              		@ args = 0, pretend = 0, frame = 16
 720              		@ frame_needed = 1, uses_anonymous_args = 0
 721 0000 80B5     		push	{r7, lr}
 722              	.LCFI6:
 723              		.cfi_def_cfa_offset 8
 724              		.cfi_offset 7, -8
 725              		.cfi_offset 14, -4
 726 0002 84B0     		sub	sp, sp, #16
 727              	.LCFI7:
 728              		.cfi_def_cfa_offset 24
 729 0004 00AF     		add	r7, sp, #0
 730              	.LCFI8:
 731              		.cfi_def_cfa_register 7
 732 0006 7860     		str	r0, [r7, #4]
 416:App/Common/Minimal/GenQTest.c **** xSemaphoreHandle xMutex = ( xSemaphoreHandle ) pvParameters;
 733              		.loc 1 416 0
 734 0008 7B68     		ldr	r3, [r7, #4]
 735 000a FB60     		str	r3, [r7, #12]
 736              	.L48:
 417:App/Common/Minimal/GenQTest.c **** 
 418:App/Common/Minimal/GenQTest.c **** 	#ifdef USE_STDIO
 419:App/Common/Minimal/GenQTest.c **** 	void vPrintDisplayMessage( const portCHAR * const * ppcMessageToSend );
 420:App/Common/Minimal/GenQTest.c **** 	
 421:App/Common/Minimal/GenQTest.c **** 		const portCHAR * const pcTaskStartMsg = "Mutex with priority inheritance test started.\r\n";
 422:App/Common/Minimal/GenQTest.c **** 
 423:App/Common/Minimal/GenQTest.c **** 		/* Queue a message for printing to say the task has started. */
 424:App/Common/Minimal/GenQTest.c **** 		vPrintDisplayMessage( &pcTaskStartMsg );
 425:App/Common/Minimal/GenQTest.c **** 	#endif
 426:App/Common/Minimal/GenQTest.c **** 
 427:App/Common/Minimal/GenQTest.c **** 	for( ;; )
 428:App/Common/Minimal/GenQTest.c **** 	{
 429:App/Common/Minimal/GenQTest.c **** 		/* Take the mutex.  It should be available now. */
 430:App/Common/Minimal/GenQTest.c **** 		if( xSemaphoreTake( xMutex, genqNO_BLOCK ) != pdPASS )
 737              		.loc 1 430 0
 738 000c F868     		ldr	r0, [r7, #12]
 739 000e 4FF00001 		mov	r1, #0
 740 0012 4FF00002 		mov	r2, #0
 741 0016 4FF00003 		mov	r3, #0
 742 001a FFF7FEFF 		bl	xQueueGenericReceive
 743 001e 0346     		mov	r3, r0
 744 0020 012B     		cmp	r3, #1
 745 0022 06D0     		beq	.L40
 431:App/Common/Minimal/GenQTest.c **** 		{
 432:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 746              		.loc 1 432 0
 747 0024 40F20003 		movw	r3, #:lower16:xErrorDetected
 748 0028 C0F20003 		movt	r3, #:upper16:xErrorDetected
 749 002c 4FF00102 		mov	r2, #1
 750 0030 1A60     		str	r2, [r3, #0]
 751              	.L40:
 433:App/Common/Minimal/GenQTest.c **** 		}
 434:App/Common/Minimal/GenQTest.c **** 
 435:App/Common/Minimal/GenQTest.c **** 		/* Set our guarded variable to a known start value. */
 436:App/Common/Minimal/GenQTest.c **** 		ulGuardedVariable = 0;
 752              		.loc 1 436 0
 753 0032 40F20003 		movw	r3, #:lower16:ulGuardedVariable
 754 0036 C0F20003 		movt	r3, #:upper16:ulGuardedVariable
 755 003a 4FF00002 		mov	r2, #0
 756 003e 1A60     		str	r2, [r3, #0]
 437:App/Common/Minimal/GenQTest.c **** 
 438:App/Common/Minimal/GenQTest.c **** 		/* Our priority should be as per that assigned when the task was
 439:App/Common/Minimal/GenQTest.c **** 		created. */
 440:App/Common/Minimal/GenQTest.c **** 		if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
 757              		.loc 1 440 0
 758 0040 4FF00000 		mov	r0, #0
 759 0044 FFF7FEFF 		bl	uxTaskPriorityGet
 760 0048 0346     		mov	r3, r0
 761 004a 002B     		cmp	r3, #0
 762 004c 06D0     		beq	.L41
 441:App/Common/Minimal/GenQTest.c **** 		{
 442:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 763              		.loc 1 442 0
 764 004e 40F20003 		movw	r3, #:lower16:xErrorDetected
 765 0052 C0F20003 		movt	r3, #:upper16:xErrorDetected
 766 0056 4FF00102 		mov	r2, #1
 767 005a 1A60     		str	r2, [r3, #0]
 768              	.L41:
 443:App/Common/Minimal/GenQTest.c **** 		}
 444:App/Common/Minimal/GenQTest.c **** 
 445:App/Common/Minimal/GenQTest.c **** 		/* Now unsuspend the high priority task.  This will attempt to take the
 446:App/Common/Minimal/GenQTest.c **** 		mutex, and block when it finds it cannot obtain it. */
 447:App/Common/Minimal/GenQTest.c **** 		vTaskResume( xHighPriorityMutexTask );
 769              		.loc 1 447 0
 770 005c 40F20003 		movw	r3, #:lower16:xHighPriorityMutexTask
 771 0060 C0F20003 		movt	r3, #:upper16:xHighPriorityMutexTask
 772 0064 1B68     		ldr	r3, [r3, #0]
 773 0066 1846     		mov	r0, r3
 774 0068 FFF7FEFF 		bl	vTaskResume
 448:App/Common/Minimal/GenQTest.c **** 
 449:App/Common/Minimal/GenQTest.c **** 		/* We should now have inherited the prioritoy of the high priority task,
 450:App/Common/Minimal/GenQTest.c **** 		as by now it will have attempted to get the mutex. */
 451:App/Common/Minimal/GenQTest.c **** 		if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 775              		.loc 1 451 0
 776 006c 4FF00000 		mov	r0, #0
 777 0070 FFF7FEFF 		bl	uxTaskPriorityGet
 778 0074 0346     		mov	r3, r0
 779 0076 032B     		cmp	r3, #3
 780 0078 06D0     		beq	.L42
 452:App/Common/Minimal/GenQTest.c **** 		{
 453:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 781              		.loc 1 453 0
 782 007a 40F20003 		movw	r3, #:lower16:xErrorDetected
 783 007e C0F20003 		movt	r3, #:upper16:xErrorDetected
 784 0082 4FF00102 		mov	r2, #1
 785 0086 1A60     		str	r2, [r3, #0]
 786              	.L42:
 454:App/Common/Minimal/GenQTest.c **** 		}
 455:App/Common/Minimal/GenQTest.c **** 
 456:App/Common/Minimal/GenQTest.c **** 		/* We can attempt to set our priority to the test priority - between the
 457:App/Common/Minimal/GenQTest.c **** 		idle priority and the medium/high test priorities, but our actual
 458:App/Common/Minimal/GenQTest.c **** 		prioroity should remain at the high priority. */
 459:App/Common/Minimal/GenQTest.c **** 		vTaskPrioritySet( NULL, genqMUTEX_TEST_PRIORITY );
 787              		.loc 1 459 0
 788 0088 4FF00000 		mov	r0, #0
 789 008c 4FF00101 		mov	r1, #1
 790 0090 FFF7FEFF 		bl	vTaskPrioritySet
 460:App/Common/Minimal/GenQTest.c **** 		if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 791              		.loc 1 460 0
 792 0094 4FF00000 		mov	r0, #0
 793 0098 FFF7FEFF 		bl	uxTaskPriorityGet
 794 009c 0346     		mov	r3, r0
 795 009e 032B     		cmp	r3, #3
 796 00a0 06D0     		beq	.L43
 461:App/Common/Minimal/GenQTest.c **** 		{
 462:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 797              		.loc 1 462 0
 798 00a2 40F20003 		movw	r3, #:lower16:xErrorDetected
 799 00a6 C0F20003 		movt	r3, #:upper16:xErrorDetected
 800 00aa 4FF00102 		mov	r2, #1
 801 00ae 1A60     		str	r2, [r3, #0]
 802              	.L43:
 463:App/Common/Minimal/GenQTest.c **** 		}
 464:App/Common/Minimal/GenQTest.c **** 
 465:App/Common/Minimal/GenQTest.c **** 		/* Now unsuspend the medium priority task.  This should not run as our
 466:App/Common/Minimal/GenQTest.c **** 		inherited priority is above that of the medium priority task. */
 467:App/Common/Minimal/GenQTest.c **** 		vTaskResume( xMediumPriorityMutexTask );
 803              		.loc 1 467 0
 804 00b0 40F20003 		movw	r3, #:lower16:xMediumPriorityMutexTask
 805 00b4 C0F20003 		movt	r3, #:upper16:xMediumPriorityMutexTask
 806 00b8 1B68     		ldr	r3, [r3, #0]
 807 00ba 1846     		mov	r0, r3
 808 00bc FFF7FEFF 		bl	vTaskResume
 468:App/Common/Minimal/GenQTest.c **** 
 469:App/Common/Minimal/GenQTest.c **** 		/* If the did run then it will have incremented our guarded variable. */
 470:App/Common/Minimal/GenQTest.c **** 		if( ulGuardedVariable != 0 )
 809              		.loc 1 470 0
 810 00c0 40F20003 		movw	r3, #:lower16:ulGuardedVariable
 811 00c4 C0F20003 		movt	r3, #:upper16:ulGuardedVariable
 812 00c8 1B68     		ldr	r3, [r3, #0]
 813 00ca 002B     		cmp	r3, #0
 814 00cc 06D0     		beq	.L44
 471:App/Common/Minimal/GenQTest.c **** 		{
 472:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 815              		.loc 1 472 0
 816 00ce 40F20003 		movw	r3, #:lower16:xErrorDetected
 817 00d2 C0F20003 		movt	r3, #:upper16:xErrorDetected
 818 00d6 4FF00102 		mov	r2, #1
 819 00da 1A60     		str	r2, [r3, #0]
 820              	.L44:
 473:App/Common/Minimal/GenQTest.c **** 		}
 474:App/Common/Minimal/GenQTest.c **** 
 475:App/Common/Minimal/GenQTest.c **** 		/* When we give back the semaphore our priority should be disinherited
 476:App/Common/Minimal/GenQTest.c **** 		back to the priority to which we attempted to set ourselves.  This means
 477:App/Common/Minimal/GenQTest.c **** 		that when the high priority task next blocks, the medium priority task
 478:App/Common/Minimal/GenQTest.c **** 		should execute and increment the guarded variable.   When we next run
 479:App/Common/Minimal/GenQTest.c **** 		both the high and medium priority tasks will have been suspended again. */
 480:App/Common/Minimal/GenQTest.c **** 		if( xSemaphoreGive( xMutex ) != pdPASS )
 821              		.loc 1 480 0
 822 00dc F868     		ldr	r0, [r7, #12]
 823 00de 4FF00001 		mov	r1, #0
 824 00e2 4FF00002 		mov	r2, #0
 825 00e6 4FF00003 		mov	r3, #0
 826 00ea FFF7FEFF 		bl	xQueueGenericSend
 827 00ee 0346     		mov	r3, r0
 828 00f0 012B     		cmp	r3, #1
 829 00f2 06D0     		beq	.L45
 481:App/Common/Minimal/GenQTest.c **** 		{
 482:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 830              		.loc 1 482 0
 831 00f4 40F20003 		movw	r3, #:lower16:xErrorDetected
 832 00f8 C0F20003 		movt	r3, #:upper16:xErrorDetected
 833 00fc 4FF00102 		mov	r2, #1
 834 0100 1A60     		str	r2, [r3, #0]
 835              	.L45:
 483:App/Common/Minimal/GenQTest.c **** 		}
 484:App/Common/Minimal/GenQTest.c **** 
 485:App/Common/Minimal/GenQTest.c **** 		/* Check that the guarded variable did indeed increment... */
 486:App/Common/Minimal/GenQTest.c **** 		if( ulGuardedVariable != 1 )
 836              		.loc 1 486 0
 837 0102 40F20003 		movw	r3, #:lower16:ulGuardedVariable
 838 0106 C0F20003 		movt	r3, #:upper16:ulGuardedVariable
 839 010a 1B68     		ldr	r3, [r3, #0]
 840 010c 012B     		cmp	r3, #1
 841 010e 06D0     		beq	.L46
 487:App/Common/Minimal/GenQTest.c **** 		{
 488:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 842              		.loc 1 488 0
 843 0110 40F20003 		movw	r3, #:lower16:xErrorDetected
 844 0114 C0F20003 		movt	r3, #:upper16:xErrorDetected
 845 0118 4FF00102 		mov	r2, #1
 846 011c 1A60     		str	r2, [r3, #0]
 847              	.L46:
 489:App/Common/Minimal/GenQTest.c **** 		}
 490:App/Common/Minimal/GenQTest.c **** 
 491:App/Common/Minimal/GenQTest.c **** 		/* ... and that our priority has been disinherited to
 492:App/Common/Minimal/GenQTest.c **** 		genqMUTEX_TEST_PRIORITY. */
 493:App/Common/Minimal/GenQTest.c **** 		if( uxTaskPriorityGet( NULL ) != genqMUTEX_TEST_PRIORITY )
 848              		.loc 1 493 0
 849 011e 4FF00000 		mov	r0, #0
 850 0122 FFF7FEFF 		bl	uxTaskPriorityGet
 851 0126 0346     		mov	r3, r0
 852 0128 012B     		cmp	r3, #1
 853 012a 06D0     		beq	.L47
 494:App/Common/Minimal/GenQTest.c **** 		{
 495:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 854              		.loc 1 495 0
 855 012c 40F20003 		movw	r3, #:lower16:xErrorDetected
 856 0130 C0F20003 		movt	r3, #:upper16:xErrorDetected
 857 0134 4FF00102 		mov	r2, #1
 858 0138 1A60     		str	r2, [r3, #0]
 859              	.L47:
 496:App/Common/Minimal/GenQTest.c **** 		}
 497:App/Common/Minimal/GenQTest.c **** 
 498:App/Common/Minimal/GenQTest.c **** 		/* Set our priority back to our original priority ready for the next
 499:App/Common/Minimal/GenQTest.c **** 		loop around this test. */
 500:App/Common/Minimal/GenQTest.c **** 		vTaskPrioritySet( NULL, genqMUTEX_LOW_PRIORITY );
 860              		.loc 1 500 0
 861 013a 4FF00000 		mov	r0, #0
 862 013e 4FF00001 		mov	r1, #0
 863 0142 FFF7FEFF 		bl	vTaskPrioritySet
 501:App/Common/Minimal/GenQTest.c **** 
 502:App/Common/Minimal/GenQTest.c **** 		/* Just to show we are still running. */
 503:App/Common/Minimal/GenQTest.c **** 		ulLoopCounter2++;
 864              		.loc 1 503 0
 865 0146 40F20003 		movw	r3, #:lower16:ulLoopCounter2
 866 014a C0F20003 		movt	r3, #:upper16:ulLoopCounter2
 867 014e 1B68     		ldr	r3, [r3, #0]
 868 0150 03F10102 		add	r2, r3, #1
 869 0154 40F20003 		movw	r3, #:lower16:ulLoopCounter2
 870 0158 C0F20003 		movt	r3, #:upper16:ulLoopCounter2
 871 015c 1A60     		str	r2, [r3, #0]
 504:App/Common/Minimal/GenQTest.c **** 
 505:App/Common/Minimal/GenQTest.c **** 		#if configUSE_PREEMPTION == 0
 506:App/Common/Minimal/GenQTest.c **** 			taskYIELD();
 507:App/Common/Minimal/GenQTest.c **** 		#endif		
 508:App/Common/Minimal/GenQTest.c **** 	}
 872              		.loc 1 508 0
 873 015e 55E7     		b	.L48
 874              		.cfi_endproc
 875              	.LFE112:
 877              		.section	.text.prvMediumPriorityMutexTask,"ax",%progbits
 878              		.align	2
 879              		.thumb
 880              		.thumb_func
 882              	prvMediumPriorityMutexTask:
 883              	.LFB113:
 509:App/Common/Minimal/GenQTest.c **** }
 510:App/Common/Minimal/GenQTest.c **** /*-----------------------------------------------------------*/
 511:App/Common/Minimal/GenQTest.c **** 
 512:App/Common/Minimal/GenQTest.c **** static void prvMediumPriorityMutexTask( void *pvParameters )
 513:App/Common/Minimal/GenQTest.c **** {
 884              		.loc 1 513 0
 885              		.cfi_startproc
 886              		@ args = 0, pretend = 0, frame = 8
 887              		@ frame_needed = 1, uses_anonymous_args = 0
 888 0000 80B5     		push	{r7, lr}
 889              	.LCFI9:
 890              		.cfi_def_cfa_offset 8
 891              		.cfi_offset 7, -8
 892              		.cfi_offset 14, -4
 893 0002 82B0     		sub	sp, sp, #8
 894              	.LCFI10:
 895              		.cfi_def_cfa_offset 16
 896 0004 00AF     		add	r7, sp, #0
 897              	.LCFI11:
 898              		.cfi_def_cfa_register 7
 899 0006 7860     		str	r0, [r7, #4]
 900              	.L50:
 514:App/Common/Minimal/GenQTest.c **** 	( void ) pvParameters;
 515:App/Common/Minimal/GenQTest.c **** 
 516:App/Common/Minimal/GenQTest.c **** 	for( ;; )
 517:App/Common/Minimal/GenQTest.c **** 	{
 518:App/Common/Minimal/GenQTest.c **** 		/* The medium priority task starts by suspending itself.  The low
 519:App/Common/Minimal/GenQTest.c **** 		priority task will unsuspend this task when required. */
 520:App/Common/Minimal/GenQTest.c **** 		vTaskSuspend( NULL );
 901              		.loc 1 520 0 discriminator 1
 902 0008 4FF00000 		mov	r0, #0
 903 000c FFF7FEFF 		bl	vTaskSuspend
 521:App/Common/Minimal/GenQTest.c **** 
 522:App/Common/Minimal/GenQTest.c **** 		/* When this task unsuspends all it does is increment the guarded
 523:App/Common/Minimal/GenQTest.c **** 		variable, this is so the low priority task knows that it has
 524:App/Common/Minimal/GenQTest.c **** 		executed. */
 525:App/Common/Minimal/GenQTest.c **** 		ulGuardedVariable++;
 904              		.loc 1 525 0 discriminator 1
 905 0010 40F20003 		movw	r3, #:lower16:ulGuardedVariable
 906 0014 C0F20003 		movt	r3, #:upper16:ulGuardedVariable
 907 0018 1B68     		ldr	r3, [r3, #0]
 908 001a 03F10102 		add	r2, r3, #1
 909 001e 40F20003 		movw	r3, #:lower16:ulGuardedVariable
 910 0022 C0F20003 		movt	r3, #:upper16:ulGuardedVariable
 911 0026 1A60     		str	r2, [r3, #0]
 526:App/Common/Minimal/GenQTest.c **** 	}
 912              		.loc 1 526 0 discriminator 1
 913 0028 EEE7     		b	.L50
 914              		.cfi_endproc
 915              	.LFE113:
 917 002a 00BF     		.section	.text.prvHighPriorityMutexTask,"ax",%progbits
 918              		.align	2
 919              		.thumb
 920              		.thumb_func
 922              	prvHighPriorityMutexTask:
 923              	.LFB114:
 527:App/Common/Minimal/GenQTest.c **** }
 528:App/Common/Minimal/GenQTest.c **** /*-----------------------------------------------------------*/
 529:App/Common/Minimal/GenQTest.c **** 
 530:App/Common/Minimal/GenQTest.c **** static void prvHighPriorityMutexTask( void *pvParameters )
 531:App/Common/Minimal/GenQTest.c **** {
 924              		.loc 1 531 0
 925              		.cfi_startproc
 926              		@ args = 0, pretend = 0, frame = 16
 927              		@ frame_needed = 1, uses_anonymous_args = 0
 928 0000 80B5     		push	{r7, lr}
 929              	.LCFI12:
 930              		.cfi_def_cfa_offset 8
 931              		.cfi_offset 7, -8
 932              		.cfi_offset 14, -4
 933 0002 84B0     		sub	sp, sp, #16
 934              	.LCFI13:
 935              		.cfi_def_cfa_offset 24
 936 0004 00AF     		add	r7, sp, #0
 937              	.LCFI14:
 938              		.cfi_def_cfa_register 7
 939 0006 7860     		str	r0, [r7, #4]
 532:App/Common/Minimal/GenQTest.c **** xSemaphoreHandle xMutex = ( xSemaphoreHandle ) pvParameters;
 940              		.loc 1 532 0
 941 0008 7B68     		ldr	r3, [r7, #4]
 942 000a FB60     		str	r3, [r7, #12]
 943 000c 00E0     		b	.L54
 944              	.L55:
 533:App/Common/Minimal/GenQTest.c **** 
 534:App/Common/Minimal/GenQTest.c **** 	for( ;; )
 535:App/Common/Minimal/GenQTest.c **** 	{
 536:App/Common/Minimal/GenQTest.c **** 		/* The high priority task starts by suspending itself.  The low
 537:App/Common/Minimal/GenQTest.c **** 		priority task will unsuspend this task when required. */
 538:App/Common/Minimal/GenQTest.c **** 		vTaskSuspend( NULL );
 539:App/Common/Minimal/GenQTest.c **** 
 540:App/Common/Minimal/GenQTest.c **** 		/* When this task unsuspends all it does is attempt to obtain
 541:App/Common/Minimal/GenQTest.c **** 		the mutex.  It should find the mutex is not available so a
 542:App/Common/Minimal/GenQTest.c **** 		block time is specified. */
 543:App/Common/Minimal/GenQTest.c **** 		if( xSemaphoreTake( xMutex, portMAX_DELAY ) != pdPASS )
 544:App/Common/Minimal/GenQTest.c **** 		{
 545:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 546:App/Common/Minimal/GenQTest.c **** 		}
 547:App/Common/Minimal/GenQTest.c **** 
 548:App/Common/Minimal/GenQTest.c **** 		/* When we eventually obtain the mutex we just give it back then
 549:App/Common/Minimal/GenQTest.c **** 		return to suspend ready for the next test. */
 550:App/Common/Minimal/GenQTest.c **** 		if( xSemaphoreGive( xMutex ) != pdPASS )
 551:App/Common/Minimal/GenQTest.c **** 		{
 552:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 553:App/Common/Minimal/GenQTest.c **** 		}		
 554:App/Common/Minimal/GenQTest.c **** 	}
 945              		.loc 1 554 0
 946 000e 00BF     		nop
 947              	.L54:
 538:App/Common/Minimal/GenQTest.c **** 		vTaskSuspend( NULL );
 948              		.loc 1 538 0
 949 0010 4FF00000 		mov	r0, #0
 950 0014 FFF7FEFF 		bl	vTaskSuspend
 543:App/Common/Minimal/GenQTest.c **** 		if( xSemaphoreTake( xMutex, portMAX_DELAY ) != pdPASS )
 951              		.loc 1 543 0
 952 0018 F868     		ldr	r0, [r7, #12]
 953 001a 4FF00001 		mov	r1, #0
 954 001e 4FF0FF32 		mov	r2, #-1
 955 0022 4FF00003 		mov	r3, #0
 956 0026 FFF7FEFF 		bl	xQueueGenericReceive
 957 002a 0346     		mov	r3, r0
 958 002c 012B     		cmp	r3, #1
 959 002e 06D0     		beq	.L52
 545:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 960              		.loc 1 545 0
 961 0030 40F20003 		movw	r3, #:lower16:xErrorDetected
 962 0034 C0F20003 		movt	r3, #:upper16:xErrorDetected
 963 0038 4FF00102 		mov	r2, #1
 964 003c 1A60     		str	r2, [r3, #0]
 965              	.L52:
 550:App/Common/Minimal/GenQTest.c **** 		if( xSemaphoreGive( xMutex ) != pdPASS )
 966              		.loc 1 550 0
 967 003e F868     		ldr	r0, [r7, #12]
 968 0040 4FF00001 		mov	r1, #0
 969 0044 4FF00002 		mov	r2, #0
 970 0048 4FF00003 		mov	r3, #0
 971 004c FFF7FEFF 		bl	xQueueGenericSend
 972 0050 0346     		mov	r3, r0
 973 0052 012B     		cmp	r3, #1
 974 0054 DBD0     		beq	.L55
 552:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 975              		.loc 1 552 0
 976 0056 40F20003 		movw	r3, #:lower16:xErrorDetected
 977 005a C0F20003 		movt	r3, #:upper16:xErrorDetected
 978 005e 4FF00102 		mov	r2, #1
 979 0062 1A60     		str	r2, [r3, #0]
 980              		.loc 1 554 0
 981 0064 D3E7     		b	.L55
 982              		.cfi_endproc
 983              	.LFE114:
 985 0066 00BF     		.section	.text.xAreGenericQueueTasksStillRunning,"ax",%progbits
 986              		.align	2
 987              		.global	xAreGenericQueueTasksStillRunning
 988              		.thumb
 989              		.thumb_func
 991              	xAreGenericQueueTasksStillRunning:
 992              	.LFB115:
 555:App/Common/Minimal/GenQTest.c **** }
 556:App/Common/Minimal/GenQTest.c **** /*-----------------------------------------------------------*/
 557:App/Common/Minimal/GenQTest.c **** 
 558:App/Common/Minimal/GenQTest.c **** /* This is called to check that all the created tasks are still running. */
 559:App/Common/Minimal/GenQTest.c **** portBASE_TYPE xAreGenericQueueTasksStillRunning( void )
 560:App/Common/Minimal/GenQTest.c **** {
 993              		.loc 1 560 0
 994              		.cfi_startproc
 995              		@ args = 0, pretend = 0, frame = 0
 996              		@ frame_needed = 1, uses_anonymous_args = 0
 997              		@ link register save eliminated.
 998 0000 80B4     		push	{r7}
 999              	.LCFI15:
 1000              		.cfi_def_cfa_offset 4
 1001              		.cfi_offset 7, -4
 1002 0002 00AF     		add	r7, sp, #0
 1003              	.LCFI16:
 1004              		.cfi_def_cfa_register 7
 561:App/Common/Minimal/GenQTest.c **** static unsigned portLONG ulLastLoopCounter = 0, ulLastLoopCounter2 = 0;
 562:App/Common/Minimal/GenQTest.c **** 
 563:App/Common/Minimal/GenQTest.c **** 	/* If the demo task is still running then we expect the loopcounters to
 564:App/Common/Minimal/GenQTest.c **** 	have incremented since this function was last called. */
 565:App/Common/Minimal/GenQTest.c **** 	if( ulLastLoopCounter == ulLoopCounter )
 1005              		.loc 1 565 0
 1006 0004 40F20003 		movw	r3, #:lower16:ulLastLoopCounter.8246
 1007 0008 C0F20003 		movt	r3, #:upper16:ulLastLoopCounter.8246
 1008 000c 1A68     		ldr	r2, [r3, #0]
 1009 000e 40F20003 		movw	r3, #:lower16:ulLoopCounter
 1010 0012 C0F20003 		movt	r3, #:upper16:ulLoopCounter
 1011 0016 1B68     		ldr	r3, [r3, #0]
 1012 0018 9A42     		cmp	r2, r3
 1013 001a 06D1     		bne	.L57
 566:App/Common/Minimal/GenQTest.c **** 	{
 567:App/Common/Minimal/GenQTest.c **** 		xErrorDetected = pdTRUE;
 1014              		.loc 1 567 0
 1015 001c 40F20003 		movw	r3, #:lower16:xErrorDetected
 1016 0020 C0F20003 		movt	r3, #:upper16:xErrorDetected
 1017 0024 4FF00102 		mov	r2, #1
 1018 0028 1A60     		str	r2, [r3, #0]
 1019              	.L57:
 568:App/Common/Minimal/GenQTest.c **** 	}
 569:App/Common/Minimal/GenQTest.c **** 
 570:App/Common/Minimal/GenQTest.c **** 	if( ulLastLoopCounter2 == ulLoopCounter2 )
 1020              		.loc 1 570 0
 1021 002a 40F20003 		movw	r3, #:lower16:ulLastLoopCounter2.8247
 1022 002e C0F20003 		movt	r3, #:upper16:ulLastLoopCounter2.8247
 1023 0032 1A68     		ldr	r2, [r3, #0]
 1024 0034 40F20003 		movw	r3, #:lower16:ulLoopCounter2
 1025 0038 C0F20003 		movt	r3, #:upper16:ulLoopCounter2
 1026 003c 1B68     		ldr	r3, [r3, #0]
 1027 003e 9A42     		cmp	r2, r3
 1028 0040 06D1     		bne	.L58
 571:App/Common/Minimal/GenQTest.c **** 	{
 572:App/Common/Minimal/GenQTest.c **** 		xErrorDetected = pdTRUE;
 1029              		.loc 1 572 0
 1030 0042 40F20003 		movw	r3, #:lower16:xErrorDetected
 1031 0046 C0F20003 		movt	r3, #:upper16:xErrorDetected
 1032 004a 4FF00102 		mov	r2, #1
 1033 004e 1A60     		str	r2, [r3, #0]
 1034              	.L58:
 573:App/Common/Minimal/GenQTest.c **** 	}
 574:App/Common/Minimal/GenQTest.c **** 
 575:App/Common/Minimal/GenQTest.c **** 	ulLastLoopCounter = ulLoopCounter;
 1035              		.loc 1 575 0
 1036 0050 40F20003 		movw	r3, #:lower16:ulLoopCounter
 1037 0054 C0F20003 		movt	r3, #:upper16:ulLoopCounter
 1038 0058 1A68     		ldr	r2, [r3, #0]
 1039 005a 40F20003 		movw	r3, #:lower16:ulLastLoopCounter.8246
 1040 005e C0F20003 		movt	r3, #:upper16:ulLastLoopCounter.8246
 1041 0062 1A60     		str	r2, [r3, #0]
 576:App/Common/Minimal/GenQTest.c **** 	ulLastLoopCounter2 = ulLoopCounter2;	
 1042              		.loc 1 576 0
 1043 0064 40F20003 		movw	r3, #:lower16:ulLoopCounter2
 1044 0068 C0F20003 		movt	r3, #:upper16:ulLoopCounter2
 1045 006c 1A68     		ldr	r2, [r3, #0]
 1046 006e 40F20003 		movw	r3, #:lower16:ulLastLoopCounter2.8247
 1047 0072 C0F20003 		movt	r3, #:upper16:ulLastLoopCounter2.8247
 1048 0076 1A60     		str	r2, [r3, #0]
 577:App/Common/Minimal/GenQTest.c **** 
 578:App/Common/Minimal/GenQTest.c **** 	/* Errors detected in the task itself will have latched xErrorDetected
 579:App/Common/Minimal/GenQTest.c **** 	to true. */
 580:App/Common/Minimal/GenQTest.c **** 
 581:App/Common/Minimal/GenQTest.c **** 	return ( portBASE_TYPE ) !xErrorDetected;
 1049              		.loc 1 581 0
 1050 0078 40F20003 		movw	r3, #:lower16:xErrorDetected
 1051 007c C0F20003 		movt	r3, #:upper16:xErrorDetected
 1052 0080 1B68     		ldr	r3, [r3, #0]
 1053 0082 002B     		cmp	r3, #0
 1054 0084 14BF     		ite	ne
 1055 0086 0023     		movne	r3, #0
 1056 0088 0123     		moveq	r3, #1
 1057 008a DBB2     		uxtb	r3, r3
 582:App/Common/Minimal/GenQTest.c **** }
 1058              		.loc 1 582 0
 1059 008c 1846     		mov	r0, r3
 1060 008e BD46     		mov	sp, r7
 1061 0090 80BC     		pop	{r7}
 1062 0092 7047     		bx	lr
 1063              		.cfi_endproc
 1064              	.LFE115:
 1066              		.section	.bss.ulLastLoopCounter.8246,"aw",%nobits
 1067              		.align	2
 1070              	ulLastLoopCounter.8246:
 1071 0000 00000000 		.space	4
 1072              		.section	.bss.ulLastLoopCounter2.8247,"aw",%nobits
 1073              		.align	2
 1076              	ulLastLoopCounter2.8247:
 1077 0000 00000000 		.space	4
 1078              		.text
 1079              	.Letext0:
 1080              		.file 2 "/home/thanhtruong/embedded-development/toolchain/gcc-arm-none-eabi-4_7-2013q1/bin/../lib/
 1081              		.file 3 "Source/portable/GCC/ARM_CM4F/portmacro.h"
 1082              		.file 4 "Source/include/task.h"
 1083              		.file 5 "Source/include/queue.h"
 1084              		.file 6 "Source/include/semphr.h"
 1085              		.file 7 "App/STM32F4-Discovery/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 GenQTest.c
     /tmp/ccfLRrvU.s:20     .bss.xErrorDetected:00000000 $d
     /tmp/ccfLRrvU.s:23     .bss.xErrorDetected:00000000 xErrorDetected
     /tmp/ccfLRrvU.s:26     .bss.ulLoopCounter:00000000 $d
     /tmp/ccfLRrvU.s:29     .bss.ulLoopCounter:00000000 ulLoopCounter
     /tmp/ccfLRrvU.s:32     .bss.ulLoopCounter2:00000000 $d
     /tmp/ccfLRrvU.s:35     .bss.ulLoopCounter2:00000000 ulLoopCounter2
     /tmp/ccfLRrvU.s:38     .bss.ulGuardedVariable:00000000 $d
     /tmp/ccfLRrvU.s:41     .bss.ulGuardedVariable:00000000 ulGuardedVariable
     /tmp/ccfLRrvU.s:44     .bss.xHighPriorityMutexTask:00000000 $d
     /tmp/ccfLRrvU.s:47     .bss.xHighPriorityMutexTask:00000000 xHighPriorityMutexTask
     /tmp/ccfLRrvU.s:50     .bss.xMediumPriorityMutexTask:00000000 $d
     /tmp/ccfLRrvU.s:53     .bss.xMediumPriorityMutexTask:00000000 xMediumPriorityMutexTask
     /tmp/ccfLRrvU.s:56     .rodata:00000000 $d
     /tmp/ccfLRrvU.s:57     .rodata:00000000 .LC0
     /tmp/ccfLRrvU.s:60     .rodata:00000010 .LC1
     /tmp/ccfLRrvU.s:63     .rodata:00000018 .LC2
     /tmp/ccfLRrvU.s:66     .rodata:00000028 .LC3
     /tmp/ccfLRrvU.s:69     .rodata:00000030 .LC4
     /tmp/ccfLRrvU.s:72     .rodata:00000038 .LC5
     /tmp/ccfLRrvU.s:75     .text.vStartGenericQueueTasks:00000000 $t
     /tmp/ccfLRrvU.s:80     .text.vStartGenericQueueTasks:00000000 vStartGenericQueueTasks
     /tmp/ccfLRrvU.s:197    .text.prvSendFrontAndBackTest:00000000 prvSendFrontAndBackTest
     /tmp/ccfLRrvU.s:715    .text.prvLowPriorityMutexTask:00000000 prvLowPriorityMutexTask
     /tmp/ccfLRrvU.s:882    .text.prvMediumPriorityMutexTask:00000000 prvMediumPriorityMutexTask
     /tmp/ccfLRrvU.s:922    .text.prvHighPriorityMutexTask:00000000 prvHighPriorityMutexTask
     /tmp/ccfLRrvU.s:193    .text.prvSendFrontAndBackTest:00000000 $t
     /tmp/ccfLRrvU.s:711    .text.prvLowPriorityMutexTask:00000000 $t
     /tmp/ccfLRrvU.s:878    .text.prvMediumPriorityMutexTask:00000000 $t
     /tmp/ccfLRrvU.s:918    .text.prvHighPriorityMutexTask:00000000 $t
     /tmp/ccfLRrvU.s:986    .text.xAreGenericQueueTasksStillRunning:00000000 $t
     /tmp/ccfLRrvU.s:991    .text.xAreGenericQueueTasksStillRunning:00000000 xAreGenericQueueTasksStillRunning
     /tmp/ccfLRrvU.s:1070   .bss.ulLastLoopCounter.8246:00000000 ulLastLoopCounter.8246
     /tmp/ccfLRrvU.s:1076   .bss.ulLastLoopCounter2.8247:00000000 ulLastLoopCounter2.8247
     /tmp/ccfLRrvU.s:1067   .bss.ulLastLoopCounter.8246:00000000 $d
     /tmp/ccfLRrvU.s:1073   .bss.ulLastLoopCounter2.8247:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
xQueueGenericCreate
vQueueAddToRegistry
xTaskGenericCreate
xQueueCreateMutex
xQueueGenericSend
uxQueueMessagesWaiting
xQueueGenericReceive
uxTaskPriorityGet
vTaskResume
vTaskPrioritySet
vTaskSuspend
