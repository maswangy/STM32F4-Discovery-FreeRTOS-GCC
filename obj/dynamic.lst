   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"dynamic.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.bss.xContinuousIncrementHandle,"aw",%nobits
  20              		.align	2
  23              	xContinuousIncrementHandle:
  24 0000 00000000 		.space	4
  25              		.section	.bss.xLimitedIncrementHandle,"aw",%nobits
  26              		.align	2
  29              	xLimitedIncrementHandle:
  30 0000 00000000 		.space	4
  31              		.section	.bss.ulCounter,"aw",%nobits
  32              		.align	2
  35              	ulCounter:
  36 0000 00000000 		.space	4
  37              		.section	.bss.usCheckVariable,"aw",%nobits
  38              		.align	1
  41              	usCheckVariable:
  42 0000 0000     		.space	2
  43              		.section	.bss.xSuspendedQueueSendError,"aw",%nobits
  44              		.align	2
  47              	xSuspendedQueueSendError:
  48 0000 00000000 		.space	4
  49              		.section	.bss.xSuspendedQueueReceiveError,"aw",%nobits
  50              		.align	2
  53              	xSuspendedQueueReceiveError:
  54 0000 00000000 		.space	4
  55              		.comm	xSuspendedTestQueue,4,4
  56              		.section	.bss.ulExpectedValue,"aw",%nobits
  57              		.align	2
  60              	ulExpectedValue:
  61 0000 00000000 		.space	4
  62              		.section	.rodata
  63              		.align	2
  64              	.LC0:
  65 0000 53757370 		.ascii	"Suspended_Test_Queue\000"
  65      656E6465 
  65      645F5465 
  65      73745F51 
  65      75657565 
  66 0015 000000   		.align	2
  67              	.LC1:
  68 0018 434E545F 		.ascii	"CNT_INC\000"
  68      494E4300 
  69              		.align	2
  70              	.LC2:
  71 0020 4C494D5F 		.ascii	"LIM_INC\000"
  71      494E4300 
  72              		.align	2
  73              	.LC3:
  74 0028 435F4354 		.ascii	"C_CTRL\000"
  74      524C00
  75 002f 00       		.align	2
  76              	.LC4:
  77 0030 53555350 		.ascii	"SUSP_TX\000"
  77      5F545800 
  78              		.align	2
  79              	.LC5:
  80 0038 53555350 		.ascii	"SUSP_RX\000"
  80      5F525800 
  81              		.section	.text.vStartDynamicPriorityTasks,"ax",%progbits
  82              		.align	2
  83              		.global	vStartDynamicPriorityTasks
  84              		.thumb
  85              		.thumb_func
  87              	vStartDynamicPriorityTasks:
  88              	.LFB110:
  89              		.file 1 "App/Common/Minimal/dynamic.c"
   1:App/Common/Minimal/dynamic.c **** /*
   2:App/Common/Minimal/dynamic.c ****     FreeRTOS V7.5.3 - Copyright (C) 2013 Real Time Engineers Ltd. 
   3:App/Common/Minimal/dynamic.c ****     All rights reserved
   4:App/Common/Minimal/dynamic.c **** 
   5:App/Common/Minimal/dynamic.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:App/Common/Minimal/dynamic.c **** 
   7:App/Common/Minimal/dynamic.c ****     ***************************************************************************
   8:App/Common/Minimal/dynamic.c ****      *                                                                       *
   9:App/Common/Minimal/dynamic.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:App/Common/Minimal/dynamic.c ****      *    robust, strictly quality controlled, supported, and cross          *
  11:App/Common/Minimal/dynamic.c ****      *    platform software that has become a de facto standard.             *
  12:App/Common/Minimal/dynamic.c ****      *                                                                       *
  13:App/Common/Minimal/dynamic.c ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:App/Common/Minimal/dynamic.c ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  15:App/Common/Minimal/dynamic.c ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:App/Common/Minimal/dynamic.c ****      *                                                                       *
  17:App/Common/Minimal/dynamic.c ****      *    Thank you!                                                         *
  18:App/Common/Minimal/dynamic.c ****      *                                                                       *
  19:App/Common/Minimal/dynamic.c ****     ***************************************************************************
  20:App/Common/Minimal/dynamic.c **** 
  21:App/Common/Minimal/dynamic.c ****     This file is part of the FreeRTOS distribution.
  22:App/Common/Minimal/dynamic.c **** 
  23:App/Common/Minimal/dynamic.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  24:App/Common/Minimal/dynamic.c ****     the terms of the GNU General Public License (version 2) as published by the
  25:App/Common/Minimal/dynamic.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:App/Common/Minimal/dynamic.c **** 
  27:App/Common/Minimal/dynamic.c ****     >>! NOTE: The modification to the GPL is included to allow you to distribute
  28:App/Common/Minimal/dynamic.c ****     >>! a combined work that includes FreeRTOS without being obliged to provide
  29:App/Common/Minimal/dynamic.c ****     >>! the source code for proprietary components outside of the FreeRTOS
  30:App/Common/Minimal/dynamic.c ****     >>! kernel.
  31:App/Common/Minimal/dynamic.c **** 
  32:App/Common/Minimal/dynamic.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:App/Common/Minimal/dynamic.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:App/Common/Minimal/dynamic.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:App/Common/Minimal/dynamic.c ****     link: http://www.freertos.org/a00114.html
  36:App/Common/Minimal/dynamic.c **** 
  37:App/Common/Minimal/dynamic.c ****     1 tab == 4 spaces!
  38:App/Common/Minimal/dynamic.c **** 
  39:App/Common/Minimal/dynamic.c ****     ***************************************************************************
  40:App/Common/Minimal/dynamic.c ****      *                                                                       *
  41:App/Common/Minimal/dynamic.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:App/Common/Minimal/dynamic.c ****      *    not run, what could be wrong?"                                     *
  43:App/Common/Minimal/dynamic.c ****      *                                                                       *
  44:App/Common/Minimal/dynamic.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  45:App/Common/Minimal/dynamic.c ****      *                                                                       *
  46:App/Common/Minimal/dynamic.c ****     ***************************************************************************
  47:App/Common/Minimal/dynamic.c **** 
  48:App/Common/Minimal/dynamic.c ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:App/Common/Minimal/dynamic.c ****     license and Real Time Engineers Ltd. contact details.
  50:App/Common/Minimal/dynamic.c **** 
  51:App/Common/Minimal/dynamic.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:App/Common/Minimal/dynamic.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:App/Common/Minimal/dynamic.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:App/Common/Minimal/dynamic.c **** 
  55:App/Common/Minimal/dynamic.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:App/Common/Minimal/dynamic.c ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:App/Common/Minimal/dynamic.c ****     licenses offer ticketed support, indemnification and middleware.
  58:App/Common/Minimal/dynamic.c **** 
  59:App/Common/Minimal/dynamic.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:App/Common/Minimal/dynamic.c ****     engineered and independently SIL3 certified version for use in safety and
  61:App/Common/Minimal/dynamic.c ****     mission critical applications that require provable dependability.
  62:App/Common/Minimal/dynamic.c **** 
  63:App/Common/Minimal/dynamic.c ****     1 tab == 4 spaces!
  64:App/Common/Minimal/dynamic.c **** */
  65:App/Common/Minimal/dynamic.c **** 
  66:App/Common/Minimal/dynamic.c **** /*
  67:App/Common/Minimal/dynamic.c ****  * The first test creates three tasks - two counter tasks (one continuous count
  68:App/Common/Minimal/dynamic.c ****  * and one limited count) and one controller.  A "count" variable is shared
  69:App/Common/Minimal/dynamic.c ****  * between all three tasks.  The two counter tasks should never be in a "ready"
  70:App/Common/Minimal/dynamic.c ****  * state at the same time.  The controller task runs at the same priority as
  71:App/Common/Minimal/dynamic.c ****  * the continuous count task, and at a lower priority than the limited count
  72:App/Common/Minimal/dynamic.c ****  * task.
  73:App/Common/Minimal/dynamic.c ****  *
  74:App/Common/Minimal/dynamic.c ****  * One counter task loops indefinitely, incrementing the shared count variable
  75:App/Common/Minimal/dynamic.c ****  * on each iteration.  To ensure it has exclusive access to the variable it
  76:App/Common/Minimal/dynamic.c ****  * raises its priority above that of the controller task before each
  77:App/Common/Minimal/dynamic.c ****  * increment, lowering it again to its original priority before starting the
  78:App/Common/Minimal/dynamic.c ****  * next iteration.
  79:App/Common/Minimal/dynamic.c ****  *
  80:App/Common/Minimal/dynamic.c ****  * The other counter task increments the shared count variable on each
  81:App/Common/Minimal/dynamic.c ****  * iteration of its loop until the count has reached a limit of 0xff - at
  82:App/Common/Minimal/dynamic.c ****  * which point it suspends itself.  It will not start a new loop until the
  83:App/Common/Minimal/dynamic.c ****  * controller task has made it "ready" again by calling vTaskResume().
  84:App/Common/Minimal/dynamic.c ****  * This second counter task operates at a higher priority than controller
  85:App/Common/Minimal/dynamic.c ****  * task so does not need to worry about mutual exclusion of the counter
  86:App/Common/Minimal/dynamic.c ****  * variable.
  87:App/Common/Minimal/dynamic.c ****  *
  88:App/Common/Minimal/dynamic.c ****  * The controller task is in two sections.  The first section controls and
  89:App/Common/Minimal/dynamic.c ****  * monitors the continuous count task.  When this section is operational the
  90:App/Common/Minimal/dynamic.c ****  * limited count task is suspended.  Likewise, the second section controls
  91:App/Common/Minimal/dynamic.c ****  * and monitors the limited count task.  When this section is operational the
  92:App/Common/Minimal/dynamic.c ****  * continuous count task is suspended.
  93:App/Common/Minimal/dynamic.c ****  *
  94:App/Common/Minimal/dynamic.c ****  * In the first section the controller task first takes a copy of the shared
  95:App/Common/Minimal/dynamic.c ****  * count variable.  To ensure mutual exclusion on the count variable it
  96:App/Common/Minimal/dynamic.c ****  * suspends the continuous count task, resuming it again when the copy has been
  97:App/Common/Minimal/dynamic.c ****  * taken.  The controller task then sleeps for a fixed period - during which
  98:App/Common/Minimal/dynamic.c ****  * the continuous count task will execute and increment the shared variable.
  99:App/Common/Minimal/dynamic.c ****  * When the controller task wakes it checks that the continuous count task
 100:App/Common/Minimal/dynamic.c ****  * has executed by comparing the copy of the shared variable with its current
 101:App/Common/Minimal/dynamic.c ****  * value.  This time, to ensure mutual exclusion, the scheduler itself is
 102:App/Common/Minimal/dynamic.c ****  * suspended with a call to vTaskSuspendAll ().  This is for demonstration
 103:App/Common/Minimal/dynamic.c ****  * purposes only and is not a recommended technique due to its inefficiency.
 104:App/Common/Minimal/dynamic.c ****  *
 105:App/Common/Minimal/dynamic.c ****  * After a fixed number of iterations the controller task suspends the
 106:App/Common/Minimal/dynamic.c ****  * continuous count task, and moves on to its second section.
 107:App/Common/Minimal/dynamic.c ****  *
 108:App/Common/Minimal/dynamic.c ****  * At the start of the second section the shared variable is cleared to zero.
 109:App/Common/Minimal/dynamic.c ****  * The limited count task is then woken from its suspension by a call to
 110:App/Common/Minimal/dynamic.c ****  * vTaskResume ().  As this counter task operates at a higher priority than
 111:App/Common/Minimal/dynamic.c ****  * the controller task the controller task should not run again until the
 112:App/Common/Minimal/dynamic.c ****  * shared variable has been counted up to the limited value causing the counter
 113:App/Common/Minimal/dynamic.c ****  * task to suspend itself.  The next line after vTaskResume () is therefore
 114:App/Common/Minimal/dynamic.c ****  * a check on the shared variable to ensure everything is as expected.
 115:App/Common/Minimal/dynamic.c ****  *
 116:App/Common/Minimal/dynamic.c ****  *
 117:App/Common/Minimal/dynamic.c ****  * The second test consists of a couple of very simple tasks that post onto a
 118:App/Common/Minimal/dynamic.c ****  * queue while the scheduler is suspended.  This test was added to test parts
 119:App/Common/Minimal/dynamic.c ****  * of the scheduler not exercised by the first test.
 120:App/Common/Minimal/dynamic.c ****  *
 121:App/Common/Minimal/dynamic.c ****  */
 122:App/Common/Minimal/dynamic.c **** 
 123:App/Common/Minimal/dynamic.c **** #include <stdlib.h>
 124:App/Common/Minimal/dynamic.c **** 
 125:App/Common/Minimal/dynamic.c **** /* Scheduler include files. */
 126:App/Common/Minimal/dynamic.c **** #include "FreeRTOS.h"
 127:App/Common/Minimal/dynamic.c **** #include "task.h"
 128:App/Common/Minimal/dynamic.c **** #include "semphr.h"
 129:App/Common/Minimal/dynamic.c **** 
 130:App/Common/Minimal/dynamic.c **** /* Demo app include files. */
 131:App/Common/Minimal/dynamic.c **** #include "dynamic.h"
 132:App/Common/Minimal/dynamic.c **** 
 133:App/Common/Minimal/dynamic.c **** /* Function that implements the "limited count" task as described above. */
 134:App/Common/Minimal/dynamic.c **** static portTASK_FUNCTION_PROTO( vLimitedIncrementTask, pvParameters );
 135:App/Common/Minimal/dynamic.c **** 
 136:App/Common/Minimal/dynamic.c **** /* Function that implements the "continuous count" task as described above. */
 137:App/Common/Minimal/dynamic.c **** static portTASK_FUNCTION_PROTO( vContinuousIncrementTask, pvParameters );
 138:App/Common/Minimal/dynamic.c **** 
 139:App/Common/Minimal/dynamic.c **** /* Function that implements the controller task as described above. */
 140:App/Common/Minimal/dynamic.c **** static portTASK_FUNCTION_PROTO( vCounterControlTask, pvParameters );
 141:App/Common/Minimal/dynamic.c **** 
 142:App/Common/Minimal/dynamic.c **** static portTASK_FUNCTION_PROTO( vQueueReceiveWhenSuspendedTask, pvParameters );
 143:App/Common/Minimal/dynamic.c **** static portTASK_FUNCTION_PROTO( vQueueSendWhenSuspendedTask, pvParameters );
 144:App/Common/Minimal/dynamic.c **** 
 145:App/Common/Minimal/dynamic.c **** /* Demo task specific constants. */
 146:App/Common/Minimal/dynamic.c **** #define priSTACK_SIZE				( configMINIMAL_STACK_SIZE )
 147:App/Common/Minimal/dynamic.c **** #define priSLEEP_TIME				( ( portTickType ) 128 / portTICK_RATE_MS )
 148:App/Common/Minimal/dynamic.c **** #define priLOOPS					( 5 )
 149:App/Common/Minimal/dynamic.c **** #define priMAX_COUNT				( ( unsigned long ) 0xff )
 150:App/Common/Minimal/dynamic.c **** #define priNO_BLOCK					( ( portTickType ) 0 )
 151:App/Common/Minimal/dynamic.c **** #define priSUSPENDED_QUEUE_LENGTH	( 1 )
 152:App/Common/Minimal/dynamic.c **** 
 153:App/Common/Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 154:App/Common/Minimal/dynamic.c **** 
 155:App/Common/Minimal/dynamic.c **** /* Handles to the two counter tasks.  These could be passed in as parameters
 156:App/Common/Minimal/dynamic.c **** to the controller task to prevent them having to be file scope. */
 157:App/Common/Minimal/dynamic.c **** static xTaskHandle xContinuousIncrementHandle, xLimitedIncrementHandle;
 158:App/Common/Minimal/dynamic.c **** 
 159:App/Common/Minimal/dynamic.c **** /* The shared counter variable.  This is passed in as a parameter to the two
 160:App/Common/Minimal/dynamic.c **** counter variables for demonstration purposes. */
 161:App/Common/Minimal/dynamic.c **** static volatile unsigned long ulCounter;
 162:App/Common/Minimal/dynamic.c **** 
 163:App/Common/Minimal/dynamic.c **** /* Variables used to check that the tasks are still operating without error.
 164:App/Common/Minimal/dynamic.c **** Each complete iteration of the controller task increments this variable
 165:App/Common/Minimal/dynamic.c **** provided no errors have been found.  The variable maintaining the same value
 166:App/Common/Minimal/dynamic.c **** is therefore indication of an error. */
 167:App/Common/Minimal/dynamic.c **** static volatile unsigned short usCheckVariable = ( unsigned short ) 0;
 168:App/Common/Minimal/dynamic.c **** static volatile portBASE_TYPE xSuspendedQueueSendError = pdFALSE;
 169:App/Common/Minimal/dynamic.c **** static volatile portBASE_TYPE xSuspendedQueueReceiveError = pdFALSE;
 170:App/Common/Minimal/dynamic.c **** 
 171:App/Common/Minimal/dynamic.c **** /* Queue used by the second test. */
 172:App/Common/Minimal/dynamic.c **** xQueueHandle xSuspendedTestQueue;
 173:App/Common/Minimal/dynamic.c **** 
 174:App/Common/Minimal/dynamic.c **** /* The value the queue receive task expects to receive next.  This is file
 175:App/Common/Minimal/dynamic.c **** scope so xAreDynamicPriorityTasksStillRunning() can ensure it is still
 176:App/Common/Minimal/dynamic.c **** incrementing. */
 177:App/Common/Minimal/dynamic.c **** static unsigned long ulExpectedValue = ( unsigned long ) 0;
 178:App/Common/Minimal/dynamic.c **** 
 179:App/Common/Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 180:App/Common/Minimal/dynamic.c **** /*
 181:App/Common/Minimal/dynamic.c ****  * Start the three tasks as described at the top of the file.
 182:App/Common/Minimal/dynamic.c ****  * Note that the limited count task is given a higher priority.
 183:App/Common/Minimal/dynamic.c ****  */
 184:App/Common/Minimal/dynamic.c **** void vStartDynamicPriorityTasks( void )
 185:App/Common/Minimal/dynamic.c **** {
  90              		.loc 1 185 0
  91              		.cfi_startproc
  92              		@ args = 0, pretend = 0, frame = 0
  93              		@ frame_needed = 1, uses_anonymous_args = 0
  94 0000 80B5     		push	{r7, lr}
  95              	.LCFI0:
  96              		.cfi_def_cfa_offset 8
  97              		.cfi_offset 7, -8
  98              		.cfi_offset 14, -4
  99 0002 84B0     		sub	sp, sp, #16
 100              	.LCFI1:
 101              		.cfi_def_cfa_offset 24
 102 0004 04AF     		add	r7, sp, #16
 103              	.LCFI2:
 104              		.cfi_def_cfa 7, 8
 186:App/Common/Minimal/dynamic.c **** 	xSuspendedTestQueue = xQueueCreate( priSUSPENDED_QUEUE_LENGTH, sizeof( unsigned long ) );
 105              		.loc 1 186 0
 106 0006 4FF00100 		mov	r0, #1
 107 000a 4FF00401 		mov	r1, #4
 108 000e 4FF00002 		mov	r2, #0
 109 0012 FFF7FEFF 		bl	xQueueGenericCreate
 110 0016 0246     		mov	r2, r0
 111 0018 40F20003 		movw	r3, #:lower16:xSuspendedTestQueue
 112 001c C0F20003 		movt	r3, #:upper16:xSuspendedTestQueue
 113 0020 1A60     		str	r2, [r3, #0]
 187:App/Common/Minimal/dynamic.c **** 
 188:App/Common/Minimal/dynamic.c **** 	/* vQueueAddToRegistry() adds the queue to the queue registry, if one is
 189:App/Common/Minimal/dynamic.c **** 	in use.  The queue registry is provided as a means for kernel aware
 190:App/Common/Minimal/dynamic.c **** 	debuggers to locate queues and has no purpose if a kernel aware debugger
 191:App/Common/Minimal/dynamic.c **** 	is not being used.  The call to vQueueAddToRegistry() will be removed
 192:App/Common/Minimal/dynamic.c **** 	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
 193:App/Common/Minimal/dynamic.c **** 	defined to be less than 1. */
 194:App/Common/Minimal/dynamic.c **** 	vQueueAddToRegistry( xSuspendedTestQueue, ( signed char * ) "Suspended_Test_Queue" );
 114              		.loc 1 194 0
 115 0022 40F20003 		movw	r3, #:lower16:xSuspendedTestQueue
 116 0026 C0F20003 		movt	r3, #:upper16:xSuspendedTestQueue
 117 002a 1B68     		ldr	r3, [r3, #0]
 118 002c 1846     		mov	r0, r3
 119 002e 40F20001 		movw	r1, #:lower16:.LC0
 120 0032 C0F20001 		movt	r1, #:upper16:.LC0
 121 0036 FFF7FEFF 		bl	vQueueAddToRegistry
 195:App/Common/Minimal/dynamic.c **** 
 196:App/Common/Minimal/dynamic.c **** 	xTaskCreate( vContinuousIncrementTask, ( signed char * ) "CNT_INC", priSTACK_SIZE, ( void * ) &ulC
 122              		.loc 1 196 0
 123 003a 4FF00003 		mov	r3, #0
 124 003e 0093     		str	r3, [sp, #0]
 125 0040 40F20003 		movw	r3, #:lower16:xContinuousIncrementHandle
 126 0044 C0F20003 		movt	r3, #:upper16:xContinuousIncrementHandle
 127 0048 0193     		str	r3, [sp, #4]
 128 004a 4FF00003 		mov	r3, #0
 129 004e 0293     		str	r3, [sp, #8]
 130 0050 4FF00003 		mov	r3, #0
 131 0054 0393     		str	r3, [sp, #12]
 132 0056 40F20000 		movw	r0, #:lower16:vContinuousIncrementTask
 133 005a C0F20000 		movt	r0, #:upper16:vContinuousIncrementTask
 134 005e 40F20001 		movw	r1, #:lower16:.LC1
 135 0062 C0F20001 		movt	r1, #:upper16:.LC1
 136 0066 4FF08202 		mov	r2, #130
 137 006a 40F20003 		movw	r3, #:lower16:ulCounter
 138 006e C0F20003 		movt	r3, #:upper16:ulCounter
 139 0072 FFF7FEFF 		bl	xTaskGenericCreate
 197:App/Common/Minimal/dynamic.c **** 	xTaskCreate( vLimitedIncrementTask, ( signed char * ) "LIM_INC", priSTACK_SIZE, ( void * ) &ulCoun
 140              		.loc 1 197 0
 141 0076 4FF00103 		mov	r3, #1
 142 007a 0093     		str	r3, [sp, #0]
 143 007c 40F20003 		movw	r3, #:lower16:xLimitedIncrementHandle
 144 0080 C0F20003 		movt	r3, #:upper16:xLimitedIncrementHandle
 145 0084 0193     		str	r3, [sp, #4]
 146 0086 4FF00003 		mov	r3, #0
 147 008a 0293     		str	r3, [sp, #8]
 148 008c 4FF00003 		mov	r3, #0
 149 0090 0393     		str	r3, [sp, #12]
 150 0092 40F20000 		movw	r0, #:lower16:vLimitedIncrementTask
 151 0096 C0F20000 		movt	r0, #:upper16:vLimitedIncrementTask
 152 009a 40F20001 		movw	r1, #:lower16:.LC2
 153 009e C0F20001 		movt	r1, #:upper16:.LC2
 154 00a2 4FF08202 		mov	r2, #130
 155 00a6 40F20003 		movw	r3, #:lower16:ulCounter
 156 00aa C0F20003 		movt	r3, #:upper16:ulCounter
 157 00ae FFF7FEFF 		bl	xTaskGenericCreate
 198:App/Common/Minimal/dynamic.c **** 	xTaskCreate( vCounterControlTask, ( signed char * ) "C_CTRL", priSTACK_SIZE, NULL, tskIDLE_PRIORIT
 158              		.loc 1 198 0
 159 00b2 4FF00003 		mov	r3, #0
 160 00b6 0093     		str	r3, [sp, #0]
 161 00b8 4FF00003 		mov	r3, #0
 162 00bc 0193     		str	r3, [sp, #4]
 163 00be 4FF00003 		mov	r3, #0
 164 00c2 0293     		str	r3, [sp, #8]
 165 00c4 4FF00003 		mov	r3, #0
 166 00c8 0393     		str	r3, [sp, #12]
 167 00ca 40F20000 		movw	r0, #:lower16:vCounterControlTask
 168 00ce C0F20000 		movt	r0, #:upper16:vCounterControlTask
 169 00d2 40F20001 		movw	r1, #:lower16:.LC3
 170 00d6 C0F20001 		movt	r1, #:upper16:.LC3
 171 00da 4FF08202 		mov	r2, #130
 172 00de 4FF00003 		mov	r3, #0
 173 00e2 FFF7FEFF 		bl	xTaskGenericCreate
 199:App/Common/Minimal/dynamic.c **** 	xTaskCreate( vQueueSendWhenSuspendedTask, ( signed char * ) "SUSP_TX", priSTACK_SIZE, NULL, tskIDL
 174              		.loc 1 199 0
 175 00e6 4FF00003 		mov	r3, #0
 176 00ea 0093     		str	r3, [sp, #0]
 177 00ec 4FF00003 		mov	r3, #0
 178 00f0 0193     		str	r3, [sp, #4]
 179 00f2 4FF00003 		mov	r3, #0
 180 00f6 0293     		str	r3, [sp, #8]
 181 00f8 4FF00003 		mov	r3, #0
 182 00fc 0393     		str	r3, [sp, #12]
 183 00fe 40F20000 		movw	r0, #:lower16:vQueueSendWhenSuspendedTask
 184 0102 C0F20000 		movt	r0, #:upper16:vQueueSendWhenSuspendedTask
 185 0106 40F20001 		movw	r1, #:lower16:.LC4
 186 010a C0F20001 		movt	r1, #:upper16:.LC4
 187 010e 4FF08202 		mov	r2, #130
 188 0112 4FF00003 		mov	r3, #0
 189 0116 FFF7FEFF 		bl	xTaskGenericCreate
 200:App/Common/Minimal/dynamic.c **** 	xTaskCreate( vQueueReceiveWhenSuspendedTask, ( signed char * ) "SUSP_RX", priSTACK_SIZE, NULL, tsk
 190              		.loc 1 200 0
 191 011a 4FF00003 		mov	r3, #0
 192 011e 0093     		str	r3, [sp, #0]
 193 0120 4FF00003 		mov	r3, #0
 194 0124 0193     		str	r3, [sp, #4]
 195 0126 4FF00003 		mov	r3, #0
 196 012a 0293     		str	r3, [sp, #8]
 197 012c 4FF00003 		mov	r3, #0
 198 0130 0393     		str	r3, [sp, #12]
 199 0132 40F20000 		movw	r0, #:lower16:vQueueReceiveWhenSuspendedTask
 200 0136 C0F20000 		movt	r0, #:upper16:vQueueReceiveWhenSuspendedTask
 201 013a 40F20001 		movw	r1, #:lower16:.LC5
 202 013e C0F20001 		movt	r1, #:upper16:.LC5
 203 0142 4FF08202 		mov	r2, #130
 204 0146 4FF00003 		mov	r3, #0
 205 014a FFF7FEFF 		bl	xTaskGenericCreate
 201:App/Common/Minimal/dynamic.c **** }
 206              		.loc 1 201 0
 207 014e BD46     		mov	sp, r7
 208 0150 80BD     		pop	{r7, pc}
 209              		.cfi_endproc
 210              	.LFE110:
 212 0152 00BF     		.section	.text.vLimitedIncrementTask,"ax",%progbits
 213              		.align	2
 214              		.thumb
 215              		.thumb_func
 217              	vLimitedIncrementTask:
 218              	.LFB111:
 202:App/Common/Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 203:App/Common/Minimal/dynamic.c **** 
 204:App/Common/Minimal/dynamic.c **** /*
 205:App/Common/Minimal/dynamic.c ****  * Just loops around incrementing the shared variable until the limit has been
 206:App/Common/Minimal/dynamic.c ****  * reached.  Once the limit has been reached it suspends itself.
 207:App/Common/Minimal/dynamic.c ****  */
 208:App/Common/Minimal/dynamic.c **** static portTASK_FUNCTION( vLimitedIncrementTask, pvParameters )
 209:App/Common/Minimal/dynamic.c **** {
 219              		.loc 1 209 0
 220              		.cfi_startproc
 221              		@ args = 0, pretend = 0, frame = 16
 222              		@ frame_needed = 1, uses_anonymous_args = 0
 223 0000 80B5     		push	{r7, lr}
 224              	.LCFI3:
 225              		.cfi_def_cfa_offset 8
 226              		.cfi_offset 7, -8
 227              		.cfi_offset 14, -4
 228 0002 84B0     		sub	sp, sp, #16
 229              	.LCFI4:
 230              		.cfi_def_cfa_offset 24
 231 0004 00AF     		add	r7, sp, #0
 232              	.LCFI5:
 233              		.cfi_def_cfa_register 7
 234 0006 7860     		str	r0, [r7, #4]
 210:App/Common/Minimal/dynamic.c **** unsigned long *pulCounter;
 211:App/Common/Minimal/dynamic.c **** 
 212:App/Common/Minimal/dynamic.c **** 	/* Take a pointer to the shared variable from the parameters passed into
 213:App/Common/Minimal/dynamic.c **** 	the task. */
 214:App/Common/Minimal/dynamic.c **** 	pulCounter = ( unsigned long * ) pvParameters;
 235              		.loc 1 214 0
 236 0008 7B68     		ldr	r3, [r7, #4]
 237 000a FB60     		str	r3, [r7, #12]
 215:App/Common/Minimal/dynamic.c **** 
 216:App/Common/Minimal/dynamic.c **** 	/* This will run before the control task, so the first thing it does is
 217:App/Common/Minimal/dynamic.c **** 	suspend - the control task will resume it when ready. */
 218:App/Common/Minimal/dynamic.c **** 	vTaskSuspend( NULL );
 238              		.loc 1 218 0
 239 000c 4FF00000 		mov	r0, #0
 240 0010 FFF7FEFF 		bl	vTaskSuspend
 241 0014 00E0     		b	.L4
 242              	.L5:
 219:App/Common/Minimal/dynamic.c **** 
 220:App/Common/Minimal/dynamic.c **** 	for( ;; )
 221:App/Common/Minimal/dynamic.c **** 	{
 222:App/Common/Minimal/dynamic.c **** 		/* Just count up to a value then suspend. */
 223:App/Common/Minimal/dynamic.c **** 		( *pulCounter )++;
 224:App/Common/Minimal/dynamic.c **** 
 225:App/Common/Minimal/dynamic.c **** 		if( *pulCounter >= priMAX_COUNT )
 226:App/Common/Minimal/dynamic.c **** 		{
 227:App/Common/Minimal/dynamic.c **** 			vTaskSuspend( NULL );
 228:App/Common/Minimal/dynamic.c **** 		}
 229:App/Common/Minimal/dynamic.c **** 	}
 243              		.loc 1 229 0
 244 0016 00BF     		nop
 245              	.L4:
 223:App/Common/Minimal/dynamic.c **** 		( *pulCounter )++;
 246              		.loc 1 223 0
 247 0018 FB68     		ldr	r3, [r7, #12]
 248 001a 1B68     		ldr	r3, [r3, #0]
 249 001c 03F10102 		add	r2, r3, #1
 250 0020 FB68     		ldr	r3, [r7, #12]
 251 0022 1A60     		str	r2, [r3, #0]
 225:App/Common/Minimal/dynamic.c **** 		if( *pulCounter >= priMAX_COUNT )
 252              		.loc 1 225 0
 253 0024 FB68     		ldr	r3, [r7, #12]
 254 0026 1B68     		ldr	r3, [r3, #0]
 255 0028 FE2B     		cmp	r3, #254
 256 002a F4D9     		bls	.L5
 227:App/Common/Minimal/dynamic.c **** 			vTaskSuspend( NULL );
 257              		.loc 1 227 0
 258 002c 4FF00000 		mov	r0, #0
 259 0030 FFF7FEFF 		bl	vTaskSuspend
 260              		.loc 1 229 0
 261 0034 EFE7     		b	.L5
 262              		.cfi_endproc
 263              	.LFE111:
 265 0036 00BF     		.section	.text.vContinuousIncrementTask,"ax",%progbits
 266              		.align	2
 267              		.thumb
 268              		.thumb_func
 270              	vContinuousIncrementTask:
 271              	.LFB112:
 230:App/Common/Minimal/dynamic.c **** }
 231:App/Common/Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 232:App/Common/Minimal/dynamic.c **** 
 233:App/Common/Minimal/dynamic.c **** /*
 234:App/Common/Minimal/dynamic.c ****  * Just keep counting the shared variable up.  The control task will suspend
 235:App/Common/Minimal/dynamic.c ****  * this task when it wants.
 236:App/Common/Minimal/dynamic.c ****  */
 237:App/Common/Minimal/dynamic.c **** static portTASK_FUNCTION( vContinuousIncrementTask, pvParameters )
 238:App/Common/Minimal/dynamic.c **** {
 272              		.loc 1 238 0
 273              		.cfi_startproc
 274              		@ args = 0, pretend = 0, frame = 16
 275              		@ frame_needed = 1, uses_anonymous_args = 0
 276 0000 80B5     		push	{r7, lr}
 277              	.LCFI6:
 278              		.cfi_def_cfa_offset 8
 279              		.cfi_offset 7, -8
 280              		.cfi_offset 14, -4
 281 0002 84B0     		sub	sp, sp, #16
 282              	.LCFI7:
 283              		.cfi_def_cfa_offset 24
 284 0004 00AF     		add	r7, sp, #0
 285              	.LCFI8:
 286              		.cfi_def_cfa_register 7
 287 0006 7860     		str	r0, [r7, #4]
 239:App/Common/Minimal/dynamic.c **** volatile unsigned long *pulCounter;
 240:App/Common/Minimal/dynamic.c **** unsigned portBASE_TYPE uxOurPriority;
 241:App/Common/Minimal/dynamic.c **** 
 242:App/Common/Minimal/dynamic.c **** 	/* Take a pointer to the shared variable from the parameters passed into
 243:App/Common/Minimal/dynamic.c **** 	the task. */
 244:App/Common/Minimal/dynamic.c **** 	pulCounter = ( unsigned long * ) pvParameters;
 288              		.loc 1 244 0
 289 0008 7B68     		ldr	r3, [r7, #4]
 290 000a FB60     		str	r3, [r7, #12]
 245:App/Common/Minimal/dynamic.c **** 
 246:App/Common/Minimal/dynamic.c **** 	/* Query our priority so we can raise it when exclusive access to the
 247:App/Common/Minimal/dynamic.c **** 	shared variable is required. */
 248:App/Common/Minimal/dynamic.c **** 	uxOurPriority = uxTaskPriorityGet( NULL );
 291              		.loc 1 248 0
 292 000c 4FF00000 		mov	r0, #0
 293 0010 FFF7FEFF 		bl	uxTaskPriorityGet
 294 0014 B860     		str	r0, [r7, #8]
 295 0016 00E0     		b	.L11
 296              	.L12:
 249:App/Common/Minimal/dynamic.c **** 
 250:App/Common/Minimal/dynamic.c **** 	for( ;; )
 251:App/Common/Minimal/dynamic.c **** 	{
 252:App/Common/Minimal/dynamic.c **** 		/* Raise the priority above the controller task to ensure a context
 253:App/Common/Minimal/dynamic.c **** 		switch does not occur while the variable is being accessed. */
 254:App/Common/Minimal/dynamic.c **** 		vTaskPrioritySet( NULL, uxOurPriority + 1 );
 255:App/Common/Minimal/dynamic.c **** 		{
 256:App/Common/Minimal/dynamic.c **** 			configASSERT( ( uxTaskPriorityGet( NULL ) == ( uxOurPriority + 1 ) ) );
 257:App/Common/Minimal/dynamic.c **** 			( *pulCounter )++;
 258:App/Common/Minimal/dynamic.c **** 		}
 259:App/Common/Minimal/dynamic.c **** 		vTaskPrioritySet( NULL, uxOurPriority );
 260:App/Common/Minimal/dynamic.c **** 		configASSERT( ( uxTaskPriorityGet( NULL ) == uxOurPriority ) );
 261:App/Common/Minimal/dynamic.c **** 	}
 297              		.loc 1 261 0
 298 0018 00BF     		nop
 299              	.L11:
 254:App/Common/Minimal/dynamic.c **** 		vTaskPrioritySet( NULL, uxOurPriority + 1 );
 300              		.loc 1 254 0
 301 001a BB68     		ldr	r3, [r7, #8]
 302 001c 03F10103 		add	r3, r3, #1
 303 0020 4FF00000 		mov	r0, #0
 304 0024 1946     		mov	r1, r3
 305 0026 FFF7FEFF 		bl	vTaskPrioritySet
 256:App/Common/Minimal/dynamic.c **** 			configASSERT( ( uxTaskPriorityGet( NULL ) == ( uxOurPriority + 1 ) ) );
 306              		.loc 1 256 0
 307 002a 4FF00000 		mov	r0, #0
 308 002e FFF7FEFF 		bl	uxTaskPriorityGet
 309 0032 0246     		mov	r2, r0
 310 0034 BB68     		ldr	r3, [r7, #8]
 311 0036 03F10103 		add	r3, r3, #1
 312 003a 9A42     		cmp	r2, r3
 313 003c 02D0     		beq	.L7
 256:App/Common/Minimal/dynamic.c **** 			configASSERT( ( uxTaskPriorityGet( NULL ) == ( uxOurPriority + 1 ) ) );
 314              		.loc 1 256 0 is_stmt 0 discriminator 1
 315 003e FFF7FEFF 		bl	ulPortSetInterruptMask
 316              	.L8:
 256:App/Common/Minimal/dynamic.c **** 			configASSERT( ( uxTaskPriorityGet( NULL ) == ( uxOurPriority + 1 ) ) );
 317              		.loc 1 256 0 discriminator 2
 318 0042 FEE7     		b	.L8
 319              	.L7:
 257:App/Common/Minimal/dynamic.c **** 			( *pulCounter )++;
 320              		.loc 1 257 0 is_stmt 1
 321 0044 FB68     		ldr	r3, [r7, #12]
 322 0046 1B68     		ldr	r3, [r3, #0]
 323 0048 03F10102 		add	r2, r3, #1
 324 004c FB68     		ldr	r3, [r7, #12]
 325 004e 1A60     		str	r2, [r3, #0]
 259:App/Common/Minimal/dynamic.c **** 		vTaskPrioritySet( NULL, uxOurPriority );
 326              		.loc 1 259 0
 327 0050 4FF00000 		mov	r0, #0
 328 0054 B968     		ldr	r1, [r7, #8]
 329 0056 FFF7FEFF 		bl	vTaskPrioritySet
 260:App/Common/Minimal/dynamic.c **** 		configASSERT( ( uxTaskPriorityGet( NULL ) == uxOurPriority ) );
 330              		.loc 1 260 0
 331 005a 4FF00000 		mov	r0, #0
 332 005e FFF7FEFF 		bl	uxTaskPriorityGet
 333 0062 0246     		mov	r2, r0
 334 0064 BB68     		ldr	r3, [r7, #8]
 335 0066 9A42     		cmp	r2, r3
 336 0068 D6D0     		beq	.L12
 260:App/Common/Minimal/dynamic.c **** 		configASSERT( ( uxTaskPriorityGet( NULL ) == uxOurPriority ) );
 337              		.loc 1 260 0 is_stmt 0 discriminator 1
 338 006a FFF7FEFF 		bl	ulPortSetInterruptMask
 339              	.L10:
 260:App/Common/Minimal/dynamic.c **** 		configASSERT( ( uxTaskPriorityGet( NULL ) == uxOurPriority ) );
 340              		.loc 1 260 0 discriminator 2
 341 006e FEE7     		b	.L10
 342              		.cfi_endproc
 343              	.LFE112:
 345              		.section	.text.vCounterControlTask,"ax",%progbits
 346              		.align	2
 347              		.thumb
 348              		.thumb_func
 350              	vCounterControlTask:
 351              	.LFB113:
 262:App/Common/Minimal/dynamic.c **** }
 263:App/Common/Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 264:App/Common/Minimal/dynamic.c **** 
 265:App/Common/Minimal/dynamic.c **** /*
 266:App/Common/Minimal/dynamic.c ****  * Controller task as described above.
 267:App/Common/Minimal/dynamic.c ****  */
 268:App/Common/Minimal/dynamic.c **** static portTASK_FUNCTION( vCounterControlTask, pvParameters )
 269:App/Common/Minimal/dynamic.c **** {
 352              		.loc 1 269 0 is_stmt 1
 353              		.cfi_startproc
 354              		@ args = 0, pretend = 0, frame = 16
 355              		@ frame_needed = 1, uses_anonymous_args = 0
 356 0000 80B5     		push	{r7, lr}
 357              	.LCFI9:
 358              		.cfi_def_cfa_offset 8
 359              		.cfi_offset 7, -8
 360              		.cfi_offset 14, -4
 361 0002 84B0     		sub	sp, sp, #16
 362              	.LCFI10:
 363              		.cfi_def_cfa_offset 24
 364 0004 00AF     		add	r7, sp, #0
 365              	.LCFI11:
 366              		.cfi_def_cfa_register 7
 367 0006 7860     		str	r0, [r7, #4]
 270:App/Common/Minimal/dynamic.c **** unsigned long ulLastCounter;
 271:App/Common/Minimal/dynamic.c **** short sLoops;
 272:App/Common/Minimal/dynamic.c **** short sError = pdFALSE;
 368              		.loc 1 272 0
 369 0008 4FF00003 		mov	r3, #0
 370 000c BB81     		strh	r3, [r7, #12]	@ movhi
 371              	.L19:
 273:App/Common/Minimal/dynamic.c **** 
 274:App/Common/Minimal/dynamic.c **** 	/* Just to stop warning messages. */
 275:App/Common/Minimal/dynamic.c **** 	( void ) pvParameters;
 276:App/Common/Minimal/dynamic.c **** 
 277:App/Common/Minimal/dynamic.c **** 	for( ;; )
 278:App/Common/Minimal/dynamic.c **** 	{
 279:App/Common/Minimal/dynamic.c **** 		/* Start with the counter at zero. */
 280:App/Common/Minimal/dynamic.c **** 		ulCounter = ( unsigned long ) 0;
 372              		.loc 1 280 0
 373 000e 40F20003 		movw	r3, #:lower16:ulCounter
 374 0012 C0F20003 		movt	r3, #:upper16:ulCounter
 375 0016 4FF00002 		mov	r2, #0
 376 001a 1A60     		str	r2, [r3, #0]
 281:App/Common/Minimal/dynamic.c **** 
 282:App/Common/Minimal/dynamic.c **** 		/* First section : */
 283:App/Common/Minimal/dynamic.c **** 
 284:App/Common/Minimal/dynamic.c **** 		/* Check the continuous count task is running. */
 285:App/Common/Minimal/dynamic.c **** 		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
 377              		.loc 1 285 0
 378 001c 4FF00003 		mov	r3, #0
 379 0020 FB81     		strh	r3, [r7, #14]	@ movhi
 380 0022 2CE0     		b	.L14
 381              	.L16:
 286:App/Common/Minimal/dynamic.c **** 		{
 287:App/Common/Minimal/dynamic.c **** 			/* Suspend the continuous count task so we can take a mirror of the
 288:App/Common/Minimal/dynamic.c **** 			shared variable without risk of corruption.  This is not really
 289:App/Common/Minimal/dynamic.c **** 			needed as the other task raises its priority above this task's
 290:App/Common/Minimal/dynamic.c **** 			priority. */
 291:App/Common/Minimal/dynamic.c **** 			vTaskSuspend( xContinuousIncrementHandle );
 382              		.loc 1 291 0
 383 0024 40F20003 		movw	r3, #:lower16:xContinuousIncrementHandle
 384 0028 C0F20003 		movt	r3, #:upper16:xContinuousIncrementHandle
 385 002c 1B68     		ldr	r3, [r3, #0]
 386 002e 1846     		mov	r0, r3
 387 0030 FFF7FEFF 		bl	vTaskSuspend
 292:App/Common/Minimal/dynamic.c **** 			{
 293:App/Common/Minimal/dynamic.c **** 				#if( INCLUDE_eTaskGetState == 1 )
 294:App/Common/Minimal/dynamic.c **** 				{
 295:App/Common/Minimal/dynamic.c **** 					configASSERT( eTaskGetState( xContinuousIncrementHandle ) == eSuspended );
 296:App/Common/Minimal/dynamic.c **** 				}
 297:App/Common/Minimal/dynamic.c **** 				#endif /* INCLUDE_eTaskGetState */
 298:App/Common/Minimal/dynamic.c **** 
 299:App/Common/Minimal/dynamic.c **** 				ulLastCounter = ulCounter;
 388              		.loc 1 299 0
 389 0034 40F20003 		movw	r3, #:lower16:ulCounter
 390 0038 C0F20003 		movt	r3, #:upper16:ulCounter
 391 003c 1B68     		ldr	r3, [r3, #0]
 392 003e BB60     		str	r3, [r7, #8]
 300:App/Common/Minimal/dynamic.c **** 			}
 301:App/Common/Minimal/dynamic.c **** 			vTaskResume( xContinuousIncrementHandle );
 393              		.loc 1 301 0
 394 0040 40F20003 		movw	r3, #:lower16:xContinuousIncrementHandle
 395 0044 C0F20003 		movt	r3, #:upper16:xContinuousIncrementHandle
 396 0048 1B68     		ldr	r3, [r3, #0]
 397 004a 1846     		mov	r0, r3
 398 004c FFF7FEFF 		bl	vTaskResume
 302:App/Common/Minimal/dynamic.c **** 
 303:App/Common/Minimal/dynamic.c **** 			#if( INCLUDE_eTaskGetState == 1 )
 304:App/Common/Minimal/dynamic.c **** 			{
 305:App/Common/Minimal/dynamic.c **** 				configASSERT( eTaskGetState( xContinuousIncrementHandle ) == eReady );
 306:App/Common/Minimal/dynamic.c **** 			}
 307:App/Common/Minimal/dynamic.c **** 			#endif /* INCLUDE_eTaskGetState */
 308:App/Common/Minimal/dynamic.c **** 
 309:App/Common/Minimal/dynamic.c **** 			/* Now delay to ensure the other task has processor time. */
 310:App/Common/Minimal/dynamic.c **** 			vTaskDelay( priSLEEP_TIME );
 399              		.loc 1 310 0
 400 0050 4FF08000 		mov	r0, #128
 401 0054 FFF7FEFF 		bl	vTaskDelay
 311:App/Common/Minimal/dynamic.c **** 
 312:App/Common/Minimal/dynamic.c **** 			/* Check the shared variable again.  This time to ensure mutual
 313:App/Common/Minimal/dynamic.c **** 			exclusion the whole scheduler will be locked.  This is just for
 314:App/Common/Minimal/dynamic.c **** 			demo purposes! */
 315:App/Common/Minimal/dynamic.c **** 			vTaskSuspendAll();
 402              		.loc 1 315 0
 403 0058 FFF7FEFF 		bl	vTaskSuspendAll
 316:App/Common/Minimal/dynamic.c **** 			{
 317:App/Common/Minimal/dynamic.c **** 				if( ulLastCounter == ulCounter )
 404              		.loc 1 317 0
 405 005c 40F20003 		movw	r3, #:lower16:ulCounter
 406 0060 C0F20003 		movt	r3, #:upper16:ulCounter
 407 0064 1B68     		ldr	r3, [r3, #0]
 408 0066 BA68     		ldr	r2, [r7, #8]
 409 0068 9A42     		cmp	r2, r3
 410 006a 02D1     		bne	.L15
 318:App/Common/Minimal/dynamic.c **** 				{
 319:App/Common/Minimal/dynamic.c **** 					/* The shared variable has not changed.  There is a problem
 320:App/Common/Minimal/dynamic.c **** 					with the continuous count task so flag an error. */
 321:App/Common/Minimal/dynamic.c **** 					sError = pdTRUE;
 411              		.loc 1 321 0
 412 006c 4FF00103 		mov	r3, #1
 413 0070 BB81     		strh	r3, [r7, #12]	@ movhi
 414              	.L15:
 322:App/Common/Minimal/dynamic.c **** 				}
 323:App/Common/Minimal/dynamic.c **** 			}
 324:App/Common/Minimal/dynamic.c **** 			xTaskResumeAll();
 415              		.loc 1 324 0
 416 0072 FFF7FEFF 		bl	xTaskResumeAll
 285:App/Common/Minimal/dynamic.c **** 		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
 417              		.loc 1 285 0
 418 0076 FB89     		ldrh	r3, [r7, #14]	@ movhi
 419 0078 03F10103 		add	r3, r3, #1
 420 007c FB81     		strh	r3, [r7, #14]	@ movhi
 421              	.L14:
 285:App/Common/Minimal/dynamic.c **** 		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
 422              		.loc 1 285 0 is_stmt 0 discriminator 1
 423 007e B7F90E30 		ldrsh	r3, [r7, #14]
 424 0082 042B     		cmp	r3, #4
 425 0084 CEDD     		ble	.L16
 325:App/Common/Minimal/dynamic.c **** 		}
 326:App/Common/Minimal/dynamic.c **** 
 327:App/Common/Minimal/dynamic.c **** 		/* Second section: */
 328:App/Common/Minimal/dynamic.c **** 
 329:App/Common/Minimal/dynamic.c **** 		/* Suspend the continuous counter task so it stops accessing the shared
 330:App/Common/Minimal/dynamic.c **** 		variable. */
 331:App/Common/Minimal/dynamic.c **** 		vTaskSuspend( xContinuousIncrementHandle );
 426              		.loc 1 331 0 is_stmt 1
 427 0086 40F20003 		movw	r3, #:lower16:xContinuousIncrementHandle
 428 008a C0F20003 		movt	r3, #:upper16:xContinuousIncrementHandle
 429 008e 1B68     		ldr	r3, [r3, #0]
 430 0090 1846     		mov	r0, r3
 431 0092 FFF7FEFF 		bl	vTaskSuspend
 332:App/Common/Minimal/dynamic.c **** 
 333:App/Common/Minimal/dynamic.c **** 		/* Reset the variable. */
 334:App/Common/Minimal/dynamic.c **** 		ulCounter = ( unsigned long ) 0;
 432              		.loc 1 334 0
 433 0096 40F20003 		movw	r3, #:lower16:ulCounter
 434 009a C0F20003 		movt	r3, #:upper16:ulCounter
 435 009e 4FF00002 		mov	r2, #0
 436 00a2 1A60     		str	r2, [r3, #0]
 335:App/Common/Minimal/dynamic.c **** 
 336:App/Common/Minimal/dynamic.c **** 		#if( INCLUDE_eTaskGetState == 1 )
 337:App/Common/Minimal/dynamic.c **** 		{
 338:App/Common/Minimal/dynamic.c **** 			configASSERT( eTaskGetState( xLimitedIncrementHandle ) == eSuspended );
 339:App/Common/Minimal/dynamic.c **** 		}
 340:App/Common/Minimal/dynamic.c **** 		#endif /* INCLUDE_eTaskGetState */
 341:App/Common/Minimal/dynamic.c **** 
 342:App/Common/Minimal/dynamic.c **** 		/* Resume the limited count task which has a higher priority than us.
 343:App/Common/Minimal/dynamic.c **** 		We should therefore not return from this call until the limited count
 344:App/Common/Minimal/dynamic.c **** 		task has suspended itself with a known value in the counter variable. */
 345:App/Common/Minimal/dynamic.c **** 		vTaskResume( xLimitedIncrementHandle );
 437              		.loc 1 345 0
 438 00a4 40F20003 		movw	r3, #:lower16:xLimitedIncrementHandle
 439 00a8 C0F20003 		movt	r3, #:upper16:xLimitedIncrementHandle
 440 00ac 1B68     		ldr	r3, [r3, #0]
 441 00ae 1846     		mov	r0, r3
 442 00b0 FFF7FEFF 		bl	vTaskResume
 346:App/Common/Minimal/dynamic.c **** 
 347:App/Common/Minimal/dynamic.c **** 		/* This task should not run again until xLimitedIncrementHandle has
 348:App/Common/Minimal/dynamic.c **** 		suspended itself. */
 349:App/Common/Minimal/dynamic.c **** 		#if( INCLUDE_eTaskGetState == 1 )
 350:App/Common/Minimal/dynamic.c **** 		{
 351:App/Common/Minimal/dynamic.c **** 			configASSERT( eTaskGetState( xLimitedIncrementHandle ) == eSuspended );
 352:App/Common/Minimal/dynamic.c **** 		}
 353:App/Common/Minimal/dynamic.c **** 		#endif /* INCLUDE_eTaskGetState */
 354:App/Common/Minimal/dynamic.c **** 
 355:App/Common/Minimal/dynamic.c **** 		/* Does the counter variable have the expected value? */
 356:App/Common/Minimal/dynamic.c **** 		if( ulCounter != priMAX_COUNT )
 443              		.loc 1 356 0
 444 00b4 40F20003 		movw	r3, #:lower16:ulCounter
 445 00b8 C0F20003 		movt	r3, #:upper16:ulCounter
 446 00bc 1B68     		ldr	r3, [r3, #0]
 447 00be FF2B     		cmp	r3, #255
 448 00c0 02D0     		beq	.L17
 357:App/Common/Minimal/dynamic.c **** 		{
 358:App/Common/Minimal/dynamic.c **** 			sError = pdTRUE;
 449              		.loc 1 358 0
 450 00c2 4FF00103 		mov	r3, #1
 451 00c6 BB81     		strh	r3, [r7, #12]	@ movhi
 452              	.L17:
 359:App/Common/Minimal/dynamic.c **** 		}
 360:App/Common/Minimal/dynamic.c **** 
 361:App/Common/Minimal/dynamic.c **** 		if( sError == pdFALSE )
 453              		.loc 1 361 0
 454 00c8 B7F90C30 		ldrsh	r3, [r7, #12]
 455 00cc 002B     		cmp	r3, #0
 456 00ce 11D1     		bne	.L18
 362:App/Common/Minimal/dynamic.c **** 		{
 363:App/Common/Minimal/dynamic.c **** 			/* If no errors have occurred then increment the check variable. */
 364:App/Common/Minimal/dynamic.c **** 			portENTER_CRITICAL();
 457              		.loc 1 364 0
 458 00d0 FFF7FEFF 		bl	vPortEnterCritical
 365:App/Common/Minimal/dynamic.c **** 				usCheckVariable++;
 459              		.loc 1 365 0
 460 00d4 40F20003 		movw	r3, #:lower16:usCheckVariable
 461 00d8 C0F20003 		movt	r3, #:upper16:usCheckVariable
 462 00dc 1B88     		ldrh	r3, [r3, #0]	@ movhi
 463 00de 9BB2     		uxth	r3, r3
 464 00e0 03F10103 		add	r3, r3, #1
 465 00e4 9AB2     		uxth	r2, r3
 466 00e6 40F20003 		movw	r3, #:lower16:usCheckVariable
 467 00ea C0F20003 		movt	r3, #:upper16:usCheckVariable
 468 00ee 1A80     		strh	r2, [r3, #0]	@ movhi
 366:App/Common/Minimal/dynamic.c **** 			portEXIT_CRITICAL();
 469              		.loc 1 366 0
 470 00f0 FFF7FEFF 		bl	vPortExitCritical
 471              	.L18:
 367:App/Common/Minimal/dynamic.c **** 		}
 368:App/Common/Minimal/dynamic.c **** 
 369:App/Common/Minimal/dynamic.c **** 		/* Resume the continuous count task and do it all again. */
 370:App/Common/Minimal/dynamic.c **** 		vTaskResume( xContinuousIncrementHandle );
 472              		.loc 1 370 0
 473 00f4 40F20003 		movw	r3, #:lower16:xContinuousIncrementHandle
 474 00f8 C0F20003 		movt	r3, #:upper16:xContinuousIncrementHandle
 475 00fc 1B68     		ldr	r3, [r3, #0]
 476 00fe 1846     		mov	r0, r3
 477 0100 FFF7FEFF 		bl	vTaskResume
 371:App/Common/Minimal/dynamic.c **** 	}
 478              		.loc 1 371 0
 479 0104 83E7     		b	.L19
 480              		.cfi_endproc
 481              	.LFE113:
 483 0106 00BF     		.section	.text.vQueueSendWhenSuspendedTask,"ax",%progbits
 484              		.align	2
 485              		.thumb
 486              		.thumb_func
 488              	vQueueSendWhenSuspendedTask:
 489              	.LFB114:
 372:App/Common/Minimal/dynamic.c **** }
 373:App/Common/Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 374:App/Common/Minimal/dynamic.c **** 
 375:App/Common/Minimal/dynamic.c **** static portTASK_FUNCTION( vQueueSendWhenSuspendedTask, pvParameters )
 376:App/Common/Minimal/dynamic.c **** {
 490              		.loc 1 376 0
 491              		.cfi_startproc
 492              		@ args = 0, pretend = 0, frame = 8
 493              		@ frame_needed = 1, uses_anonymous_args = 0
 494 0000 80B5     		push	{r7, lr}
 495              	.LCFI12:
 496              		.cfi_def_cfa_offset 8
 497              		.cfi_offset 7, -8
 498              		.cfi_offset 14, -4
 499 0002 82B0     		sub	sp, sp, #8
 500              	.LCFI13:
 501              		.cfi_def_cfa_offset 16
 502 0004 00AF     		add	r7, sp, #0
 503              	.LCFI14:
 504              		.cfi_def_cfa_register 7
 505 0006 7860     		str	r0, [r7, #4]
 506              	.L22:
 377:App/Common/Minimal/dynamic.c **** static unsigned long ulValueToSend = ( unsigned long ) 0;
 378:App/Common/Minimal/dynamic.c **** 
 379:App/Common/Minimal/dynamic.c **** 	/* Just to stop warning messages. */
 380:App/Common/Minimal/dynamic.c **** 	( void ) pvParameters;
 381:App/Common/Minimal/dynamic.c **** 
 382:App/Common/Minimal/dynamic.c **** 	for( ;; )
 383:App/Common/Minimal/dynamic.c **** 	{
 384:App/Common/Minimal/dynamic.c **** 		vTaskSuspendAll();
 507              		.loc 1 384 0
 508 0008 FFF7FEFF 		bl	vTaskSuspendAll
 385:App/Common/Minimal/dynamic.c **** 		{
 386:App/Common/Minimal/dynamic.c **** 			/* We must not block while the scheduler is suspended! */
 387:App/Common/Minimal/dynamic.c **** 			if( xQueueSend( xSuspendedTestQueue, ( void * ) &ulValueToSend, priNO_BLOCK ) != pdTRUE )
 509              		.loc 1 387 0
 510 000c 40F20003 		movw	r3, #:lower16:xSuspendedTestQueue
 511 0010 C0F20003 		movt	r3, #:upper16:xSuspendedTestQueue
 512 0014 1B68     		ldr	r3, [r3, #0]
 513 0016 1846     		mov	r0, r3
 514 0018 40F20001 		movw	r1, #:lower16:ulValueToSend.8238
 515 001c C0F20001 		movt	r1, #:upper16:ulValueToSend.8238
 516 0020 4FF00002 		mov	r2, #0
 517 0024 4FF00003 		mov	r3, #0
 518 0028 FFF7FEFF 		bl	xQueueGenericSend
 519 002c 0346     		mov	r3, r0
 520 002e 012B     		cmp	r3, #1
 521 0030 06D0     		beq	.L21
 388:App/Common/Minimal/dynamic.c **** 			{
 389:App/Common/Minimal/dynamic.c **** 				xSuspendedQueueSendError = pdTRUE;
 522              		.loc 1 389 0
 523 0032 40F20003 		movw	r3, #:lower16:xSuspendedQueueSendError
 524 0036 C0F20003 		movt	r3, #:upper16:xSuspendedQueueSendError
 525 003a 4FF00102 		mov	r2, #1
 526 003e 1A60     		str	r2, [r3, #0]
 527              	.L21:
 390:App/Common/Minimal/dynamic.c **** 			}
 391:App/Common/Minimal/dynamic.c **** 		}
 392:App/Common/Minimal/dynamic.c **** 		xTaskResumeAll();
 528              		.loc 1 392 0
 529 0040 FFF7FEFF 		bl	xTaskResumeAll
 393:App/Common/Minimal/dynamic.c **** 
 394:App/Common/Minimal/dynamic.c **** 		vTaskDelay( priSLEEP_TIME );
 530              		.loc 1 394 0
 531 0044 4FF08000 		mov	r0, #128
 532 0048 FFF7FEFF 		bl	vTaskDelay
 395:App/Common/Minimal/dynamic.c **** 
 396:App/Common/Minimal/dynamic.c **** 		++ulValueToSend;
 533              		.loc 1 396 0
 534 004c 40F20003 		movw	r3, #:lower16:ulValueToSend.8238
 535 0050 C0F20003 		movt	r3, #:upper16:ulValueToSend.8238
 536 0054 1B68     		ldr	r3, [r3, #0]
 537 0056 03F10102 		add	r2, r3, #1
 538 005a 40F20003 		movw	r3, #:lower16:ulValueToSend.8238
 539 005e C0F20003 		movt	r3, #:upper16:ulValueToSend.8238
 540 0062 1A60     		str	r2, [r3, #0]
 397:App/Common/Minimal/dynamic.c **** 	}
 541              		.loc 1 397 0
 542 0064 D0E7     		b	.L22
 543              		.cfi_endproc
 544              	.LFE114:
 546 0066 00BF     		.section	.text.vQueueReceiveWhenSuspendedTask,"ax",%progbits
 547              		.align	2
 548              		.thumb
 549              		.thumb_func
 551              	vQueueReceiveWhenSuspendedTask:
 552              	.LFB115:
 398:App/Common/Minimal/dynamic.c **** }
 399:App/Common/Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 400:App/Common/Minimal/dynamic.c **** 
 401:App/Common/Minimal/dynamic.c **** static portTASK_FUNCTION( vQueueReceiveWhenSuspendedTask, pvParameters )
 402:App/Common/Minimal/dynamic.c **** {
 553              		.loc 1 402 0
 554              		.cfi_startproc
 555              		@ args = 0, pretend = 0, frame = 16
 556              		@ frame_needed = 1, uses_anonymous_args = 0
 557 0000 80B5     		push	{r7, lr}
 558              	.LCFI15:
 559              		.cfi_def_cfa_offset 8
 560              		.cfi_offset 7, -8
 561              		.cfi_offset 14, -4
 562 0002 84B0     		sub	sp, sp, #16
 563              	.LCFI16:
 564              		.cfi_def_cfa_offset 24
 565 0004 00AF     		add	r7, sp, #0
 566              	.LCFI17:
 567              		.cfi_def_cfa_register 7
 568 0006 7860     		str	r0, [r7, #4]
 569 0008 00E0     		b	.L25
 570              	.L28:
 403:App/Common/Minimal/dynamic.c **** unsigned long ulReceivedValue;
 404:App/Common/Minimal/dynamic.c **** portBASE_TYPE xGotValue;
 405:App/Common/Minimal/dynamic.c **** 
 406:App/Common/Minimal/dynamic.c **** 	/* Just to stop warning messages. */
 407:App/Common/Minimal/dynamic.c **** 	( void ) pvParameters;
 408:App/Common/Minimal/dynamic.c **** 
 409:App/Common/Minimal/dynamic.c **** 	for( ;; )
 410:App/Common/Minimal/dynamic.c **** 	{
 411:App/Common/Minimal/dynamic.c **** 		do
 412:App/Common/Minimal/dynamic.c **** 		{
 413:App/Common/Minimal/dynamic.c **** 			/* Suspending the scheduler here is fairly pointless and
 414:App/Common/Minimal/dynamic.c **** 			undesirable for a normal application.  It is done here purely
 415:App/Common/Minimal/dynamic.c **** 			to test the scheduler.  The inner xTaskResumeAll() should
 416:App/Common/Minimal/dynamic.c **** 			never return pdTRUE as the scheduler is still locked by the
 417:App/Common/Minimal/dynamic.c **** 			outer call. */
 418:App/Common/Minimal/dynamic.c **** 			vTaskSuspendAll();
 419:App/Common/Minimal/dynamic.c **** 			{
 420:App/Common/Minimal/dynamic.c **** 				vTaskSuspendAll();
 421:App/Common/Minimal/dynamic.c **** 				{
 422:App/Common/Minimal/dynamic.c **** 					xGotValue = xQueueReceive( xSuspendedTestQueue, ( void * ) &ulReceivedValue, priNO_BLOCK );
 423:App/Common/Minimal/dynamic.c **** 				}
 424:App/Common/Minimal/dynamic.c **** 				if( xTaskResumeAll() != pdFALSE )
 425:App/Common/Minimal/dynamic.c **** 				{
 426:App/Common/Minimal/dynamic.c **** 					xSuspendedQueueReceiveError = pdTRUE;
 427:App/Common/Minimal/dynamic.c **** 				}
 428:App/Common/Minimal/dynamic.c **** 			}
 429:App/Common/Minimal/dynamic.c **** 			xTaskResumeAll();
 430:App/Common/Minimal/dynamic.c **** 
 431:App/Common/Minimal/dynamic.c **** 			#if configUSE_PREEMPTION == 0
 432:App/Common/Minimal/dynamic.c **** 			{
 433:App/Common/Minimal/dynamic.c **** 				taskYIELD();
 434:App/Common/Minimal/dynamic.c **** 			}
 435:App/Common/Minimal/dynamic.c **** 			#endif
 436:App/Common/Minimal/dynamic.c **** 
 437:App/Common/Minimal/dynamic.c **** 		} while( xGotValue == pdFALSE );
 438:App/Common/Minimal/dynamic.c **** 
 439:App/Common/Minimal/dynamic.c **** 		if( ulReceivedValue != ulExpectedValue )
 440:App/Common/Minimal/dynamic.c **** 		{
 441:App/Common/Minimal/dynamic.c **** 			xSuspendedQueueReceiveError = pdTRUE;
 442:App/Common/Minimal/dynamic.c **** 		}
 443:App/Common/Minimal/dynamic.c **** 
 444:App/Common/Minimal/dynamic.c **** 		if( xSuspendedQueueReceiveError != pdTRUE )
 445:App/Common/Minimal/dynamic.c **** 		{
 446:App/Common/Minimal/dynamic.c **** 			/* Only increment the variable if an error has not occurred.  This
 447:App/Common/Minimal/dynamic.c **** 			allows xAreDynamicPriorityTasksStillRunning() to check for stalled
 448:App/Common/Minimal/dynamic.c **** 			tasks as well as explicit errors. */
 449:App/Common/Minimal/dynamic.c **** 			++ulExpectedValue;
 450:App/Common/Minimal/dynamic.c **** 		}
 451:App/Common/Minimal/dynamic.c **** 	}
 571              		.loc 1 451 0
 572 000a 00BF     		nop
 573              	.L25:
 418:App/Common/Minimal/dynamic.c **** 			vTaskSuspendAll();
 574              		.loc 1 418 0
 575 000c FFF7FEFF 		bl	vTaskSuspendAll
 420:App/Common/Minimal/dynamic.c **** 				vTaskSuspendAll();
 576              		.loc 1 420 0
 577 0010 FFF7FEFF 		bl	vTaskSuspendAll
 422:App/Common/Minimal/dynamic.c **** 					xGotValue = xQueueReceive( xSuspendedTestQueue, ( void * ) &ulReceivedValue, priNO_BLOCK );
 578              		.loc 1 422 0
 579 0014 40F20003 		movw	r3, #:lower16:xSuspendedTestQueue
 580 0018 C0F20003 		movt	r3, #:upper16:xSuspendedTestQueue
 581 001c 1A68     		ldr	r2, [r3, #0]
 582 001e 07F10803 		add	r3, r7, #8
 583 0022 1046     		mov	r0, r2
 584 0024 1946     		mov	r1, r3
 585 0026 4FF00002 		mov	r2, #0
 586 002a 4FF00003 		mov	r3, #0
 587 002e FFF7FEFF 		bl	xQueueGenericReceive
 588 0032 F860     		str	r0, [r7, #12]
 424:App/Common/Minimal/dynamic.c **** 				if( xTaskResumeAll() != pdFALSE )
 589              		.loc 1 424 0
 590 0034 FFF7FEFF 		bl	xTaskResumeAll
 591 0038 0346     		mov	r3, r0
 592 003a 002B     		cmp	r3, #0
 593 003c 06D0     		beq	.L24
 426:App/Common/Minimal/dynamic.c **** 					xSuspendedQueueReceiveError = pdTRUE;
 594              		.loc 1 426 0
 595 003e 40F20003 		movw	r3, #:lower16:xSuspendedQueueReceiveError
 596 0042 C0F20003 		movt	r3, #:upper16:xSuspendedQueueReceiveError
 597 0046 4FF00102 		mov	r2, #1
 598 004a 1A60     		str	r2, [r3, #0]
 599              	.L24:
 429:App/Common/Minimal/dynamic.c **** 			xTaskResumeAll();
 600              		.loc 1 429 0
 601 004c FFF7FEFF 		bl	xTaskResumeAll
 437:App/Common/Minimal/dynamic.c **** 		} while( xGotValue == pdFALSE );
 602              		.loc 1 437 0
 603 0050 FB68     		ldr	r3, [r7, #12]
 604 0052 002B     		cmp	r3, #0
 605 0054 DAD0     		beq	.L25
 439:App/Common/Minimal/dynamic.c **** 		if( ulReceivedValue != ulExpectedValue )
 606              		.loc 1 439 0
 607 0056 BA68     		ldr	r2, [r7, #8]
 608 0058 40F20003 		movw	r3, #:lower16:ulExpectedValue
 609 005c C0F20003 		movt	r3, #:upper16:ulExpectedValue
 610 0060 1B68     		ldr	r3, [r3, #0]
 611 0062 9A42     		cmp	r2, r3
 612 0064 06D0     		beq	.L26
 441:App/Common/Minimal/dynamic.c **** 			xSuspendedQueueReceiveError = pdTRUE;
 613              		.loc 1 441 0
 614 0066 40F20003 		movw	r3, #:lower16:xSuspendedQueueReceiveError
 615 006a C0F20003 		movt	r3, #:upper16:xSuspendedQueueReceiveError
 616 006e 4FF00102 		mov	r2, #1
 617 0072 1A60     		str	r2, [r3, #0]
 618              	.L26:
 444:App/Common/Minimal/dynamic.c **** 		if( xSuspendedQueueReceiveError != pdTRUE )
 619              		.loc 1 444 0
 620 0074 40F20003 		movw	r3, #:lower16:xSuspendedQueueReceiveError
 621 0078 C0F20003 		movt	r3, #:upper16:xSuspendedQueueReceiveError
 622 007c 1B68     		ldr	r3, [r3, #0]
 623 007e 012B     		cmp	r3, #1
 624 0080 C3D0     		beq	.L28
 449:App/Common/Minimal/dynamic.c **** 			++ulExpectedValue;
 625              		.loc 1 449 0
 626 0082 40F20003 		movw	r3, #:lower16:ulExpectedValue
 627 0086 C0F20003 		movt	r3, #:upper16:ulExpectedValue
 628 008a 1B68     		ldr	r3, [r3, #0]
 629 008c 03F10102 		add	r2, r3, #1
 630 0090 40F20003 		movw	r3, #:lower16:ulExpectedValue
 631 0094 C0F20003 		movt	r3, #:upper16:ulExpectedValue
 632 0098 1A60     		str	r2, [r3, #0]
 633              		.loc 1 451 0
 634 009a B6E7     		b	.L28
 635              		.cfi_endproc
 636              	.LFE115:
 638              		.section	.text.xAreDynamicPriorityTasksStillRunning,"ax",%progbits
 639              		.align	2
 640              		.global	xAreDynamicPriorityTasksStillRunning
 641              		.thumb
 642              		.thumb_func
 644              	xAreDynamicPriorityTasksStillRunning:
 645              	.LFB116:
 452:App/Common/Minimal/dynamic.c **** }
 453:App/Common/Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 454:App/Common/Minimal/dynamic.c **** 
 455:App/Common/Minimal/dynamic.c **** /* Called to check that all the created tasks are still running without error. */
 456:App/Common/Minimal/dynamic.c **** portBASE_TYPE xAreDynamicPriorityTasksStillRunning( void )
 457:App/Common/Minimal/dynamic.c **** {
 646              		.loc 1 457 0
 647              		.cfi_startproc
 648              		@ args = 0, pretend = 0, frame = 8
 649              		@ frame_needed = 1, uses_anonymous_args = 0
 650              		@ link register save eliminated.
 651 0000 80B4     		push	{r7}
 652              	.LCFI18:
 653              		.cfi_def_cfa_offset 4
 654              		.cfi_offset 7, -4
 655 0002 83B0     		sub	sp, sp, #12
 656              	.LCFI19:
 657              		.cfi_def_cfa_offset 16
 658 0004 00AF     		add	r7, sp, #0
 659              	.LCFI20:
 660              		.cfi_def_cfa_register 7
 458:App/Common/Minimal/dynamic.c **** /* Keep a history of the check variables so we know if it has been incremented
 459:App/Common/Minimal/dynamic.c **** since the last call. */
 460:App/Common/Minimal/dynamic.c **** static unsigned short usLastTaskCheck = ( unsigned short ) 0;
 461:App/Common/Minimal/dynamic.c **** static unsigned long ulLastExpectedValue = ( unsigned long ) 0U;
 462:App/Common/Minimal/dynamic.c **** portBASE_TYPE xReturn = pdTRUE;
 661              		.loc 1 462 0
 662 0006 4FF00103 		mov	r3, #1
 663 000a 7B60     		str	r3, [r7, #4]
 463:App/Common/Minimal/dynamic.c **** 
 464:App/Common/Minimal/dynamic.c **** 	/* Check the tasks are still running by ensuring the check variable
 465:App/Common/Minimal/dynamic.c **** 	is still incrementing. */
 466:App/Common/Minimal/dynamic.c **** 
 467:App/Common/Minimal/dynamic.c **** 	if( usCheckVariable == usLastTaskCheck )
 664              		.loc 1 467 0
 665 000c 40F20003 		movw	r3, #:lower16:usCheckVariable
 666 0010 C0F20003 		movt	r3, #:upper16:usCheckVariable
 667 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 668 0016 9AB2     		uxth	r2, r3
 669 0018 40F20003 		movw	r3, #:lower16:usLastTaskCheck.8251
 670 001c C0F20003 		movt	r3, #:upper16:usLastTaskCheck.8251
 671 0020 1B88     		ldrh	r3, [r3, #0]
 672 0022 9A42     		cmp	r2, r3
 673 0024 02D1     		bne	.L30
 468:App/Common/Minimal/dynamic.c **** 	{
 469:App/Common/Minimal/dynamic.c **** 		/* The check has not incremented so an error exists. */
 470:App/Common/Minimal/dynamic.c **** 		xReturn = pdFALSE;
 674              		.loc 1 470 0
 675 0026 4FF00003 		mov	r3, #0
 676 002a 7B60     		str	r3, [r7, #4]
 677              	.L30:
 471:App/Common/Minimal/dynamic.c **** 	}
 472:App/Common/Minimal/dynamic.c **** 
 473:App/Common/Minimal/dynamic.c **** 	if( ulExpectedValue == ulLastExpectedValue )
 678              		.loc 1 473 0
 679 002c 40F20003 		movw	r3, #:lower16:ulExpectedValue
 680 0030 C0F20003 		movt	r3, #:upper16:ulExpectedValue
 681 0034 1A68     		ldr	r2, [r3, #0]
 682 0036 40F20003 		movw	r3, #:lower16:ulLastExpectedValue.8252
 683 003a C0F20003 		movt	r3, #:upper16:ulLastExpectedValue.8252
 684 003e 1B68     		ldr	r3, [r3, #0]
 685 0040 9A42     		cmp	r2, r3
 686 0042 02D1     		bne	.L31
 474:App/Common/Minimal/dynamic.c **** 	{
 475:App/Common/Minimal/dynamic.c **** 		/* The value being received by the queue receive task has not
 476:App/Common/Minimal/dynamic.c **** 		incremented so an error exists. */
 477:App/Common/Minimal/dynamic.c **** 		xReturn = pdFALSE;
 687              		.loc 1 477 0
 688 0044 4FF00003 		mov	r3, #0
 689 0048 7B60     		str	r3, [r7, #4]
 690              	.L31:
 478:App/Common/Minimal/dynamic.c **** 	}
 479:App/Common/Minimal/dynamic.c **** 
 480:App/Common/Minimal/dynamic.c **** 	if( xSuspendedQueueSendError == pdTRUE )
 691              		.loc 1 480 0
 692 004a 40F20003 		movw	r3, #:lower16:xSuspendedQueueSendError
 693 004e C0F20003 		movt	r3, #:upper16:xSuspendedQueueSendError
 694 0052 1B68     		ldr	r3, [r3, #0]
 695 0054 012B     		cmp	r3, #1
 696 0056 02D1     		bne	.L32
 481:App/Common/Minimal/dynamic.c **** 	{
 482:App/Common/Minimal/dynamic.c **** 		xReturn = pdFALSE;
 697              		.loc 1 482 0
 698 0058 4FF00003 		mov	r3, #0
 699 005c 7B60     		str	r3, [r7, #4]
 700              	.L32:
 483:App/Common/Minimal/dynamic.c **** 	}
 484:App/Common/Minimal/dynamic.c **** 
 485:App/Common/Minimal/dynamic.c **** 	if( xSuspendedQueueReceiveError == pdTRUE )
 701              		.loc 1 485 0
 702 005e 40F20003 		movw	r3, #:lower16:xSuspendedQueueReceiveError
 703 0062 C0F20003 		movt	r3, #:upper16:xSuspendedQueueReceiveError
 704 0066 1B68     		ldr	r3, [r3, #0]
 705 0068 012B     		cmp	r3, #1
 706 006a 02D1     		bne	.L33
 486:App/Common/Minimal/dynamic.c **** 	{
 487:App/Common/Minimal/dynamic.c **** 		xReturn = pdFALSE;
 707              		.loc 1 487 0
 708 006c 4FF00003 		mov	r3, #0
 709 0070 7B60     		str	r3, [r7, #4]
 710              	.L33:
 488:App/Common/Minimal/dynamic.c **** 	}
 489:App/Common/Minimal/dynamic.c **** 
 490:App/Common/Minimal/dynamic.c **** 	usLastTaskCheck = usCheckVariable;
 711              		.loc 1 490 0
 712 0072 40F20003 		movw	r3, #:lower16:usCheckVariable
 713 0076 C0F20003 		movt	r3, #:upper16:usCheckVariable
 714 007a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 715 007c 9AB2     		uxth	r2, r3
 716 007e 40F20003 		movw	r3, #:lower16:usLastTaskCheck.8251
 717 0082 C0F20003 		movt	r3, #:upper16:usLastTaskCheck.8251
 718 0086 1A80     		strh	r2, [r3, #0]	@ movhi
 491:App/Common/Minimal/dynamic.c **** 	ulLastExpectedValue = ulExpectedValue;
 719              		.loc 1 491 0
 720 0088 40F20003 		movw	r3, #:lower16:ulExpectedValue
 721 008c C0F20003 		movt	r3, #:upper16:ulExpectedValue
 722 0090 1A68     		ldr	r2, [r3, #0]
 723 0092 40F20003 		movw	r3, #:lower16:ulLastExpectedValue.8252
 724 0096 C0F20003 		movt	r3, #:upper16:ulLastExpectedValue.8252
 725 009a 1A60     		str	r2, [r3, #0]
 492:App/Common/Minimal/dynamic.c **** 
 493:App/Common/Minimal/dynamic.c **** 	return xReturn;
 726              		.loc 1 493 0
 727 009c 7B68     		ldr	r3, [r7, #4]
 494:App/Common/Minimal/dynamic.c **** }
 728              		.loc 1 494 0
 729 009e 1846     		mov	r0, r3
 730 00a0 07F10C07 		add	r7, r7, #12
 731 00a4 BD46     		mov	sp, r7
 732 00a6 80BC     		pop	{r7}
 733 00a8 7047     		bx	lr
 734              		.cfi_endproc
 735              	.LFE116:
 737 00aa 00BF     		.section	.bss.usLastTaskCheck.8251,"aw",%nobits
 738              		.align	1
 741              	usLastTaskCheck.8251:
 742 0000 0000     		.space	2
 743              		.section	.bss.ulLastExpectedValue.8252,"aw",%nobits
 744              		.align	2
 747              	ulLastExpectedValue.8252:
 748 0000 00000000 		.space	4
 749              		.section	.bss.ulValueToSend.8238,"aw",%nobits
 750              		.align	2
 753              	ulValueToSend.8238:
 754 0000 00000000 		.space	4
 755              		.text
 756              	.Letext0:
 757              		.file 2 "/home/thanhtruong/embedded-development/toolchain/gcc-arm-none-eabi-4_7-2013q1/bin/../lib/
 758              		.file 3 "Source/portable/GCC/ARM_CM4F/portmacro.h"
 759              		.file 4 "Source/include/task.h"
 760              		.file 5 "Source/include/queue.h"
 761              		.file 6 "App/STM32F4-Discovery/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 dynamic.c
     /tmp/ccUxp8YD.s:20     .bss.xContinuousIncrementHandle:00000000 $d
     /tmp/ccUxp8YD.s:23     .bss.xContinuousIncrementHandle:00000000 xContinuousIncrementHandle
     /tmp/ccUxp8YD.s:26     .bss.xLimitedIncrementHandle:00000000 $d
     /tmp/ccUxp8YD.s:29     .bss.xLimitedIncrementHandle:00000000 xLimitedIncrementHandle
     /tmp/ccUxp8YD.s:32     .bss.ulCounter:00000000 $d
     /tmp/ccUxp8YD.s:35     .bss.ulCounter:00000000 ulCounter
     /tmp/ccUxp8YD.s:38     .bss.usCheckVariable:00000000 $d
     /tmp/ccUxp8YD.s:41     .bss.usCheckVariable:00000000 usCheckVariable
     /tmp/ccUxp8YD.s:44     .bss.xSuspendedQueueSendError:00000000 $d
     /tmp/ccUxp8YD.s:47     .bss.xSuspendedQueueSendError:00000000 xSuspendedQueueSendError
     /tmp/ccUxp8YD.s:50     .bss.xSuspendedQueueReceiveError:00000000 $d
     /tmp/ccUxp8YD.s:53     .bss.xSuspendedQueueReceiveError:00000000 xSuspendedQueueReceiveError
                            *COM*:00000004 xSuspendedTestQueue
     /tmp/ccUxp8YD.s:57     .bss.ulExpectedValue:00000000 $d
     /tmp/ccUxp8YD.s:60     .bss.ulExpectedValue:00000000 ulExpectedValue
     /tmp/ccUxp8YD.s:63     .rodata:00000000 $d
     /tmp/ccUxp8YD.s:64     .rodata:00000000 .LC0
     /tmp/ccUxp8YD.s:67     .rodata:00000018 .LC1
     /tmp/ccUxp8YD.s:70     .rodata:00000020 .LC2
     /tmp/ccUxp8YD.s:73     .rodata:00000028 .LC3
     /tmp/ccUxp8YD.s:76     .rodata:00000030 .LC4
     /tmp/ccUxp8YD.s:79     .rodata:00000038 .LC5
     /tmp/ccUxp8YD.s:82     .text.vStartDynamicPriorityTasks:00000000 $t
     /tmp/ccUxp8YD.s:87     .text.vStartDynamicPriorityTasks:00000000 vStartDynamicPriorityTasks
     /tmp/ccUxp8YD.s:270    .text.vContinuousIncrementTask:00000000 vContinuousIncrementTask
     /tmp/ccUxp8YD.s:217    .text.vLimitedIncrementTask:00000000 vLimitedIncrementTask
     /tmp/ccUxp8YD.s:350    .text.vCounterControlTask:00000000 vCounterControlTask
     /tmp/ccUxp8YD.s:488    .text.vQueueSendWhenSuspendedTask:00000000 vQueueSendWhenSuspendedTask
     /tmp/ccUxp8YD.s:551    .text.vQueueReceiveWhenSuspendedTask:00000000 vQueueReceiveWhenSuspendedTask
     /tmp/ccUxp8YD.s:213    .text.vLimitedIncrementTask:00000000 $t
     /tmp/ccUxp8YD.s:266    .text.vContinuousIncrementTask:00000000 $t
     /tmp/ccUxp8YD.s:346    .text.vCounterControlTask:00000000 $t
     /tmp/ccUxp8YD.s:484    .text.vQueueSendWhenSuspendedTask:00000000 $t
     /tmp/ccUxp8YD.s:753    .bss.ulValueToSend.8238:00000000 ulValueToSend.8238
     /tmp/ccUxp8YD.s:547    .text.vQueueReceiveWhenSuspendedTask:00000000 $t
     /tmp/ccUxp8YD.s:639    .text.xAreDynamicPriorityTasksStillRunning:00000000 $t
     /tmp/ccUxp8YD.s:644    .text.xAreDynamicPriorityTasksStillRunning:00000000 xAreDynamicPriorityTasksStillRunning
     /tmp/ccUxp8YD.s:741    .bss.usLastTaskCheck.8251:00000000 usLastTaskCheck.8251
     /tmp/ccUxp8YD.s:747    .bss.ulLastExpectedValue.8252:00000000 ulLastExpectedValue.8252
     /tmp/ccUxp8YD.s:738    .bss.usLastTaskCheck.8251:00000000 $d
     /tmp/ccUxp8YD.s:744    .bss.ulLastExpectedValue.8252:00000000 $d
     /tmp/ccUxp8YD.s:750    .bss.ulValueToSend.8238:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
xQueueGenericCreate
vQueueAddToRegistry
xTaskGenericCreate
vTaskSuspend
uxTaskPriorityGet
vTaskPrioritySet
ulPortSetInterruptMask
vTaskResume
vTaskDelay
vTaskSuspendAll
xTaskResumeAll
vPortEnterCritical
vPortExitCritical
xQueueGenericSend
xQueueGenericReceive
