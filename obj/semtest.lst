   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"semtest.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.bss.sCheckVariables,"aw",%nobits
  20              		.align	2
  23              	sCheckVariables:
  24 0000 00000000 		.space	8
  24      00000000 
  25              		.section	.bss.sNextCheckVariable,"aw",%nobits
  26              		.align	1
  29              	sNextCheckVariable:
  30 0000 0000     		.space	2
  31              		.section	.rodata
  32              		.align	2
  33              	.LC0:
  34 0000 506F6C53 		.ascii	"PolSEM1\000"
  34      454D3100 
  35              		.align	2
  36              	.LC1:
  37 0008 506F6C53 		.ascii	"PolSEM2\000"
  37      454D3200 
  38              		.align	2
  39              	.LC2:
  40 0010 426C6B53 		.ascii	"BlkSEM1\000"
  40      454D3100 
  41              		.align	2
  42              	.LC3:
  43 0018 426C6B53 		.ascii	"BlkSEM2\000"
  43      454D3200 
  44              		.align	2
  45              	.LC4:
  46 0020 436F756E 		.ascii	"Counting_Sem_1\000"
  46      74696E67 
  46      5F53656D 
  46      5F3100
  47 002f 00       		.align	2
  48              	.LC5:
  49 0030 436F756E 		.ascii	"Counting_Sem_2\000"
  49      74696E67 
  49      5F53656D 
  49      5F3200
  50 003f 00       		.section	.text.vStartSemaphoreTasks,"ax",%progbits
  51              		.align	2
  52              		.global	vStartSemaphoreTasks
  53              		.thumb
  54              		.thumb_func
  56              	vStartSemaphoreTasks:
  57              	.LFB110:
  58              		.file 1 "App/Common/Minimal/semtest.c"
   1:App/Common/Minimal/semtest.c **** /*
   2:App/Common/Minimal/semtest.c ****     FreeRTOS V7.5.3 - Copyright (C) 2013 Real Time Engineers Ltd. 
   3:App/Common/Minimal/semtest.c ****     All rights reserved
   4:App/Common/Minimal/semtest.c **** 
   5:App/Common/Minimal/semtest.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:App/Common/Minimal/semtest.c **** 
   7:App/Common/Minimal/semtest.c ****     ***************************************************************************
   8:App/Common/Minimal/semtest.c ****      *                                                                       *
   9:App/Common/Minimal/semtest.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:App/Common/Minimal/semtest.c ****      *    robust, strictly quality controlled, supported, and cross          *
  11:App/Common/Minimal/semtest.c ****      *    platform software that has become a de facto standard.             *
  12:App/Common/Minimal/semtest.c ****      *                                                                       *
  13:App/Common/Minimal/semtest.c ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:App/Common/Minimal/semtest.c ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  15:App/Common/Minimal/semtest.c ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:App/Common/Minimal/semtest.c ****      *                                                                       *
  17:App/Common/Minimal/semtest.c ****      *    Thank you!                                                         *
  18:App/Common/Minimal/semtest.c ****      *                                                                       *
  19:App/Common/Minimal/semtest.c ****     ***************************************************************************
  20:App/Common/Minimal/semtest.c **** 
  21:App/Common/Minimal/semtest.c ****     This file is part of the FreeRTOS distribution.
  22:App/Common/Minimal/semtest.c **** 
  23:App/Common/Minimal/semtest.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  24:App/Common/Minimal/semtest.c ****     the terms of the GNU General Public License (version 2) as published by the
  25:App/Common/Minimal/semtest.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:App/Common/Minimal/semtest.c **** 
  27:App/Common/Minimal/semtest.c ****     >>! NOTE: The modification to the GPL is included to allow you to distribute
  28:App/Common/Minimal/semtest.c ****     >>! a combined work that includes FreeRTOS without being obliged to provide
  29:App/Common/Minimal/semtest.c ****     >>! the source code for proprietary components outside of the FreeRTOS
  30:App/Common/Minimal/semtest.c ****     >>! kernel.
  31:App/Common/Minimal/semtest.c **** 
  32:App/Common/Minimal/semtest.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:App/Common/Minimal/semtest.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:App/Common/Minimal/semtest.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:App/Common/Minimal/semtest.c ****     link: http://www.freertos.org/a00114.html
  36:App/Common/Minimal/semtest.c **** 
  37:App/Common/Minimal/semtest.c ****     1 tab == 4 spaces!
  38:App/Common/Minimal/semtest.c **** 
  39:App/Common/Minimal/semtest.c ****     ***************************************************************************
  40:App/Common/Minimal/semtest.c ****      *                                                                       *
  41:App/Common/Minimal/semtest.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:App/Common/Minimal/semtest.c ****      *    not run, what could be wrong?"                                     *
  43:App/Common/Minimal/semtest.c ****      *                                                                       *
  44:App/Common/Minimal/semtest.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  45:App/Common/Minimal/semtest.c ****      *                                                                       *
  46:App/Common/Minimal/semtest.c ****     ***************************************************************************
  47:App/Common/Minimal/semtest.c **** 
  48:App/Common/Minimal/semtest.c ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:App/Common/Minimal/semtest.c ****     license and Real Time Engineers Ltd. contact details.
  50:App/Common/Minimal/semtest.c **** 
  51:App/Common/Minimal/semtest.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:App/Common/Minimal/semtest.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:App/Common/Minimal/semtest.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:App/Common/Minimal/semtest.c **** 
  55:App/Common/Minimal/semtest.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:App/Common/Minimal/semtest.c ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:App/Common/Minimal/semtest.c ****     licenses offer ticketed support, indemnification and middleware.
  58:App/Common/Minimal/semtest.c **** 
  59:App/Common/Minimal/semtest.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:App/Common/Minimal/semtest.c ****     engineered and independently SIL3 certified version for use in safety and
  61:App/Common/Minimal/semtest.c ****     mission critical applications that require provable dependability.
  62:App/Common/Minimal/semtest.c **** 
  63:App/Common/Minimal/semtest.c ****     1 tab == 4 spaces!
  64:App/Common/Minimal/semtest.c **** */
  65:App/Common/Minimal/semtest.c **** 
  66:App/Common/Minimal/semtest.c **** /*
  67:App/Common/Minimal/semtest.c ****  * Creates two sets of two tasks.  The tasks within a set share a variable, access 
  68:App/Common/Minimal/semtest.c ****  * to which is guarded by a semaphore.
  69:App/Common/Minimal/semtest.c ****  * 
  70:App/Common/Minimal/semtest.c ****  * Each task starts by attempting to obtain the semaphore.  On obtaining a 
  71:App/Common/Minimal/semtest.c ****  * semaphore a task checks to ensure that the guarded variable has an expected 
  72:App/Common/Minimal/semtest.c ****  * value.  It then clears the variable to zero before counting it back up to the 
  73:App/Common/Minimal/semtest.c ****  * expected value in increments of 1.  After each increment the variable is checked 
  74:App/Common/Minimal/semtest.c ****  * to ensure it contains the value to which it was just set. When the starting 
  75:App/Common/Minimal/semtest.c ****  * value is again reached the task releases the semaphore giving the other task in 
  76:App/Common/Minimal/semtest.c ****  * the set a chance to do exactly the same thing.  The starting value is high 
  77:App/Common/Minimal/semtest.c ****  * enough to ensure that a tick is likely to occur during the incrementing loop.
  78:App/Common/Minimal/semtest.c ****  *
  79:App/Common/Minimal/semtest.c ****  * An error is flagged if at any time during the process a shared variable is 
  80:App/Common/Minimal/semtest.c ****  * found to have a value other than that expected.  Such an occurrence would 
  81:App/Common/Minimal/semtest.c ****  * suggest an error in the mutual exclusion mechanism by which access to the 
  82:App/Common/Minimal/semtest.c ****  * variable is restricted.
  83:App/Common/Minimal/semtest.c ****  *
  84:App/Common/Minimal/semtest.c ****  * The first set of two tasks poll their semaphore.  The second set use blocking 
  85:App/Common/Minimal/semtest.c ****  * calls.
  86:App/Common/Minimal/semtest.c ****  *
  87:App/Common/Minimal/semtest.c ****  */
  88:App/Common/Minimal/semtest.c **** 
  89:App/Common/Minimal/semtest.c **** 
  90:App/Common/Minimal/semtest.c **** #include <stdlib.h>
  91:App/Common/Minimal/semtest.c **** 
  92:App/Common/Minimal/semtest.c **** /* Scheduler include files. */
  93:App/Common/Minimal/semtest.c **** #include "FreeRTOS.h"
  94:App/Common/Minimal/semtest.c **** #include "task.h"
  95:App/Common/Minimal/semtest.c **** #include "semphr.h"
  96:App/Common/Minimal/semtest.c **** 
  97:App/Common/Minimal/semtest.c **** /* Demo app include files. */
  98:App/Common/Minimal/semtest.c **** #include "semtest.h"
  99:App/Common/Minimal/semtest.c **** 
 100:App/Common/Minimal/semtest.c **** /* The value to which the shared variables are counted. */
 101:App/Common/Minimal/semtest.c **** #define semtstBLOCKING_EXPECTED_VALUE		( ( unsigned long ) 0xfff )
 102:App/Common/Minimal/semtest.c **** #define semtstNON_BLOCKING_EXPECTED_VALUE	( ( unsigned long ) 0xff  )
 103:App/Common/Minimal/semtest.c **** 
 104:App/Common/Minimal/semtest.c **** #define semtstSTACK_SIZE			configMINIMAL_STACK_SIZE
 105:App/Common/Minimal/semtest.c **** 
 106:App/Common/Minimal/semtest.c **** #define semtstNUM_TASKS				( 4 )
 107:App/Common/Minimal/semtest.c **** 
 108:App/Common/Minimal/semtest.c **** #define semtstDELAY_FACTOR			( ( portTickType ) 10 )
 109:App/Common/Minimal/semtest.c **** 
 110:App/Common/Minimal/semtest.c **** /* The task function as described at the top of the file. */
 111:App/Common/Minimal/semtest.c **** static portTASK_FUNCTION_PROTO( prvSemaphoreTest, pvParameters );
 112:App/Common/Minimal/semtest.c **** 
 113:App/Common/Minimal/semtest.c **** /* Structure used to pass parameters to each task. */
 114:App/Common/Minimal/semtest.c **** typedef struct SEMAPHORE_PARAMETERS
 115:App/Common/Minimal/semtest.c **** {
 116:App/Common/Minimal/semtest.c **** 	xSemaphoreHandle xSemaphore;
 117:App/Common/Minimal/semtest.c **** 	volatile unsigned long *pulSharedVariable;
 118:App/Common/Minimal/semtest.c **** 	portTickType xBlockTime;
 119:App/Common/Minimal/semtest.c **** } xSemaphoreParameters;
 120:App/Common/Minimal/semtest.c **** 
 121:App/Common/Minimal/semtest.c **** /* Variables used to check that all the tasks are still running without errors. */
 122:App/Common/Minimal/semtest.c **** static volatile short sCheckVariables[ semtstNUM_TASKS ] = { 0 };
 123:App/Common/Minimal/semtest.c **** static volatile short sNextCheckVariable = 0;
 124:App/Common/Minimal/semtest.c **** 
 125:App/Common/Minimal/semtest.c **** /*-----------------------------------------------------------*/
 126:App/Common/Minimal/semtest.c **** 
 127:App/Common/Minimal/semtest.c **** void vStartSemaphoreTasks( unsigned portBASE_TYPE uxPriority )
 128:App/Common/Minimal/semtest.c **** {
  59              		.loc 1 128 0
  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 24
  62              		@ frame_needed = 1, uses_anonymous_args = 0
  63 0000 80B5     		push	{r7, lr}
  64              	.LCFI0:
  65              		.cfi_def_cfa_offset 8
  66              		.cfi_offset 7, -8
  67              		.cfi_offset 14, -4
  68 0002 8AB0     		sub	sp, sp, #40
  69              	.LCFI1:
  70              		.cfi_def_cfa_offset 48
  71 0004 04AF     		add	r7, sp, #16
  72              	.LCFI2:
  73              		.cfi_def_cfa 7, 32
  74 0006 7860     		str	r0, [r7, #4]
 129:App/Common/Minimal/semtest.c **** xSemaphoreParameters *pxFirstSemaphoreParameters, *pxSecondSemaphoreParameters;
 130:App/Common/Minimal/semtest.c **** const portTickType xBlockTime = ( portTickType ) 100;
  75              		.loc 1 130 0
  76 0008 4FF06403 		mov	r3, #100
  77 000c 7B61     		str	r3, [r7, #20]
 131:App/Common/Minimal/semtest.c **** 
 132:App/Common/Minimal/semtest.c **** 	/* Create the structure used to pass parameters to the first two tasks. */
 133:App/Common/Minimal/semtest.c **** 	pxFirstSemaphoreParameters = ( xSemaphoreParameters * ) pvPortMalloc( sizeof( xSemaphoreParameters
  78              		.loc 1 133 0
  79 000e 4FF00C00 		mov	r0, #12
  80 0012 FFF7FEFF 		bl	pvPortMalloc
  81 0016 3861     		str	r0, [r7, #16]
 134:App/Common/Minimal/semtest.c **** 
 135:App/Common/Minimal/semtest.c **** 	if( pxFirstSemaphoreParameters != NULL )
  82              		.loc 1 135 0
  83 0018 3B69     		ldr	r3, [r7, #16]
  84 001a 002B     		cmp	r3, #0
  85 001c 5FD0     		beq	.L2
 136:App/Common/Minimal/semtest.c **** 	{
 137:App/Common/Minimal/semtest.c **** 		/* Create the semaphore used by the first two tasks. */
 138:App/Common/Minimal/semtest.c **** 		vSemaphoreCreateBinary( pxFirstSemaphoreParameters->xSemaphore );
  86              		.loc 1 138 0
  87 001e 4FF00100 		mov	r0, #1
  88 0022 4FF00001 		mov	r1, #0
  89 0026 4FF00302 		mov	r2, #3
  90 002a FFF7FEFF 		bl	xQueueGenericCreate
  91 002e 0246     		mov	r2, r0
  92 0030 3B69     		ldr	r3, [r7, #16]
  93 0032 1A60     		str	r2, [r3, #0]
  94 0034 3B69     		ldr	r3, [r7, #16]
  95 0036 1B68     		ldr	r3, [r3, #0]
  96 0038 002B     		cmp	r3, #0
  97 003a 0AD0     		beq	.L3
  98              		.loc 1 138 0 is_stmt 0 discriminator 1
  99 003c 3B69     		ldr	r3, [r7, #16]
 100 003e 1B68     		ldr	r3, [r3, #0]
 101 0040 1846     		mov	r0, r3
 102 0042 4FF00001 		mov	r1, #0
 103 0046 4FF00002 		mov	r2, #0
 104 004a 4FF00003 		mov	r3, #0
 105 004e FFF7FEFF 		bl	xQueueGenericSend
 106              	.L3:
 139:App/Common/Minimal/semtest.c **** 
 140:App/Common/Minimal/semtest.c **** 		if( pxFirstSemaphoreParameters->xSemaphore != NULL )
 107              		.loc 1 140 0 is_stmt 1
 108 0052 3B69     		ldr	r3, [r7, #16]
 109 0054 1B68     		ldr	r3, [r3, #0]
 110 0056 002B     		cmp	r3, #0
 111 0058 41D0     		beq	.L2
 141:App/Common/Minimal/semtest.c **** 		{
 142:App/Common/Minimal/semtest.c **** 			/* Create the variable which is to be shared by the first two tasks. */
 143:App/Common/Minimal/semtest.c **** 			pxFirstSemaphoreParameters->pulSharedVariable = ( unsigned long * ) pvPortMalloc( sizeof( unsign
 112              		.loc 1 143 0
 113 005a 4FF00400 		mov	r0, #4
 114 005e FFF7FEFF 		bl	pvPortMalloc
 115 0062 0246     		mov	r2, r0
 116 0064 3B69     		ldr	r3, [r7, #16]
 117 0066 5A60     		str	r2, [r3, #4]
 144:App/Common/Minimal/semtest.c **** 
 145:App/Common/Minimal/semtest.c **** 			/* Initialise the share variable to the value the tasks expect. */
 146:App/Common/Minimal/semtest.c **** 			*( pxFirstSemaphoreParameters->pulSharedVariable ) = semtstNON_BLOCKING_EXPECTED_VALUE;
 118              		.loc 1 146 0
 119 0068 3B69     		ldr	r3, [r7, #16]
 120 006a 5B68     		ldr	r3, [r3, #4]
 121 006c 4FF0FF02 		mov	r2, #255
 122 0070 1A60     		str	r2, [r3, #0]
 147:App/Common/Minimal/semtest.c **** 
 148:App/Common/Minimal/semtest.c **** 			/* The first two tasks do not block on semaphore calls. */
 149:App/Common/Minimal/semtest.c **** 			pxFirstSemaphoreParameters->xBlockTime = ( portTickType ) 0;
 123              		.loc 1 149 0
 124 0072 3B69     		ldr	r3, [r7, #16]
 125 0074 4FF00002 		mov	r2, #0
 126 0078 9A60     		str	r2, [r3, #8]
 150:App/Common/Minimal/semtest.c **** 
 151:App/Common/Minimal/semtest.c **** 			/* Spawn the first two tasks.  As they poll they operate at the idle priority. */
 152:App/Common/Minimal/semtest.c **** 			xTaskCreate( prvSemaphoreTest, ( signed char * ) "PolSEM1", semtstSTACK_SIZE, ( void * ) pxFirst
 127              		.loc 1 152 0
 128 007a 4FF00003 		mov	r3, #0
 129 007e 0093     		str	r3, [sp, #0]
 130 0080 4FF00003 		mov	r3, #0
 131 0084 0193     		str	r3, [sp, #4]
 132 0086 4FF00003 		mov	r3, #0
 133 008a 0293     		str	r3, [sp, #8]
 134 008c 4FF00003 		mov	r3, #0
 135 0090 0393     		str	r3, [sp, #12]
 136 0092 40F20000 		movw	r0, #:lower16:prvSemaphoreTest
 137 0096 C0F20000 		movt	r0, #:upper16:prvSemaphoreTest
 138 009a 40F20001 		movw	r1, #:lower16:.LC0
 139 009e C0F20001 		movt	r1, #:upper16:.LC0
 140 00a2 4FF08202 		mov	r2, #130
 141 00a6 3B69     		ldr	r3, [r7, #16]
 142 00a8 FFF7FEFF 		bl	xTaskGenericCreate
 153:App/Common/Minimal/semtest.c **** 			xTaskCreate( prvSemaphoreTest, ( signed char * ) "PolSEM2", semtstSTACK_SIZE, ( void * ) pxFirst
 143              		.loc 1 153 0
 144 00ac 4FF00003 		mov	r3, #0
 145 00b0 0093     		str	r3, [sp, #0]
 146 00b2 4FF00003 		mov	r3, #0
 147 00b6 0193     		str	r3, [sp, #4]
 148 00b8 4FF00003 		mov	r3, #0
 149 00bc 0293     		str	r3, [sp, #8]
 150 00be 4FF00003 		mov	r3, #0
 151 00c2 0393     		str	r3, [sp, #12]
 152 00c4 40F20000 		movw	r0, #:lower16:prvSemaphoreTest
 153 00c8 C0F20000 		movt	r0, #:upper16:prvSemaphoreTest
 154 00cc 40F20001 		movw	r1, #:lower16:.LC1
 155 00d0 C0F20001 		movt	r1, #:upper16:.LC1
 156 00d4 4FF08202 		mov	r2, #130
 157 00d8 3B69     		ldr	r3, [r7, #16]
 158 00da FFF7FEFF 		bl	xTaskGenericCreate
 159              	.L2:
 154:App/Common/Minimal/semtest.c **** 		}
 155:App/Common/Minimal/semtest.c **** 	}
 156:App/Common/Minimal/semtest.c **** 
 157:App/Common/Minimal/semtest.c **** 	/* Do exactly the same to create the second set of tasks, only this time 
 158:App/Common/Minimal/semtest.c **** 	provide a block time for the semaphore calls. */
 159:App/Common/Minimal/semtest.c **** 	pxSecondSemaphoreParameters = ( xSemaphoreParameters * ) pvPortMalloc( sizeof( xSemaphoreParameter
 160              		.loc 1 159 0
 161 00de 4FF00C00 		mov	r0, #12
 162 00e2 FFF7FEFF 		bl	pvPortMalloc
 163 00e6 F860     		str	r0, [r7, #12]
 160:App/Common/Minimal/semtest.c **** 	if( pxSecondSemaphoreParameters != NULL )
 164              		.loc 1 160 0
 165 00e8 FB68     		ldr	r3, [r7, #12]
 166 00ea 002B     		cmp	r3, #0
 167 00ec 5CD0     		beq	.L4
 161:App/Common/Minimal/semtest.c **** 	{
 162:App/Common/Minimal/semtest.c **** 		vSemaphoreCreateBinary( pxSecondSemaphoreParameters->xSemaphore );
 168              		.loc 1 162 0
 169 00ee 4FF00100 		mov	r0, #1
 170 00f2 4FF00001 		mov	r1, #0
 171 00f6 4FF00302 		mov	r2, #3
 172 00fa FFF7FEFF 		bl	xQueueGenericCreate
 173 00fe 0246     		mov	r2, r0
 174 0100 FB68     		ldr	r3, [r7, #12]
 175 0102 1A60     		str	r2, [r3, #0]
 176 0104 FB68     		ldr	r3, [r7, #12]
 177 0106 1B68     		ldr	r3, [r3, #0]
 178 0108 002B     		cmp	r3, #0
 179 010a 0AD0     		beq	.L5
 180              		.loc 1 162 0 is_stmt 0 discriminator 1
 181 010c FB68     		ldr	r3, [r7, #12]
 182 010e 1B68     		ldr	r3, [r3, #0]
 183 0110 1846     		mov	r0, r3
 184 0112 4FF00001 		mov	r1, #0
 185 0116 4FF00002 		mov	r2, #0
 186 011a 4FF00003 		mov	r3, #0
 187 011e FFF7FEFF 		bl	xQueueGenericSend
 188              	.L5:
 163:App/Common/Minimal/semtest.c **** 
 164:App/Common/Minimal/semtest.c **** 		if( pxSecondSemaphoreParameters->xSemaphore != NULL )
 189              		.loc 1 164 0 is_stmt 1
 190 0122 FB68     		ldr	r3, [r7, #12]
 191 0124 1B68     		ldr	r3, [r3, #0]
 192 0126 002B     		cmp	r3, #0
 193 0128 3ED0     		beq	.L4
 165:App/Common/Minimal/semtest.c **** 		{
 166:App/Common/Minimal/semtest.c **** 			pxSecondSemaphoreParameters->pulSharedVariable = ( unsigned long * ) pvPortMalloc( sizeof( unsig
 194              		.loc 1 166 0
 195 012a 4FF00400 		mov	r0, #4
 196 012e FFF7FEFF 		bl	pvPortMalloc
 197 0132 0246     		mov	r2, r0
 198 0134 FB68     		ldr	r3, [r7, #12]
 199 0136 5A60     		str	r2, [r3, #4]
 167:App/Common/Minimal/semtest.c **** 			*( pxSecondSemaphoreParameters->pulSharedVariable ) = semtstBLOCKING_EXPECTED_VALUE;
 200              		.loc 1 167 0
 201 0138 FB68     		ldr	r3, [r7, #12]
 202 013a 5B68     		ldr	r3, [r3, #4]
 203 013c 40F6FF72 		movw	r2, #4095
 204 0140 1A60     		str	r2, [r3, #0]
 168:App/Common/Minimal/semtest.c **** 			pxSecondSemaphoreParameters->xBlockTime = xBlockTime / portTICK_RATE_MS;
 205              		.loc 1 168 0
 206 0142 FB68     		ldr	r3, [r7, #12]
 207 0144 7A69     		ldr	r2, [r7, #20]
 208 0146 9A60     		str	r2, [r3, #8]
 169:App/Common/Minimal/semtest.c **** 
 170:App/Common/Minimal/semtest.c **** 			xTaskCreate( prvSemaphoreTest, ( signed char * ) "BlkSEM1", semtstSTACK_SIZE, ( void * ) pxSecon
 209              		.loc 1 170 0
 210 0148 7B68     		ldr	r3, [r7, #4]
 211 014a 0093     		str	r3, [sp, #0]
 212 014c 4FF00003 		mov	r3, #0
 213 0150 0193     		str	r3, [sp, #4]
 214 0152 4FF00003 		mov	r3, #0
 215 0156 0293     		str	r3, [sp, #8]
 216 0158 4FF00003 		mov	r3, #0
 217 015c 0393     		str	r3, [sp, #12]
 218 015e 40F20000 		movw	r0, #:lower16:prvSemaphoreTest
 219 0162 C0F20000 		movt	r0, #:upper16:prvSemaphoreTest
 220 0166 40F20001 		movw	r1, #:lower16:.LC2
 221 016a C0F20001 		movt	r1, #:upper16:.LC2
 222 016e 4FF08202 		mov	r2, #130
 223 0172 FB68     		ldr	r3, [r7, #12]
 224 0174 FFF7FEFF 		bl	xTaskGenericCreate
 171:App/Common/Minimal/semtest.c **** 			xTaskCreate( prvSemaphoreTest, ( signed char * ) "BlkSEM2", semtstSTACK_SIZE, ( void * ) pxSecon
 225              		.loc 1 171 0
 226 0178 7B68     		ldr	r3, [r7, #4]
 227 017a 0093     		str	r3, [sp, #0]
 228 017c 4FF00003 		mov	r3, #0
 229 0180 0193     		str	r3, [sp, #4]
 230 0182 4FF00003 		mov	r3, #0
 231 0186 0293     		str	r3, [sp, #8]
 232 0188 4FF00003 		mov	r3, #0
 233 018c 0393     		str	r3, [sp, #12]
 234 018e 40F20000 		movw	r0, #:lower16:prvSemaphoreTest
 235 0192 C0F20000 		movt	r0, #:upper16:prvSemaphoreTest
 236 0196 40F20001 		movw	r1, #:lower16:.LC3
 237 019a C0F20001 		movt	r1, #:upper16:.LC3
 238 019e 4FF08202 		mov	r2, #130
 239 01a2 FB68     		ldr	r3, [r7, #12]
 240 01a4 FFF7FEFF 		bl	xTaskGenericCreate
 241              	.L4:
 172:App/Common/Minimal/semtest.c **** 		}
 173:App/Common/Minimal/semtest.c **** 	}
 174:App/Common/Minimal/semtest.c **** 
 175:App/Common/Minimal/semtest.c **** 	/* vQueueAddToRegistry() adds the semaphore to the registry, if one is
 176:App/Common/Minimal/semtest.c **** 	in use.  The registry is provided as a means for kernel aware 
 177:App/Common/Minimal/semtest.c **** 	debuggers to locate semaphores and has no purpose if a kernel aware debugger
 178:App/Common/Minimal/semtest.c **** 	is not being used.  The call to vQueueAddToRegistry() will be removed
 179:App/Common/Minimal/semtest.c **** 	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
 180:App/Common/Minimal/semtest.c **** 	defined to be less than 1. */
 181:App/Common/Minimal/semtest.c **** 	vQueueAddToRegistry( ( xQueueHandle ) pxFirstSemaphoreParameters->xSemaphore, ( signed char * ) "C
 242              		.loc 1 181 0
 243 01a8 3B69     		ldr	r3, [r7, #16]
 244 01aa 1B68     		ldr	r3, [r3, #0]
 245 01ac 1846     		mov	r0, r3
 246 01ae 40F20001 		movw	r1, #:lower16:.LC4
 247 01b2 C0F20001 		movt	r1, #:upper16:.LC4
 248 01b6 FFF7FEFF 		bl	vQueueAddToRegistry
 182:App/Common/Minimal/semtest.c **** 	vQueueAddToRegistry( ( xQueueHandle ) pxSecondSemaphoreParameters->xSemaphore, ( signed char * ) "
 249              		.loc 1 182 0
 250 01ba FB68     		ldr	r3, [r7, #12]
 251 01bc 1B68     		ldr	r3, [r3, #0]
 252 01be 1846     		mov	r0, r3
 253 01c0 40F20001 		movw	r1, #:lower16:.LC5
 254 01c4 C0F20001 		movt	r1, #:upper16:.LC5
 255 01c8 FFF7FEFF 		bl	vQueueAddToRegistry
 183:App/Common/Minimal/semtest.c **** }
 256              		.loc 1 183 0
 257 01cc 07F11807 		add	r7, r7, #24
 258 01d0 BD46     		mov	sp, r7
 259 01d2 80BD     		pop	{r7, pc}
 260              		.cfi_endproc
 261              	.LFE110:
 263              		.section	.text.prvSemaphoreTest,"ax",%progbits
 264              		.align	2
 265              		.thumb
 266              		.thumb_func
 268              	prvSemaphoreTest:
 269              	.LFB111:
 184:App/Common/Minimal/semtest.c **** /*-----------------------------------------------------------*/
 185:App/Common/Minimal/semtest.c **** 
 186:App/Common/Minimal/semtest.c **** static portTASK_FUNCTION( prvSemaphoreTest, pvParameters )
 187:App/Common/Minimal/semtest.c **** {
 270              		.loc 1 187 0
 271              		.cfi_startproc
 272              		@ args = 0, pretend = 0, frame = 32
 273              		@ frame_needed = 1, uses_anonymous_args = 0
 274 0000 80B5     		push	{r7, lr}
 275              	.LCFI3:
 276              		.cfi_def_cfa_offset 8
 277              		.cfi_offset 7, -8
 278              		.cfi_offset 14, -4
 279 0002 88B0     		sub	sp, sp, #32
 280              	.LCFI4:
 281              		.cfi_def_cfa_offset 40
 282 0004 00AF     		add	r7, sp, #0
 283              	.LCFI5:
 284              		.cfi_def_cfa_register 7
 285 0006 7860     		str	r0, [r7, #4]
 188:App/Common/Minimal/semtest.c **** xSemaphoreParameters *pxParameters;
 189:App/Common/Minimal/semtest.c **** volatile unsigned long *pulSharedVariable, ulExpectedValue;
 190:App/Common/Minimal/semtest.c **** unsigned long ulCounter;
 191:App/Common/Minimal/semtest.c **** short sError = pdFALSE, sCheckVariableToUse;
 286              		.loc 1 191 0
 287 0008 4FF00003 		mov	r3, #0
 288 000c 7B83     		strh	r3, [r7, #26]	@ movhi
 192:App/Common/Minimal/semtest.c **** 
 193:App/Common/Minimal/semtest.c **** 	/* See which check variable to use.  sNextCheckVariable is not semaphore 
 194:App/Common/Minimal/semtest.c **** 	protected! */
 195:App/Common/Minimal/semtest.c **** 	portENTER_CRITICAL();
 289              		.loc 1 195 0
 290 000e FFF7FEFF 		bl	vPortEnterCritical
 196:App/Common/Minimal/semtest.c **** 		sCheckVariableToUse = sNextCheckVariable;
 291              		.loc 1 196 0
 292 0012 40F20003 		movw	r3, #:lower16:sNextCheckVariable
 293 0016 C0F20003 		movt	r3, #:upper16:sNextCheckVariable
 294 001a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 295 001c 3B83     		strh	r3, [r7, #24]	@ movhi
 197:App/Common/Minimal/semtest.c **** 		sNextCheckVariable++;
 296              		.loc 1 197 0
 297 001e 40F20003 		movw	r3, #:lower16:sNextCheckVariable
 298 0022 C0F20003 		movt	r3, #:upper16:sNextCheckVariable
 299 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 300 0028 9BB2     		uxth	r3, r3
 301 002a 03F10103 		add	r3, r3, #1
 302 002e 9AB2     		uxth	r2, r3
 303 0030 40F20003 		movw	r3, #:lower16:sNextCheckVariable
 304 0034 C0F20003 		movt	r3, #:upper16:sNextCheckVariable
 305 0038 1A80     		strh	r2, [r3, #0]	@ movhi
 198:App/Common/Minimal/semtest.c **** 	portEXIT_CRITICAL();
 306              		.loc 1 198 0
 307 003a FFF7FEFF 		bl	vPortExitCritical
 199:App/Common/Minimal/semtest.c **** 
 200:App/Common/Minimal/semtest.c **** 	/* A structure is passed in as the parameter.  This contains the shared 
 201:App/Common/Minimal/semtest.c **** 	variable being guarded. */
 202:App/Common/Minimal/semtest.c **** 	pxParameters = ( xSemaphoreParameters * ) pvParameters;
 308              		.loc 1 202 0
 309 003e 7B68     		ldr	r3, [r7, #4]
 310 0040 7B61     		str	r3, [r7, #20]
 203:App/Common/Minimal/semtest.c **** 	pulSharedVariable = pxParameters->pulSharedVariable;
 311              		.loc 1 203 0
 312 0042 7B69     		ldr	r3, [r7, #20]
 313 0044 5B68     		ldr	r3, [r3, #4]
 314 0046 3B61     		str	r3, [r7, #16]
 204:App/Common/Minimal/semtest.c **** 
 205:App/Common/Minimal/semtest.c **** 	/* If we are blocking we use a much higher count to ensure loads of context
 206:App/Common/Minimal/semtest.c **** 	switches occur during the count. */
 207:App/Common/Minimal/semtest.c **** 	if( pxParameters->xBlockTime > ( portTickType ) 0 )
 315              		.loc 1 207 0
 316 0048 7B69     		ldr	r3, [r7, #20]
 317 004a 9B68     		ldr	r3, [r3, #8]
 318 004c 002B     		cmp	r3, #0
 319 004e 03D0     		beq	.L7
 208:App/Common/Minimal/semtest.c **** 	{
 209:App/Common/Minimal/semtest.c **** 		ulExpectedValue = semtstBLOCKING_EXPECTED_VALUE;
 320              		.loc 1 209 0
 321 0050 40F6FF73 		movw	r3, #4095
 322 0054 FB60     		str	r3, [r7, #12]
 323 0056 04E0     		b	.L8
 324              	.L7:
 210:App/Common/Minimal/semtest.c **** 	}
 211:App/Common/Minimal/semtest.c **** 	else
 212:App/Common/Minimal/semtest.c **** 	{
 213:App/Common/Minimal/semtest.c **** 		ulExpectedValue = semtstNON_BLOCKING_EXPECTED_VALUE;
 325              		.loc 1 213 0
 326 0058 4FF0FF03 		mov	r3, #255
 327 005c FB60     		str	r3, [r7, #12]
 328 005e 00E0     		b	.L8
 329              	.L17:
 214:App/Common/Minimal/semtest.c **** 	}
 215:App/Common/Minimal/semtest.c **** 
 216:App/Common/Minimal/semtest.c **** 	for( ;; )
 217:App/Common/Minimal/semtest.c **** 	{
 218:App/Common/Minimal/semtest.c **** 		/* Try to obtain the semaphore. */
 219:App/Common/Minimal/semtest.c **** 		if( xSemaphoreTake( pxParameters->xSemaphore, pxParameters->xBlockTime ) == pdPASS )
 220:App/Common/Minimal/semtest.c **** 		{
 221:App/Common/Minimal/semtest.c **** 			/* We have the semaphore and so expect any other tasks using the
 222:App/Common/Minimal/semtest.c **** 			shared variable to have left it in the state we expect to find
 223:App/Common/Minimal/semtest.c **** 			it. */
 224:App/Common/Minimal/semtest.c **** 			if( *pulSharedVariable != ulExpectedValue )
 225:App/Common/Minimal/semtest.c **** 			{
 226:App/Common/Minimal/semtest.c **** 				sError = pdTRUE;
 227:App/Common/Minimal/semtest.c **** 			}
 228:App/Common/Minimal/semtest.c **** 			
 229:App/Common/Minimal/semtest.c **** 			/* Clear the variable, then count it back up to the expected value
 230:App/Common/Minimal/semtest.c **** 			before releasing the semaphore.  Would expect a context switch or
 231:App/Common/Minimal/semtest.c **** 			two during this time. */
 232:App/Common/Minimal/semtest.c **** 			for( ulCounter = ( unsigned long ) 0; ulCounter <= ulExpectedValue; ulCounter++ )
 233:App/Common/Minimal/semtest.c **** 			{
 234:App/Common/Minimal/semtest.c **** 				*pulSharedVariable = ulCounter;
 235:App/Common/Minimal/semtest.c **** 				if( *pulSharedVariable != ulCounter )
 236:App/Common/Minimal/semtest.c **** 				{
 237:App/Common/Minimal/semtest.c **** 					sError = pdTRUE;
 238:App/Common/Minimal/semtest.c **** 				}
 239:App/Common/Minimal/semtest.c **** 			}
 240:App/Common/Minimal/semtest.c **** 
 241:App/Common/Minimal/semtest.c **** 			/* Release the semaphore, and if no errors have occurred increment the check
 242:App/Common/Minimal/semtest.c **** 			variable. */
 243:App/Common/Minimal/semtest.c **** 			if(	xSemaphoreGive( pxParameters->xSemaphore ) == pdFALSE )
 244:App/Common/Minimal/semtest.c **** 			{
 245:App/Common/Minimal/semtest.c **** 				sError = pdTRUE;
 246:App/Common/Minimal/semtest.c **** 			}
 247:App/Common/Minimal/semtest.c **** 
 248:App/Common/Minimal/semtest.c **** 			if( sError == pdFALSE )
 249:App/Common/Minimal/semtest.c **** 			{
 250:App/Common/Minimal/semtest.c **** 				if( sCheckVariableToUse < semtstNUM_TASKS )
 251:App/Common/Minimal/semtest.c **** 				{
 252:App/Common/Minimal/semtest.c **** 					( sCheckVariables[ sCheckVariableToUse ] )++;
 253:App/Common/Minimal/semtest.c **** 				}
 254:App/Common/Minimal/semtest.c **** 			}
 255:App/Common/Minimal/semtest.c **** 
 256:App/Common/Minimal/semtest.c **** 			/* If we have a block time then we are running at a priority higher
 257:App/Common/Minimal/semtest.c **** 			than the idle priority.  This task takes a long time to complete
 258:App/Common/Minimal/semtest.c **** 			a cycle	(deliberately so to test the guarding) so will be starving
 259:App/Common/Minimal/semtest.c **** 			out lower priority tasks.  Block for some time to allow give lower
 260:App/Common/Minimal/semtest.c **** 			priority tasks some processor time. */
 261:App/Common/Minimal/semtest.c **** 			vTaskDelay( pxParameters->xBlockTime * semtstDELAY_FACTOR );
 262:App/Common/Minimal/semtest.c **** 		}
 263:App/Common/Minimal/semtest.c **** 		else
 264:App/Common/Minimal/semtest.c **** 		{
 265:App/Common/Minimal/semtest.c **** 			if( pxParameters->xBlockTime == ( portTickType ) 0 )
 266:App/Common/Minimal/semtest.c **** 			{
 267:App/Common/Minimal/semtest.c **** 				/* We have not got the semaphore yet, so no point using the
 268:App/Common/Minimal/semtest.c **** 				processor.  We are not blocking when attempting to obtain the
 269:App/Common/Minimal/semtest.c **** 				semaphore. */
 270:App/Common/Minimal/semtest.c **** 				taskYIELD();
 271:App/Common/Minimal/semtest.c **** 			}
 272:App/Common/Minimal/semtest.c **** 		}
 273:App/Common/Minimal/semtest.c **** 	}
 330              		.loc 1 273 0
 331 0060 00BF     		nop
 332              	.L8:
 219:App/Common/Minimal/semtest.c **** 		if( xSemaphoreTake( pxParameters->xSemaphore, pxParameters->xBlockTime ) == pdPASS )
 333              		.loc 1 219 0
 334 0062 7B69     		ldr	r3, [r7, #20]
 335 0064 1A68     		ldr	r2, [r3, #0]
 336 0066 7B69     		ldr	r3, [r7, #20]
 337 0068 9B68     		ldr	r3, [r3, #8]
 338 006a 1046     		mov	r0, r2
 339 006c 4FF00001 		mov	r1, #0
 340 0070 1A46     		mov	r2, r3
 341 0072 4FF00003 		mov	r3, #0
 342 0076 FFF7FEFF 		bl	xQueueGenericReceive
 343 007a 0346     		mov	r3, r0
 344 007c 012B     		cmp	r3, #1
 345 007e 55D1     		bne	.L9
 224:App/Common/Minimal/semtest.c **** 			if( *pulSharedVariable != ulExpectedValue )
 346              		.loc 1 224 0
 347 0080 3B69     		ldr	r3, [r7, #16]
 348 0082 1A68     		ldr	r2, [r3, #0]
 349 0084 FB68     		ldr	r3, [r7, #12]
 350 0086 9A42     		cmp	r2, r3
 351 0088 02D0     		beq	.L10
 226:App/Common/Minimal/semtest.c **** 				sError = pdTRUE;
 352              		.loc 1 226 0
 353 008a 4FF00103 		mov	r3, #1
 354 008e 7B83     		strh	r3, [r7, #26]	@ movhi
 355              	.L10:
 232:App/Common/Minimal/semtest.c **** 			for( ulCounter = ( unsigned long ) 0; ulCounter <= ulExpectedValue; ulCounter++ )
 356              		.loc 1 232 0
 357 0090 4FF00003 		mov	r3, #0
 358 0094 FB61     		str	r3, [r7, #28]
 359 0096 0EE0     		b	.L11
 360              	.L13:
 234:App/Common/Minimal/semtest.c **** 				*pulSharedVariable = ulCounter;
 361              		.loc 1 234 0
 362 0098 3B69     		ldr	r3, [r7, #16]
 363 009a FA69     		ldr	r2, [r7, #28]
 364 009c 1A60     		str	r2, [r3, #0]
 235:App/Common/Minimal/semtest.c **** 				if( *pulSharedVariable != ulCounter )
 365              		.loc 1 235 0
 366 009e 3B69     		ldr	r3, [r7, #16]
 367 00a0 1A68     		ldr	r2, [r3, #0]
 368 00a2 FB69     		ldr	r3, [r7, #28]
 369 00a4 9A42     		cmp	r2, r3
 370 00a6 02D0     		beq	.L12
 237:App/Common/Minimal/semtest.c **** 					sError = pdTRUE;
 371              		.loc 1 237 0
 372 00a8 4FF00103 		mov	r3, #1
 373 00ac 7B83     		strh	r3, [r7, #26]	@ movhi
 374              	.L12:
 232:App/Common/Minimal/semtest.c **** 			for( ulCounter = ( unsigned long ) 0; ulCounter <= ulExpectedValue; ulCounter++ )
 375              		.loc 1 232 0
 376 00ae FB69     		ldr	r3, [r7, #28]
 377 00b0 03F10103 		add	r3, r3, #1
 378 00b4 FB61     		str	r3, [r7, #28]
 379              	.L11:
 232:App/Common/Minimal/semtest.c **** 			for( ulCounter = ( unsigned long ) 0; ulCounter <= ulExpectedValue; ulCounter++ )
 380              		.loc 1 232 0 is_stmt 0 discriminator 1
 381 00b6 FB68     		ldr	r3, [r7, #12]
 382 00b8 FA69     		ldr	r2, [r7, #28]
 383 00ba 9A42     		cmp	r2, r3
 384 00bc ECD9     		bls	.L13
 243:App/Common/Minimal/semtest.c **** 			if(	xSemaphoreGive( pxParameters->xSemaphore ) == pdFALSE )
 385              		.loc 1 243 0 is_stmt 1
 386 00be 7B69     		ldr	r3, [r7, #20]
 387 00c0 1B68     		ldr	r3, [r3, #0]
 388 00c2 1846     		mov	r0, r3
 389 00c4 4FF00001 		mov	r1, #0
 390 00c8 4FF00002 		mov	r2, #0
 391 00cc 4FF00003 		mov	r3, #0
 392 00d0 FFF7FEFF 		bl	xQueueGenericSend
 393 00d4 0346     		mov	r3, r0
 394 00d6 002B     		cmp	r3, #0
 395 00d8 02D1     		bne	.L14
 245:App/Common/Minimal/semtest.c **** 				sError = pdTRUE;
 396              		.loc 1 245 0
 397 00da 4FF00103 		mov	r3, #1
 398 00de 7B83     		strh	r3, [r7, #26]	@ movhi
 399              	.L14:
 248:App/Common/Minimal/semtest.c **** 			if( sError == pdFALSE )
 400              		.loc 1 248 0
 401 00e0 B7F91A30 		ldrsh	r3, [r7, #26]
 402 00e4 002B     		cmp	r3, #0
 403 00e6 15D1     		bne	.L15
 250:App/Common/Minimal/semtest.c **** 				if( sCheckVariableToUse < semtstNUM_TASKS )
 404              		.loc 1 250 0
 405 00e8 B7F91830 		ldrsh	r3, [r7, #24]
 406 00ec 032B     		cmp	r3, #3
 407 00ee 11DC     		bgt	.L15
 252:App/Common/Minimal/semtest.c **** 					( sCheckVariables[ sCheckVariableToUse ] )++;
 408              		.loc 1 252 0
 409 00f0 B7F91820 		ldrsh	r2, [r7, #24]
 410 00f4 40F20003 		movw	r3, #:lower16:sCheckVariables
 411 00f8 C0F20003 		movt	r3, #:upper16:sCheckVariables
 412 00fc 33F81230 		ldrh	r3, [r3, r2, lsl #1]	@ movhi
 413 0100 9BB2     		uxth	r3, r3
 414 0102 03F10103 		add	r3, r3, #1
 415 0106 99B2     		uxth	r1, r3
 416 0108 40F20003 		movw	r3, #:lower16:sCheckVariables
 417 010c C0F20003 		movt	r3, #:upper16:sCheckVariables
 418 0110 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 419              	.L15:
 261:App/Common/Minimal/semtest.c **** 			vTaskDelay( pxParameters->xBlockTime * semtstDELAY_FACTOR );
 420              		.loc 1 261 0
 421 0114 7B69     		ldr	r3, [r7, #20]
 422 0116 9A68     		ldr	r2, [r3, #8]
 423 0118 1346     		mov	r3, r2
 424 011a 4FEA8303 		lsl	r3, r3, #2
 425 011e 9B18     		adds	r3, r3, r2
 426 0120 4FEA4303 		lsl	r3, r3, #1
 427 0124 1846     		mov	r0, r3
 428 0126 FFF7FEFF 		bl	vTaskDelay
 429              		.loc 1 273 0
 430 012a 99E7     		b	.L17
 431              	.L9:
 265:App/Common/Minimal/semtest.c **** 			if( pxParameters->xBlockTime == ( portTickType ) 0 )
 432              		.loc 1 265 0
 433 012c 7B69     		ldr	r3, [r7, #20]
 434 012e 9B68     		ldr	r3, [r3, #8]
 435 0130 002B     		cmp	r3, #0
 436 0132 95D1     		bne	.L17
 270:App/Common/Minimal/semtest.c **** 				taskYIELD();
 437              		.loc 1 270 0
 438 0134 FFF7FEFF 		bl	vPortYield
 439              		.loc 1 273 0
 440 0138 92E7     		b	.L17
 441              		.cfi_endproc
 442              	.LFE111:
 444 013a 00BF     		.section	.text.xAreSemaphoreTasksStillRunning,"ax",%progbits
 445              		.align	2
 446              		.global	xAreSemaphoreTasksStillRunning
 447              		.thumb
 448              		.thumb_func
 450              	xAreSemaphoreTasksStillRunning:
 451              	.LFB112:
 274:App/Common/Minimal/semtest.c **** }
 275:App/Common/Minimal/semtest.c **** /*-----------------------------------------------------------*/
 276:App/Common/Minimal/semtest.c **** 
 277:App/Common/Minimal/semtest.c **** /* This is called to check that all the created tasks are still running. */
 278:App/Common/Minimal/semtest.c **** portBASE_TYPE xAreSemaphoreTasksStillRunning( void )
 279:App/Common/Minimal/semtest.c **** {
 452              		.loc 1 279 0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 8
 455              		@ frame_needed = 1, uses_anonymous_args = 0
 456              		@ link register save eliminated.
 457 0000 80B4     		push	{r7}
 458              	.LCFI6:
 459              		.cfi_def_cfa_offset 4
 460              		.cfi_offset 7, -4
 461 0002 83B0     		sub	sp, sp, #12
 462              	.LCFI7:
 463              		.cfi_def_cfa_offset 16
 464 0004 00AF     		add	r7, sp, #0
 465              	.LCFI8:
 466              		.cfi_def_cfa_register 7
 280:App/Common/Minimal/semtest.c **** static short sLastCheckVariables[ semtstNUM_TASKS ] = { 0 };
 281:App/Common/Minimal/semtest.c **** portBASE_TYPE xTask, xReturn = pdTRUE;
 467              		.loc 1 281 0
 468 0006 4FF00103 		mov	r3, #1
 469 000a 3B60     		str	r3, [r7, #0]
 282:App/Common/Minimal/semtest.c **** 
 283:App/Common/Minimal/semtest.c **** 	for( xTask = 0; xTask < semtstNUM_TASKS; xTask++ )
 470              		.loc 1 283 0
 471 000c 4FF00003 		mov	r3, #0
 472 0010 7B60     		str	r3, [r7, #4]
 473 0012 28E0     		b	.L19
 474              	.L21:
 284:App/Common/Minimal/semtest.c **** 	{
 285:App/Common/Minimal/semtest.c **** 		if( sLastCheckVariables[ xTask ] == sCheckVariables[ xTask ] )
 475              		.loc 1 285 0
 476 0014 40F20003 		movw	r3, #:lower16:sLastCheckVariables.8222
 477 0018 C0F20003 		movt	r3, #:upper16:sLastCheckVariables.8222
 478 001c 7A68     		ldr	r2, [r7, #4]
 479 001e 33F81220 		ldrh	r2, [r3, r2, lsl #1]
 480 0022 40F20003 		movw	r3, #:lower16:sCheckVariables
 481 0026 C0F20003 		movt	r3, #:upper16:sCheckVariables
 482 002a 7968     		ldr	r1, [r7, #4]
 483 002c 33F81130 		ldrh	r3, [r3, r1, lsl #1]	@ movhi
 484 0030 9BB2     		uxth	r3, r3
 485 0032 12B2     		sxth	r2, r2
 486 0034 1BB2     		sxth	r3, r3
 487 0036 9A42     		cmp	r2, r3
 488 0038 02D1     		bne	.L20
 286:App/Common/Minimal/semtest.c **** 		{
 287:App/Common/Minimal/semtest.c **** 			xReturn = pdFALSE;
 489              		.loc 1 287 0
 490 003a 4FF00003 		mov	r3, #0
 491 003e 3B60     		str	r3, [r7, #0]
 492              	.L20:
 288:App/Common/Minimal/semtest.c **** 		}
 289:App/Common/Minimal/semtest.c **** 
 290:App/Common/Minimal/semtest.c **** 		sLastCheckVariables[ xTask ] = sCheckVariables[ xTask ];
 493              		.loc 1 290 0
 494 0040 40F20003 		movw	r3, #:lower16:sCheckVariables
 495 0044 C0F20003 		movt	r3, #:upper16:sCheckVariables
 496 0048 7A68     		ldr	r2, [r7, #4]
 497 004a 33F81230 		ldrh	r3, [r3, r2, lsl #1]	@ movhi
 498 004e 99B2     		uxth	r1, r3
 499 0050 40F20003 		movw	r3, #:lower16:sLastCheckVariables.8222
 500 0054 C0F20003 		movt	r3, #:upper16:sLastCheckVariables.8222
 501 0058 7A68     		ldr	r2, [r7, #4]
 502 005a 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 283:App/Common/Minimal/semtest.c **** 	for( xTask = 0; xTask < semtstNUM_TASKS; xTask++ )
 503              		.loc 1 283 0
 504 005e 7B68     		ldr	r3, [r7, #4]
 505 0060 03F10103 		add	r3, r3, #1
 506 0064 7B60     		str	r3, [r7, #4]
 507              	.L19:
 283:App/Common/Minimal/semtest.c **** 	for( xTask = 0; xTask < semtstNUM_TASKS; xTask++ )
 508              		.loc 1 283 0 is_stmt 0 discriminator 1
 509 0066 7B68     		ldr	r3, [r7, #4]
 510 0068 032B     		cmp	r3, #3
 511 006a D3DD     		ble	.L21
 291:App/Common/Minimal/semtest.c **** 	}
 292:App/Common/Minimal/semtest.c **** 
 293:App/Common/Minimal/semtest.c **** 	return xReturn;
 512              		.loc 1 293 0 is_stmt 1
 513 006c 3B68     		ldr	r3, [r7, #0]
 294:App/Common/Minimal/semtest.c **** }
 514              		.loc 1 294 0
 515 006e 1846     		mov	r0, r3
 516 0070 07F10C07 		add	r7, r7, #12
 517 0074 BD46     		mov	sp, r7
 518 0076 80BC     		pop	{r7}
 519 0078 7047     		bx	lr
 520              		.cfi_endproc
 521              	.LFE112:
 523 007a 00BF     		.section	.bss.sLastCheckVariables.8222,"aw",%nobits
 524              		.align	2
 527              	sLastCheckVariables.8222:
 528 0000 00000000 		.space	8
 528      00000000 
 529              		.text
 530              	.Letext0:
 531              		.file 2 "/home/thanhtruong/embedded-development/toolchain/gcc-arm-none-eabi-4_7-2013q1/bin/../lib/
 532              		.file 3 "Source/portable/GCC/ARM_CM4F/portmacro.h"
 533              		.file 4 "Source/include/task.h"
 534              		.file 5 "Source/include/queue.h"
 535              		.file 6 "Source/include/semphr.h"
 536              		.file 7 "App/STM32F4-Discovery/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 semtest.c
     /tmp/cc7MdZZf.s:20     .bss.sCheckVariables:00000000 $d
     /tmp/cc7MdZZf.s:23     .bss.sCheckVariables:00000000 sCheckVariables
     /tmp/cc7MdZZf.s:26     .bss.sNextCheckVariable:00000000 $d
     /tmp/cc7MdZZf.s:29     .bss.sNextCheckVariable:00000000 sNextCheckVariable
     /tmp/cc7MdZZf.s:32     .rodata:00000000 $d
     /tmp/cc7MdZZf.s:33     .rodata:00000000 .LC0
     /tmp/cc7MdZZf.s:36     .rodata:00000008 .LC1
     /tmp/cc7MdZZf.s:39     .rodata:00000010 .LC2
     /tmp/cc7MdZZf.s:42     .rodata:00000018 .LC3
     /tmp/cc7MdZZf.s:45     .rodata:00000020 .LC4
     /tmp/cc7MdZZf.s:48     .rodata:00000030 .LC5
     /tmp/cc7MdZZf.s:51     .text.vStartSemaphoreTasks:00000000 $t
     /tmp/cc7MdZZf.s:56     .text.vStartSemaphoreTasks:00000000 vStartSemaphoreTasks
     /tmp/cc7MdZZf.s:268    .text.prvSemaphoreTest:00000000 prvSemaphoreTest
     /tmp/cc7MdZZf.s:264    .text.prvSemaphoreTest:00000000 $t
     /tmp/cc7MdZZf.s:445    .text.xAreSemaphoreTasksStillRunning:00000000 $t
     /tmp/cc7MdZZf.s:450    .text.xAreSemaphoreTasksStillRunning:00000000 xAreSemaphoreTasksStillRunning
     /tmp/cc7MdZZf.s:527    .bss.sLastCheckVariables.8222:00000000 sLastCheckVariables.8222
     /tmp/cc7MdZZf.s:524    .bss.sLastCheckVariables.8222:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
pvPortMalloc
xQueueGenericCreate
xQueueGenericSend
xTaskGenericCreate
vQueueAddToRegistry
vPortEnterCritical
vPortExitCritical
xQueueGenericReceive
vTaskDelay
vPortYield
