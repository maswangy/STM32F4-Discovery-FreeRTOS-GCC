   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"flop.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.bss.usTaskCheck,"aw",%nobits
  20              		.align	2
  23              	usTaskCheck:
  24 0000 00000000 		.space	8
  24      00000000 
  25              		.section	.rodata
  26              		.align	2
  27              	.LC0:
  28 0000 4D617468 		.ascii	"Math1\000"
  28      3100
  29 0006 0000     		.align	2
  30              	.LC1:
  31 0008 4D617468 		.ascii	"Math2\000"
  31      3200
  32 000e 0000     		.align	2
  33              	.LC2:
  34 0010 4D617468 		.ascii	"Math3\000"
  34      3300
  35 0016 0000     		.align	2
  36              	.LC3:
  37 0018 4D617468 		.ascii	"Math4\000"
  37      3400
  38 001e 0000     		.section	.text.vStartMathTasks,"ax",%progbits
  39              		.align	2
  40              		.global	vStartMathTasks
  41              		.thumb
  42              		.thumb_func
  44              	vStartMathTasks:
  45              	.LFB110:
  46              		.file 1 "App/Common/Minimal/flop.c"
   1:App/Common/Minimal/flop.c **** /*
   2:App/Common/Minimal/flop.c ****     FreeRTOS V7.5.3 - Copyright (C) 2013 Real Time Engineers Ltd. 
   3:App/Common/Minimal/flop.c ****     All rights reserved
   4:App/Common/Minimal/flop.c **** 
   5:App/Common/Minimal/flop.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:App/Common/Minimal/flop.c **** 
   7:App/Common/Minimal/flop.c ****     ***************************************************************************
   8:App/Common/Minimal/flop.c ****      *                                                                       *
   9:App/Common/Minimal/flop.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:App/Common/Minimal/flop.c ****      *    robust, strictly quality controlled, supported, and cross          *
  11:App/Common/Minimal/flop.c ****      *    platform software that has become a de facto standard.             *
  12:App/Common/Minimal/flop.c ****      *                                                                       *
  13:App/Common/Minimal/flop.c ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:App/Common/Minimal/flop.c ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  15:App/Common/Minimal/flop.c ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:App/Common/Minimal/flop.c ****      *                                                                       *
  17:App/Common/Minimal/flop.c ****      *    Thank you!                                                         *
  18:App/Common/Minimal/flop.c ****      *                                                                       *
  19:App/Common/Minimal/flop.c ****     ***************************************************************************
  20:App/Common/Minimal/flop.c **** 
  21:App/Common/Minimal/flop.c ****     This file is part of the FreeRTOS distribution.
  22:App/Common/Minimal/flop.c **** 
  23:App/Common/Minimal/flop.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  24:App/Common/Minimal/flop.c ****     the terms of the GNU General Public License (version 2) as published by the
  25:App/Common/Minimal/flop.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:App/Common/Minimal/flop.c **** 
  27:App/Common/Minimal/flop.c ****     >>! NOTE: The modification to the GPL is included to allow you to distribute
  28:App/Common/Minimal/flop.c ****     >>! a combined work that includes FreeRTOS without being obliged to provide
  29:App/Common/Minimal/flop.c ****     >>! the source code for proprietary components outside of the FreeRTOS
  30:App/Common/Minimal/flop.c ****     >>! kernel.
  31:App/Common/Minimal/flop.c **** 
  32:App/Common/Minimal/flop.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:App/Common/Minimal/flop.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:App/Common/Minimal/flop.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:App/Common/Minimal/flop.c ****     link: http://www.freertos.org/a00114.html
  36:App/Common/Minimal/flop.c **** 
  37:App/Common/Minimal/flop.c ****     1 tab == 4 spaces!
  38:App/Common/Minimal/flop.c **** 
  39:App/Common/Minimal/flop.c ****     ***************************************************************************
  40:App/Common/Minimal/flop.c ****      *                                                                       *
  41:App/Common/Minimal/flop.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:App/Common/Minimal/flop.c ****      *    not run, what could be wrong?"                                     *
  43:App/Common/Minimal/flop.c ****      *                                                                       *
  44:App/Common/Minimal/flop.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  45:App/Common/Minimal/flop.c ****      *                                                                       *
  46:App/Common/Minimal/flop.c ****     ***************************************************************************
  47:App/Common/Minimal/flop.c **** 
  48:App/Common/Minimal/flop.c ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:App/Common/Minimal/flop.c ****     license and Real Time Engineers Ltd. contact details.
  50:App/Common/Minimal/flop.c **** 
  51:App/Common/Minimal/flop.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:App/Common/Minimal/flop.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:App/Common/Minimal/flop.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:App/Common/Minimal/flop.c **** 
  55:App/Common/Minimal/flop.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:App/Common/Minimal/flop.c ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:App/Common/Minimal/flop.c ****     licenses offer ticketed support, indemnification and middleware.
  58:App/Common/Minimal/flop.c **** 
  59:App/Common/Minimal/flop.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:App/Common/Minimal/flop.c ****     engineered and independently SIL3 certified version for use in safety and
  61:App/Common/Minimal/flop.c ****     mission critical applications that require provable dependability.
  62:App/Common/Minimal/flop.c **** 
  63:App/Common/Minimal/flop.c ****     1 tab == 4 spaces!
  64:App/Common/Minimal/flop.c **** */
  65:App/Common/Minimal/flop.c **** 
  66:App/Common/Minimal/flop.c **** /*
  67:App/Common/Minimal/flop.c ****  * Creates eight tasks, each of which loops continuously performing a floating 
  68:App/Common/Minimal/flop.c ****  * point calculation.
  69:App/Common/Minimal/flop.c ****  *
  70:App/Common/Minimal/flop.c ****  * All the tasks run at the idle priority and never block or yield.  This causes
  71:App/Common/Minimal/flop.c ****  * all eight tasks to time slice with the idle task.  Running at the idle 
  72:App/Common/Minimal/flop.c ****  * priority means that these tasks will get pre-empted any time another task is 
  73:App/Common/Minimal/flop.c ****  * ready to run or a time slice occurs.  More often than not the pre-emption 
  74:App/Common/Minimal/flop.c ****  * will occur mid calculation, creating a good test of the schedulers context 
  75:App/Common/Minimal/flop.c ****  * switch mechanism - a calculation producing an unexpected result could be a 
  76:App/Common/Minimal/flop.c ****  * symptom of a corruption in the context of a task.
  77:App/Common/Minimal/flop.c ****  */
  78:App/Common/Minimal/flop.c **** 
  79:App/Common/Minimal/flop.c **** #include <stdlib.h>
  80:App/Common/Minimal/flop.c **** #include <math.h>
  81:App/Common/Minimal/flop.c **** 
  82:App/Common/Minimal/flop.c **** /* Scheduler include files. */
  83:App/Common/Minimal/flop.c **** #include "FreeRTOS.h"
  84:App/Common/Minimal/flop.c **** #include "task.h"
  85:App/Common/Minimal/flop.c **** 
  86:App/Common/Minimal/flop.c **** /* Demo program include files. */
  87:App/Common/Minimal/flop.c **** #include "flop.h"
  88:App/Common/Minimal/flop.c **** 
  89:App/Common/Minimal/flop.c **** #define mathSTACK_SIZE		configMINIMAL_STACK_SIZE
  90:App/Common/Minimal/flop.c **** #define mathNUMBER_OF_TASKS  ( 4 )
  91:App/Common/Minimal/flop.c **** 
  92:App/Common/Minimal/flop.c **** /* Four tasks, each of which performs a different floating point calculation.
  93:App/Common/Minimal/flop.c **** Each of the four is created twice. */
  94:App/Common/Minimal/flop.c **** static portTASK_FUNCTION_PROTO( vCompetingMathTask1, pvParameters );
  95:App/Common/Minimal/flop.c **** static portTASK_FUNCTION_PROTO( vCompetingMathTask2, pvParameters );
  96:App/Common/Minimal/flop.c **** static portTASK_FUNCTION_PROTO( vCompetingMathTask3, pvParameters );
  97:App/Common/Minimal/flop.c **** static portTASK_FUNCTION_PROTO( vCompetingMathTask4, pvParameters );
  98:App/Common/Minimal/flop.c **** 
  99:App/Common/Minimal/flop.c **** /* These variables are used to check that all the tasks are still running.  If a
 100:App/Common/Minimal/flop.c **** task gets a calculation wrong it will stop setting its check variable. */
 101:App/Common/Minimal/flop.c **** static volatile unsigned short usTaskCheck[ mathNUMBER_OF_TASKS ] = { ( unsigned short ) 0 };
 102:App/Common/Minimal/flop.c **** 
 103:App/Common/Minimal/flop.c **** /*-----------------------------------------------------------*/
 104:App/Common/Minimal/flop.c **** 
 105:App/Common/Minimal/flop.c **** void vStartMathTasks( unsigned portBASE_TYPE uxPriority )
 106:App/Common/Minimal/flop.c **** {
  47              		.loc 1 106 0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 8
  50              		@ frame_needed = 1, uses_anonymous_args = 0
  51 0000 80B5     		push	{r7, lr}
  52              	.LCFI0:
  53              		.cfi_def_cfa_offset 8
  54              		.cfi_offset 7, -8
  55              		.cfi_offset 14, -4
  56 0002 86B0     		sub	sp, sp, #24
  57              	.LCFI1:
  58              		.cfi_def_cfa_offset 32
  59 0004 04AF     		add	r7, sp, #16
  60              	.LCFI2:
  61              		.cfi_def_cfa 7, 16
  62 0006 7860     		str	r0, [r7, #4]
 107:App/Common/Minimal/flop.c **** 	xTaskCreate( vCompetingMathTask1, ( signed char * ) "Math1", mathSTACK_SIZE, ( void * ) &( usTaskC
  63              		.loc 1 107 0
  64 0008 7B68     		ldr	r3, [r7, #4]
  65 000a 0093     		str	r3, [sp, #0]
  66 000c 4FF00003 		mov	r3, #0
  67 0010 0193     		str	r3, [sp, #4]
  68 0012 4FF00003 		mov	r3, #0
  69 0016 0293     		str	r3, [sp, #8]
  70 0018 4FF00003 		mov	r3, #0
  71 001c 0393     		str	r3, [sp, #12]
  72 001e 40F20000 		movw	r0, #:lower16:vCompetingMathTask1
  73 0022 C0F20000 		movt	r0, #:upper16:vCompetingMathTask1
  74 0026 40F20001 		movw	r1, #:lower16:.LC0
  75 002a C0F20001 		movt	r1, #:upper16:.LC0
  76 002e 4FF08202 		mov	r2, #130
  77 0032 40F20003 		movw	r3, #:lower16:usTaskCheck
  78 0036 C0F20003 		movt	r3, #:upper16:usTaskCheck
  79 003a FFF7FEFF 		bl	xTaskGenericCreate
 108:App/Common/Minimal/flop.c **** 	xTaskCreate( vCompetingMathTask2, ( signed char * ) "Math2", mathSTACK_SIZE, ( void * ) &( usTaskC
  80              		.loc 1 108 0
  81 003e 7B68     		ldr	r3, [r7, #4]
  82 0040 0093     		str	r3, [sp, #0]
  83 0042 4FF00003 		mov	r3, #0
  84 0046 0193     		str	r3, [sp, #4]
  85 0048 4FF00003 		mov	r3, #0
  86 004c 0293     		str	r3, [sp, #8]
  87 004e 4FF00003 		mov	r3, #0
  88 0052 0393     		str	r3, [sp, #12]
  89 0054 40F20000 		movw	r0, #:lower16:vCompetingMathTask2
  90 0058 C0F20000 		movt	r0, #:upper16:vCompetingMathTask2
  91 005c 40F20001 		movw	r1, #:lower16:.LC1
  92 0060 C0F20001 		movt	r1, #:upper16:.LC1
  93 0064 4FF08202 		mov	r2, #130
  94 0068 1B4B     		ldr	r3, .L2
  95 006a FFF7FEFF 		bl	xTaskGenericCreate
 109:App/Common/Minimal/flop.c **** 	xTaskCreate( vCompetingMathTask3, ( signed char * ) "Math3", mathSTACK_SIZE, ( void * ) &( usTaskC
  96              		.loc 1 109 0
  97 006e 7B68     		ldr	r3, [r7, #4]
  98 0070 0093     		str	r3, [sp, #0]
  99 0072 4FF00003 		mov	r3, #0
 100 0076 0193     		str	r3, [sp, #4]
 101 0078 4FF00003 		mov	r3, #0
 102 007c 0293     		str	r3, [sp, #8]
 103 007e 4FF00003 		mov	r3, #0
 104 0082 0393     		str	r3, [sp, #12]
 105 0084 40F20000 		movw	r0, #:lower16:vCompetingMathTask3
 106 0088 C0F20000 		movt	r0, #:upper16:vCompetingMathTask3
 107 008c 40F20001 		movw	r1, #:lower16:.LC2
 108 0090 C0F20001 		movt	r1, #:upper16:.LC2
 109 0094 4FF08202 		mov	r2, #130
 110 0098 104B     		ldr	r3, .L2+4
 111 009a FFF7FEFF 		bl	xTaskGenericCreate
 110:App/Common/Minimal/flop.c **** 	xTaskCreate( vCompetingMathTask4, ( signed char * ) "Math4", mathSTACK_SIZE, ( void * ) &( usTaskC
 112              		.loc 1 110 0
 113 009e 7B68     		ldr	r3, [r7, #4]
 114 00a0 0093     		str	r3, [sp, #0]
 115 00a2 4FF00003 		mov	r3, #0
 116 00a6 0193     		str	r3, [sp, #4]
 117 00a8 4FF00003 		mov	r3, #0
 118 00ac 0293     		str	r3, [sp, #8]
 119 00ae 4FF00003 		mov	r3, #0
 120 00b2 0393     		str	r3, [sp, #12]
 121 00b4 40F20000 		movw	r0, #:lower16:vCompetingMathTask4
 122 00b8 C0F20000 		movt	r0, #:upper16:vCompetingMathTask4
 123 00bc 40F20001 		movw	r1, #:lower16:.LC3
 124 00c0 C0F20001 		movt	r1, #:upper16:.LC3
 125 00c4 4FF08202 		mov	r2, #130
 126 00c8 054B     		ldr	r3, .L2+8
 127 00ca FFF7FEFF 		bl	xTaskGenericCreate
 111:App/Common/Minimal/flop.c **** }
 128              		.loc 1 111 0
 129 00ce 07F10807 		add	r7, r7, #8
 130 00d2 BD46     		mov	sp, r7
 131 00d4 80BD     		pop	{r7, pc}
 132              	.L3:
 133 00d6 00BF     		.align	2
 134              	.L2:
 135 00d8 02000000 		.word	usTaskCheck+2
 136 00dc 04000000 		.word	usTaskCheck+4
 137 00e0 06000000 		.word	usTaskCheck+6
 138              		.cfi_endproc
 139              	.LFE110:
 141              		.global	__aeabi_dadd
 142              		.global	__aeabi_dmul
 143              		.global	__aeabi_dsub
 144              		.global	__aeabi_dcmpgt
 145              		.section	.text.vCompetingMathTask1,"ax",%progbits
 146              		.align	2
 147              		.thumb
 148              		.thumb_func
 150              	vCompetingMathTask1:
 151              	.LFB111:
 112:App/Common/Minimal/flop.c **** /*-----------------------------------------------------------*/
 113:App/Common/Minimal/flop.c **** 
 114:App/Common/Minimal/flop.c **** static portTASK_FUNCTION( vCompetingMathTask1, pvParameters )
 115:App/Common/Minimal/flop.c **** {
 152              		.loc 1 115 0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 56
 155              		@ frame_needed = 1, uses_anonymous_args = 0
 156 0000 B0B5     		push	{r4, r5, r7, lr}
 157              	.LCFI3:
 158              		.cfi_def_cfa_offset 16
 159              		.cfi_offset 4, -16
 160              		.cfi_offset 5, -12
 161              		.cfi_offset 7, -8
 162              		.cfi_offset 14, -4
 163 0002 8EB0     		sub	sp, sp, #56
 164              	.LCFI4:
 165              		.cfi_def_cfa_offset 72
 166 0004 00AF     		add	r7, sp, #0
 167              	.LCFI5:
 168              		.cfi_def_cfa_register 7
 169 0006 7860     		str	r0, [r7, #4]
 116:App/Common/Minimal/flop.c **** volatile portDOUBLE d1, d2, d3, d4;
 117:App/Common/Minimal/flop.c **** volatile unsigned short *pusTaskCheckVariable;
 118:App/Common/Minimal/flop.c **** volatile portDOUBLE dAnswer;
 119:App/Common/Minimal/flop.c **** short sError = pdFALSE;
 170              		.loc 1 119 0
 171 0008 4FF00003 		mov	r3, #0
 172 000c FB86     		strh	r3, [r7, #54]	@ movhi
 120:App/Common/Minimal/flop.c **** 
 121:App/Common/Minimal/flop.c **** 	/* Some ports require that tasks that use a hardware floating point unit
 122:App/Common/Minimal/flop.c **** 	tell the kernel that they require a floating point context before any
 123:App/Common/Minimal/flop.c **** 	floating point instructions are executed. */
 124:App/Common/Minimal/flop.c **** 	portTASK_USES_FLOATING_POINT();
 125:App/Common/Minimal/flop.c **** 
 126:App/Common/Minimal/flop.c **** 	d1 = 123.4567;
 173              		.loc 1 126 0
 174 000e 34A3     		adr	r3, .L11
 175 0010 D3E90023 		ldrd	r2, [r3]
 176 0014 C7E90A23 		strd	r2, [r7, #40]
 127:App/Common/Minimal/flop.c **** 	d2 = 2345.6789;
 177              		.loc 1 127 0
 178 0018 33A3     		adr	r3, .L11+8
 179 001a D3E90023 		ldrd	r2, [r3]
 180 001e C7E90823 		strd	r2, [r7, #32]
 128:App/Common/Minimal/flop.c **** 	d3 = -918.222;
 181              		.loc 1 128 0
 182 0022 33A3     		adr	r3, .L11+16
 183 0024 D3E90023 		ldrd	r2, [r3]
 184 0028 C7E90623 		strd	r2, [r7, #24]
 129:App/Common/Minimal/flop.c **** 
 130:App/Common/Minimal/flop.c **** 	dAnswer = ( d1 + d2 ) * d3;
 185              		.loc 1 130 0
 186 002c D7E90A01 		ldrd	r0, [r7, #40]
 187 0030 D7E90823 		ldrd	r2, [r7, #32]
 188 0034 FFF7FEFF 		bl	__aeabi_dadd
 189 0038 0246     		mov	r2, r0
 190 003a 0B46     		mov	r3, r1
 191 003c 1046     		mov	r0, r2
 192 003e 1946     		mov	r1, r3
 193 0040 D7E90623 		ldrd	r2, [r7, #24]
 194 0044 FFF7FEFF 		bl	__aeabi_dmul
 195 0048 0246     		mov	r2, r0
 196 004a 0B46     		mov	r3, r1
 197 004c C7E90223 		strd	r2, [r7, #8]
 131:App/Common/Minimal/flop.c **** 
 132:App/Common/Minimal/flop.c **** 	/* The variable this task increments to show it is still running is passed in
 133:App/Common/Minimal/flop.c **** 	as the parameter. */
 134:App/Common/Minimal/flop.c **** 	pusTaskCheckVariable = ( unsigned short * ) pvParameters;
 198              		.loc 1 134 0
 199 0050 7B68     		ldr	r3, [r7, #4]
 200 0052 3B63     		str	r3, [r7, #48]
 201 0054 00E0     		b	.L8
 202              	.L10:
 135:App/Common/Minimal/flop.c **** 
 136:App/Common/Minimal/flop.c **** 	/* Keep performing a calculation and checking the result against a constant. */
 137:App/Common/Minimal/flop.c **** 	for(;;)
 138:App/Common/Minimal/flop.c **** 	{
 139:App/Common/Minimal/flop.c **** 		d1 = 123.4567;
 140:App/Common/Minimal/flop.c **** 		d2 = 2345.6789;
 141:App/Common/Minimal/flop.c **** 		d3 = -918.222;
 142:App/Common/Minimal/flop.c **** 
 143:App/Common/Minimal/flop.c **** 		d4 = ( d1 + d2 ) * d3;
 144:App/Common/Minimal/flop.c **** 
 145:App/Common/Minimal/flop.c **** 		#if configUSE_PREEMPTION == 0
 146:App/Common/Minimal/flop.c **** 			taskYIELD();
 147:App/Common/Minimal/flop.c **** 		#endif
 148:App/Common/Minimal/flop.c **** 
 149:App/Common/Minimal/flop.c **** 		/* If the calculation does not match the expected constant, stop the
 150:App/Common/Minimal/flop.c **** 		increment of the check variable. */
 151:App/Common/Minimal/flop.c **** 		if( fabs( d4 - dAnswer ) > 0.001 )
 152:App/Common/Minimal/flop.c **** 		{
 153:App/Common/Minimal/flop.c **** 			sError = pdTRUE;
 154:App/Common/Minimal/flop.c **** 		}
 155:App/Common/Minimal/flop.c **** 
 156:App/Common/Minimal/flop.c **** 		if( sError == pdFALSE )
 157:App/Common/Minimal/flop.c **** 		{
 158:App/Common/Minimal/flop.c **** 			/* If the calculation has always been correct then set set the check
 159:App/Common/Minimal/flop.c **** 			variable.  The check variable will get set to pdFALSE each time
 160:App/Common/Minimal/flop.c **** 			xAreMathsTaskStillRunning() is executed. */
 161:App/Common/Minimal/flop.c **** 			( *pusTaskCheckVariable ) = pdTRUE;
 162:App/Common/Minimal/flop.c **** 		}
 163:App/Common/Minimal/flop.c **** 
 164:App/Common/Minimal/flop.c **** 		#if configUSE_PREEMPTION == 0
 165:App/Common/Minimal/flop.c **** 			taskYIELD();
 166:App/Common/Minimal/flop.c **** 		#endif
 167:App/Common/Minimal/flop.c **** 
 168:App/Common/Minimal/flop.c **** 	}
 203              		.loc 1 168 0
 204 0056 00BF     		nop
 205              	.L8:
 139:App/Common/Minimal/flop.c **** 		d1 = 123.4567;
 206              		.loc 1 139 0
 207 0058 21A3     		adr	r3, .L11
 208 005a D3E90023 		ldrd	r2, [r3]
 209 005e C7E90A23 		strd	r2, [r7, #40]
 140:App/Common/Minimal/flop.c **** 		d2 = 2345.6789;
 210              		.loc 1 140 0
 211 0062 21A3     		adr	r3, .L11+8
 212 0064 D3E90023 		ldrd	r2, [r3]
 213 0068 C7E90823 		strd	r2, [r7, #32]
 141:App/Common/Minimal/flop.c **** 		d3 = -918.222;
 214              		.loc 1 141 0
 215 006c 20A3     		adr	r3, .L11+16
 216 006e D3E90023 		ldrd	r2, [r3]
 217 0072 C7E90623 		strd	r2, [r7, #24]
 143:App/Common/Minimal/flop.c **** 		d4 = ( d1 + d2 ) * d3;
 218              		.loc 1 143 0
 219 0076 D7E90A01 		ldrd	r0, [r7, #40]
 220 007a D7E90823 		ldrd	r2, [r7, #32]
 221 007e FFF7FEFF 		bl	__aeabi_dadd
 222 0082 0246     		mov	r2, r0
 223 0084 0B46     		mov	r3, r1
 224 0086 1046     		mov	r0, r2
 225 0088 1946     		mov	r1, r3
 226 008a D7E90623 		ldrd	r2, [r7, #24]
 227 008e FFF7FEFF 		bl	__aeabi_dmul
 228 0092 0246     		mov	r2, r0
 229 0094 0B46     		mov	r3, r1
 230 0096 C7E90423 		strd	r2, [r7, #16]
 151:App/Common/Minimal/flop.c **** 		if( fabs( d4 - dAnswer ) > 0.001 )
 231              		.loc 1 151 0
 232 009a D7E90401 		ldrd	r0, [r7, #16]
 233 009e D7E90223 		ldrd	r2, [r7, #8]
 234 00a2 FFF7FEFF 		bl	__aeabi_dsub
 235 00a6 0246     		mov	r2, r0
 236 00a8 0B46     		mov	r3, r1
 237 00aa 1446     		mov	r4, r2
 238 00ac 23F00045 		bic	r5, r3, #-2147483648
 239 00b0 2046     		mov	r0, r4
 240 00b2 2946     		mov	r1, r5
 241 00b4 10A3     		adr	r3, .L11+24
 242 00b6 D3E90023 		ldrd	r2, [r3]
 243 00ba FFF7FEFF 		bl	__aeabi_dcmpgt
 244 00be 0346     		mov	r3, r0
 245 00c0 002B     		cmp	r3, #0
 246 00c2 02D0     		beq	.L5
 247              	.L9:
 153:App/Common/Minimal/flop.c **** 			sError = pdTRUE;
 248              		.loc 1 153 0
 249 00c4 4FF00103 		mov	r3, #1
 250 00c8 FB86     		strh	r3, [r7, #54]	@ movhi
 251              	.L5:
 156:App/Common/Minimal/flop.c **** 		if( sError == pdFALSE )
 252              		.loc 1 156 0
 253 00ca B7F93630 		ldrsh	r3, [r7, #54]
 254 00ce 002B     		cmp	r3, #0
 255 00d0 C1D1     		bne	.L10
 161:App/Common/Minimal/flop.c **** 			( *pusTaskCheckVariable ) = pdTRUE;
 256              		.loc 1 161 0
 257 00d2 3B6B     		ldr	r3, [r7, #48]
 258 00d4 4FF00102 		mov	r2, #1
 259 00d8 1A80     		strh	r2, [r3, #0]	@ movhi
 260              		.loc 1 168 0
 261 00da BCE7     		b	.L10
 262              	.L12:
 263 00dc AFF30080 		.align	3
 264              	.L11:
 265 00e0 000000A0 		.word	-1610612736
 266 00e4 3ADD5E40 		.word	1079958842
 267 00e8 000000A0 		.word	-1610612736
 268 00ec 5B53A240 		.word	1084379995
 269 00f0 000000A0 		.word	-1610612736
 270 00f4 C6B18CC0 		.word	-1064521274
 271 00f8 000000E0 		.word	-536870912
 272 00fc 4D62503F 		.word	1062232653
 273              		.cfi_endproc
 274              	.LFE111:
 276              		.global	__aeabi_ddiv
 277              		.section	.text.vCompetingMathTask2,"ax",%progbits
 278              		.align	2
 279              		.thumb
 280              		.thumb_func
 282              	vCompetingMathTask2:
 283              	.LFB112:
 169:App/Common/Minimal/flop.c **** }
 170:App/Common/Minimal/flop.c **** /*-----------------------------------------------------------*/
 171:App/Common/Minimal/flop.c **** 
 172:App/Common/Minimal/flop.c **** static portTASK_FUNCTION( vCompetingMathTask2, pvParameters )
 173:App/Common/Minimal/flop.c **** {
 284              		.loc 1 173 0
 285              		.cfi_startproc
 286              		@ args = 0, pretend = 0, frame = 56
 287              		@ frame_needed = 1, uses_anonymous_args = 0
 288 0000 B0B5     		push	{r4, r5, r7, lr}
 289              	.LCFI6:
 290              		.cfi_def_cfa_offset 16
 291              		.cfi_offset 4, -16
 292              		.cfi_offset 5, -12
 293              		.cfi_offset 7, -8
 294              		.cfi_offset 14, -4
 295 0002 8EB0     		sub	sp, sp, #56
 296              	.LCFI7:
 297              		.cfi_def_cfa_offset 72
 298 0004 00AF     		add	r7, sp, #0
 299              	.LCFI8:
 300              		.cfi_def_cfa_register 7
 301 0006 7860     		str	r0, [r7, #4]
 174:App/Common/Minimal/flop.c **** volatile portDOUBLE d1, d2, d3, d4;
 175:App/Common/Minimal/flop.c **** volatile unsigned short *pusTaskCheckVariable;
 176:App/Common/Minimal/flop.c **** volatile portDOUBLE dAnswer;
 177:App/Common/Minimal/flop.c **** short sError = pdFALSE;
 302              		.loc 1 177 0
 303 0008 4FF00003 		mov	r3, #0
 304 000c FB86     		strh	r3, [r7, #54]	@ movhi
 178:App/Common/Minimal/flop.c **** 
 179:App/Common/Minimal/flop.c **** 	/* Some ports require that tasks that use a hardware floating point unit
 180:App/Common/Minimal/flop.c **** 	tell the kernel that they require a floating point context before any
 181:App/Common/Minimal/flop.c **** 	floating point instructions are executed. */
 182:App/Common/Minimal/flop.c **** 	portTASK_USES_FLOATING_POINT();
 183:App/Common/Minimal/flop.c **** 
 184:App/Common/Minimal/flop.c **** 	d1 = -389.38;
 305              		.loc 1 184 0
 306 000e 36A3     		adr	r3, .L20
 307 0010 D3E90023 		ldrd	r2, [r3]
 308 0014 C7E90A23 		strd	r2, [r7, #40]
 185:App/Common/Minimal/flop.c **** 	d2 = 32498.2;
 309              		.loc 1 185 0
 310 0018 35A3     		adr	r3, .L20+8
 311 001a D3E90023 		ldrd	r2, [r3]
 312 001e C7E90823 		strd	r2, [r7, #32]
 186:App/Common/Minimal/flop.c **** 	d3 = -2.0001;
 313              		.loc 1 186 0
 314 0022 4FF0C042 		mov	r2, #1610612736
 315 0026 4FF03403 		mov	r3, #52
 316 002a CCF20003 		movt	r3, 49152
 317 002e C7E90623 		strd	r2, [r7, #24]
 187:App/Common/Minimal/flop.c **** 
 188:App/Common/Minimal/flop.c **** 	dAnswer = ( d1 / d2 ) * d3;
 318              		.loc 1 188 0
 319 0032 D7E90A01 		ldrd	r0, [r7, #40]
 320 0036 D7E90823 		ldrd	r2, [r7, #32]
 321 003a FFF7FEFF 		bl	__aeabi_ddiv
 322 003e 0246     		mov	r2, r0
 323 0040 0B46     		mov	r3, r1
 324 0042 1046     		mov	r0, r2
 325 0044 1946     		mov	r1, r3
 326 0046 D7E90623 		ldrd	r2, [r7, #24]
 327 004a FFF7FEFF 		bl	__aeabi_dmul
 328 004e 0246     		mov	r2, r0
 329 0050 0B46     		mov	r3, r1
 330 0052 C7E90223 		strd	r2, [r7, #8]
 189:App/Common/Minimal/flop.c **** 
 190:App/Common/Minimal/flop.c **** 
 191:App/Common/Minimal/flop.c **** 	/* The variable this task increments to show it is still running is passed in
 192:App/Common/Minimal/flop.c **** 	as the parameter. */
 193:App/Common/Minimal/flop.c **** 	pusTaskCheckVariable = ( unsigned short * ) pvParameters;
 331              		.loc 1 193 0
 332 0056 7B68     		ldr	r3, [r7, #4]
 333 0058 3B63     		str	r3, [r7, #48]
 334 005a 00E0     		b	.L17
 335              	.L19:
 194:App/Common/Minimal/flop.c **** 
 195:App/Common/Minimal/flop.c **** 	/* Keep performing a calculation and checking the result against a constant. */
 196:App/Common/Minimal/flop.c **** 	for( ;; )
 197:App/Common/Minimal/flop.c **** 	{
 198:App/Common/Minimal/flop.c **** 		d1 = -389.38;
 199:App/Common/Minimal/flop.c **** 		d2 = 32498.2;
 200:App/Common/Minimal/flop.c **** 		d3 = -2.0001;
 201:App/Common/Minimal/flop.c **** 
 202:App/Common/Minimal/flop.c **** 		d4 = ( d1 / d2 ) * d3;
 203:App/Common/Minimal/flop.c **** 
 204:App/Common/Minimal/flop.c **** 		#if configUSE_PREEMPTION == 0
 205:App/Common/Minimal/flop.c **** 			taskYIELD();
 206:App/Common/Minimal/flop.c **** 		#endif
 207:App/Common/Minimal/flop.c **** 
 208:App/Common/Minimal/flop.c **** 		/* If the calculation does not match the expected constant, stop the
 209:App/Common/Minimal/flop.c **** 		increment of the check variable. */
 210:App/Common/Minimal/flop.c **** 		if( fabs( d4 - dAnswer ) > 0.001 )
 211:App/Common/Minimal/flop.c **** 		{
 212:App/Common/Minimal/flop.c **** 			sError = pdTRUE;
 213:App/Common/Minimal/flop.c **** 		}
 214:App/Common/Minimal/flop.c **** 
 215:App/Common/Minimal/flop.c **** 		if( sError == pdFALSE )
 216:App/Common/Minimal/flop.c **** 		{
 217:App/Common/Minimal/flop.c **** 			/* If the calculation has always been correct then set set the check
 218:App/Common/Minimal/flop.c **** 			variable.  The check variable will get set to pdFALSE each time
 219:App/Common/Minimal/flop.c **** 			xAreMathsTaskStillRunning() is executed. */
 220:App/Common/Minimal/flop.c **** 			( *pusTaskCheckVariable ) = pdTRUE;
 221:App/Common/Minimal/flop.c **** 		}
 222:App/Common/Minimal/flop.c **** 
 223:App/Common/Minimal/flop.c **** 		#if configUSE_PREEMPTION == 0
 224:App/Common/Minimal/flop.c **** 			taskYIELD();
 225:App/Common/Minimal/flop.c **** 		#endif
 226:App/Common/Minimal/flop.c **** 	}
 336              		.loc 1 226 0
 337 005c 00BF     		nop
 338              	.L17:
 198:App/Common/Minimal/flop.c **** 		d1 = -389.38;
 339              		.loc 1 198 0
 340 005e 22A3     		adr	r3, .L20
 341 0060 D3E90023 		ldrd	r2, [r3]
 342 0064 C7E90A23 		strd	r2, [r7, #40]
 199:App/Common/Minimal/flop.c **** 		d2 = 32498.2;
 343              		.loc 1 199 0
 344 0068 21A3     		adr	r3, .L20+8
 345 006a D3E90023 		ldrd	r2, [r3]
 346 006e C7E90823 		strd	r2, [r7, #32]
 200:App/Common/Minimal/flop.c **** 		d3 = -2.0001;
 347              		.loc 1 200 0
 348 0072 4FF0C042 		mov	r2, #1610612736
 349 0076 4FF03403 		mov	r3, #52
 350 007a CCF20003 		movt	r3, 49152
 351 007e C7E90623 		strd	r2, [r7, #24]
 202:App/Common/Minimal/flop.c **** 		d4 = ( d1 / d2 ) * d3;
 352              		.loc 1 202 0
 353 0082 D7E90A01 		ldrd	r0, [r7, #40]
 354 0086 D7E90823 		ldrd	r2, [r7, #32]
 355 008a FFF7FEFF 		bl	__aeabi_ddiv
 356 008e 0246     		mov	r2, r0
 357 0090 0B46     		mov	r3, r1
 358 0092 1046     		mov	r0, r2
 359 0094 1946     		mov	r1, r3
 360 0096 D7E90623 		ldrd	r2, [r7, #24]
 361 009a FFF7FEFF 		bl	__aeabi_dmul
 362 009e 0246     		mov	r2, r0
 363 00a0 0B46     		mov	r3, r1
 364 00a2 C7E90423 		strd	r2, [r7, #16]
 210:App/Common/Minimal/flop.c **** 		if( fabs( d4 - dAnswer ) > 0.001 )
 365              		.loc 1 210 0
 366 00a6 D7E90401 		ldrd	r0, [r7, #16]
 367 00aa D7E90223 		ldrd	r2, [r7, #8]
 368 00ae FFF7FEFF 		bl	__aeabi_dsub
 369 00b2 0246     		mov	r2, r0
 370 00b4 0B46     		mov	r3, r1
 371 00b6 1446     		mov	r4, r2
 372 00b8 23F00045 		bic	r5, r3, #-2147483648
 373 00bc 2046     		mov	r0, r4
 374 00be 2946     		mov	r1, r5
 375 00c0 0DA3     		adr	r3, .L20+16
 376 00c2 D3E90023 		ldrd	r2, [r3]
 377 00c6 FFF7FEFF 		bl	__aeabi_dcmpgt
 378 00ca 0346     		mov	r3, r0
 379 00cc 002B     		cmp	r3, #0
 380 00ce 02D0     		beq	.L14
 381              	.L18:
 212:App/Common/Minimal/flop.c **** 			sError = pdTRUE;
 382              		.loc 1 212 0
 383 00d0 4FF00103 		mov	r3, #1
 384 00d4 FB86     		strh	r3, [r7, #54]	@ movhi
 385              	.L14:
 215:App/Common/Minimal/flop.c **** 		if( sError == pdFALSE )
 386              		.loc 1 215 0
 387 00d6 B7F93630 		ldrsh	r3, [r7, #54]
 388 00da 002B     		cmp	r3, #0
 389 00dc BED1     		bne	.L19
 220:App/Common/Minimal/flop.c **** 			( *pusTaskCheckVariable ) = pdTRUE;
 390              		.loc 1 220 0
 391 00de 3B6B     		ldr	r3, [r7, #48]
 392 00e0 4FF00102 		mov	r2, #1
 393 00e4 1A80     		strh	r2, [r3, #0]	@ movhi
 394              		.loc 1 226 0
 395 00e6 B9E7     		b	.L19
 396              	.L21:
 397              		.align	3
 398              	.L20:
 399 00e8 00000080 		.word	-2147483648
 400 00ec 145678C0 		.word	-1065855468
 401 00f0 000000C0 		.word	-1073741824
 402 00f4 8CBCDF40 		.word	1088404620
 403 00f8 000000E0 		.word	-536870912
 404 00fc 4D62503F 		.word	1062232653
 405              		.cfi_endproc
 406              	.LFE112:
 408              		.global	__aeabi_ui2d
 409              		.section	.text.vCompetingMathTask3,"ax",%progbits
 410              		.align	2
 411              		.thumb
 412              		.thumb_func
 414              	vCompetingMathTask3:
 415              	.LFB113:
 227:App/Common/Minimal/flop.c **** }
 228:App/Common/Minimal/flop.c **** /*-----------------------------------------------------------*/
 229:App/Common/Minimal/flop.c **** 
 230:App/Common/Minimal/flop.c **** static portTASK_FUNCTION( vCompetingMathTask3, pvParameters )
 231:App/Common/Minimal/flop.c **** {
 416              		.loc 1 231 0
 417              		.cfi_startproc
 418              		@ args = 0, pretend = 0, frame = 56
 419              		@ frame_needed = 1, uses_anonymous_args = 0
 420 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 421              	.LCFI9:
 422              		.cfi_def_cfa_offset 20
 423              		.cfi_offset 4, -20
 424              		.cfi_offset 5, -16
 425              		.cfi_offset 6, -12
 426              		.cfi_offset 7, -8
 427              		.cfi_offset 14, -4
 428 0002 8FB0     		sub	sp, sp, #60
 429              	.LCFI10:
 430              		.cfi_def_cfa_offset 80
 431 0004 00AF     		add	r7, sp, #0
 432              	.LCFI11:
 433              		.cfi_def_cfa_register 7
 434 0006 7860     		str	r0, [r7, #4]
 232:App/Common/Minimal/flop.c **** volatile portDOUBLE *pdArray, dTotal1, dTotal2, dDifference;
 233:App/Common/Minimal/flop.c **** volatile unsigned short *pusTaskCheckVariable;
 234:App/Common/Minimal/flop.c **** const size_t xArraySize = 10;
 435              		.loc 1 234 0
 436 0008 4FF00A03 		mov	r3, #10
 437 000c FB62     		str	r3, [r7, #44]
 235:App/Common/Minimal/flop.c **** size_t xPosition;
 236:App/Common/Minimal/flop.c **** short sError = pdFALSE;
 438              		.loc 1 236 0
 439 000e 4FF00003 		mov	r3, #0
 440 0012 7B86     		strh	r3, [r7, #50]	@ movhi
 237:App/Common/Minimal/flop.c **** 
 238:App/Common/Minimal/flop.c **** 	/* Some ports require that tasks that use a hardware floating point unit
 239:App/Common/Minimal/flop.c **** 	tell the kernel that they require a floating point context before any
 240:App/Common/Minimal/flop.c **** 	floating point instructions are executed. */
 241:App/Common/Minimal/flop.c **** 	portTASK_USES_FLOATING_POINT();
 242:App/Common/Minimal/flop.c **** 
 243:App/Common/Minimal/flop.c **** 	/* The variable this task increments to show it is still running is passed in
 244:App/Common/Minimal/flop.c **** 	as the parameter. */
 245:App/Common/Minimal/flop.c **** 	pusTaskCheckVariable = ( unsigned short * ) pvParameters;
 441              		.loc 1 245 0
 442 0014 7B68     		ldr	r3, [r7, #4]
 443 0016 BB62     		str	r3, [r7, #40]
 246:App/Common/Minimal/flop.c **** 
 247:App/Common/Minimal/flop.c **** 	pdArray = ( portDOUBLE * ) pvPortMalloc( xArraySize * sizeof( portDOUBLE ) );
 444              		.loc 1 247 0
 445 0018 FB6A     		ldr	r3, [r7, #44]
 446 001a 4FEAC303 		lsl	r3, r3, #3
 447 001e 1846     		mov	r0, r3
 448 0020 FFF7FEFF 		bl	pvPortMalloc
 449 0024 7862     		str	r0, [r7, #36]
 450 0026 00E0     		b	.L30
 451              	.L32:
 248:App/Common/Minimal/flop.c **** 
 249:App/Common/Minimal/flop.c **** 	/* Keep filling an array, keeping a running total of the values placed in the
 250:App/Common/Minimal/flop.c **** 	array.  Then run through the array adding up all the values.  If the two totals
 251:App/Common/Minimal/flop.c **** 	do not match, stop the check variable from incrementing. */
 252:App/Common/Minimal/flop.c **** 	for( ;; )
 253:App/Common/Minimal/flop.c **** 	{
 254:App/Common/Minimal/flop.c **** 		dTotal1 = 0.0;
 255:App/Common/Minimal/flop.c **** 		dTotal2 = 0.0;
 256:App/Common/Minimal/flop.c **** 
 257:App/Common/Minimal/flop.c **** 		for( xPosition = 0; xPosition < xArraySize; xPosition++ )
 258:App/Common/Minimal/flop.c **** 		{
 259:App/Common/Minimal/flop.c **** 			pdArray[ xPosition ] = ( portDOUBLE ) xPosition + 5.5;
 260:App/Common/Minimal/flop.c **** 			dTotal1 += ( portDOUBLE ) xPosition + 5.5;
 261:App/Common/Minimal/flop.c **** 		}
 262:App/Common/Minimal/flop.c **** 
 263:App/Common/Minimal/flop.c **** 		#if configUSE_PREEMPTION == 0
 264:App/Common/Minimal/flop.c **** 			taskYIELD();
 265:App/Common/Minimal/flop.c **** 		#endif
 266:App/Common/Minimal/flop.c **** 
 267:App/Common/Minimal/flop.c **** 		for( xPosition = 0; xPosition < xArraySize; xPosition++ )
 268:App/Common/Minimal/flop.c **** 		{
 269:App/Common/Minimal/flop.c **** 			dTotal2 += pdArray[ xPosition ];
 270:App/Common/Minimal/flop.c **** 		}
 271:App/Common/Minimal/flop.c **** 
 272:App/Common/Minimal/flop.c **** 		dDifference = dTotal1 - dTotal2;
 273:App/Common/Minimal/flop.c **** 		if( fabs( dDifference ) > 0.001 )
 274:App/Common/Minimal/flop.c **** 		{
 275:App/Common/Minimal/flop.c **** 			sError = pdTRUE;
 276:App/Common/Minimal/flop.c **** 		}
 277:App/Common/Minimal/flop.c **** 
 278:App/Common/Minimal/flop.c **** 		#if configUSE_PREEMPTION == 0
 279:App/Common/Minimal/flop.c **** 			taskYIELD();
 280:App/Common/Minimal/flop.c **** 		#endif
 281:App/Common/Minimal/flop.c **** 
 282:App/Common/Minimal/flop.c **** 		if( sError == pdFALSE )
 283:App/Common/Minimal/flop.c **** 		{
 284:App/Common/Minimal/flop.c **** 			/* If the calculation has always been correct then set set the check
 285:App/Common/Minimal/flop.c **** 			variable.  The check variable will get set to pdFALSE each time
 286:App/Common/Minimal/flop.c **** 			xAreMathsTaskStillRunning() is executed. */
 287:App/Common/Minimal/flop.c **** 			( *pusTaskCheckVariable ) = pdTRUE;
 288:App/Common/Minimal/flop.c **** 		}
 289:App/Common/Minimal/flop.c **** 	}
 452              		.loc 1 289 0
 453 0028 00BF     		nop
 454              	.L30:
 254:App/Common/Minimal/flop.c **** 		dTotal1 = 0.0;
 455              		.loc 1 254 0
 456 002a 4FF00002 		mov	r2, #0
 457 002e 4FF00003 		mov	r3, #0
 458 0032 C7E90623 		strd	r2, [r7, #24]
 255:App/Common/Minimal/flop.c **** 		dTotal2 = 0.0;
 459              		.loc 1 255 0
 460 0036 4FF00002 		mov	r2, #0
 461 003a 4FF00003 		mov	r3, #0
 462 003e C7E90423 		strd	r2, [r7, #16]
 257:App/Common/Minimal/flop.c **** 		for( xPosition = 0; xPosition < xArraySize; xPosition++ )
 463              		.loc 1 257 0
 464 0042 4FF00003 		mov	r3, #0
 465 0046 7B63     		str	r3, [r7, #52]
 466 0048 36E0     		b	.L23
 467              	.L24:
 259:App/Common/Minimal/flop.c **** 			pdArray[ xPosition ] = ( portDOUBLE ) xPosition + 5.5;
 468              		.loc 1 259 0 discriminator 2
 469 004a 7B6B     		ldr	r3, [r7, #52]
 470 004c 4FEAC303 		lsl	r3, r3, #3
 471 0050 7A6A     		ldr	r2, [r7, #36]
 472 0052 D618     		adds	r6, r2, r3
 473 0054 786B     		ldr	r0, [r7, #52]
 474 0056 FFF7FEFF 		bl	__aeabi_ui2d
 475 005a 0246     		mov	r2, r0
 476 005c 0B46     		mov	r3, r1
 477 005e 1046     		mov	r0, r2
 478 0060 1946     		mov	r1, r3
 479 0062 4FF00002 		mov	r2, #0
 480 0066 4FF00003 		mov	r3, #0
 481 006a C4F21603 		movt	r3, 16406
 482 006e FFF7FEFF 		bl	__aeabi_dadd
 483 0072 0246     		mov	r2, r0
 484 0074 0B46     		mov	r3, r1
 485 0076 C6E90023 		strd	r2, [r6]
 260:App/Common/Minimal/flop.c **** 			dTotal1 += ( portDOUBLE ) xPosition + 5.5;
 486              		.loc 1 260 0 discriminator 2
 487 007a 786B     		ldr	r0, [r7, #52]
 488 007c FFF7FEFF 		bl	__aeabi_ui2d
 489 0080 0246     		mov	r2, r0
 490 0082 0B46     		mov	r3, r1
 491 0084 1046     		mov	r0, r2
 492 0086 1946     		mov	r1, r3
 493 0088 4FF00002 		mov	r2, #0
 494 008c 4FF00003 		mov	r3, #0
 495 0090 C4F21603 		movt	r3, 16406
 496 0094 FFF7FEFF 		bl	__aeabi_dadd
 497 0098 0246     		mov	r2, r0
 498 009a 0B46     		mov	r3, r1
 499 009c 1046     		mov	r0, r2
 500 009e 1946     		mov	r1, r3
 501 00a0 D7E90623 		ldrd	r2, [r7, #24]
 502 00a4 FFF7FEFF 		bl	__aeabi_dadd
 503 00a8 0246     		mov	r2, r0
 504 00aa 0B46     		mov	r3, r1
 505 00ac C7E90623 		strd	r2, [r7, #24]
 257:App/Common/Minimal/flop.c **** 		for( xPosition = 0; xPosition < xArraySize; xPosition++ )
 506              		.loc 1 257 0 discriminator 2
 507 00b0 7B6B     		ldr	r3, [r7, #52]
 508 00b2 03F10103 		add	r3, r3, #1
 509 00b6 7B63     		str	r3, [r7, #52]
 510              	.L23:
 257:App/Common/Minimal/flop.c **** 		for( xPosition = 0; xPosition < xArraySize; xPosition++ )
 511              		.loc 1 257 0 is_stmt 0 discriminator 1
 512 00b8 7A6B     		ldr	r2, [r7, #52]
 513 00ba FB6A     		ldr	r3, [r7, #44]
 514 00bc 9A42     		cmp	r2, r3
 515 00be C4D3     		bcc	.L24
 267:App/Common/Minimal/flop.c **** 		for( xPosition = 0; xPosition < xArraySize; xPosition++ )
 516              		.loc 1 267 0 is_stmt 1
 517 00c0 4FF00003 		mov	r3, #0
 518 00c4 7B63     		str	r3, [r7, #52]
 519 00c6 12E0     		b	.L25
 520              	.L26:
 269:App/Common/Minimal/flop.c **** 			dTotal2 += pdArray[ xPosition ];
 521              		.loc 1 269 0 discriminator 2
 522 00c8 7B6B     		ldr	r3, [r7, #52]
 523 00ca 4FEAC303 		lsl	r3, r3, #3
 524 00ce 7A6A     		ldr	r2, [r7, #36]
 525 00d0 D318     		adds	r3, r2, r3
 526 00d2 D3E90001 		ldrd	r0, [r3]
 527 00d6 D7E90423 		ldrd	r2, [r7, #16]
 528 00da FFF7FEFF 		bl	__aeabi_dadd
 529 00de 0246     		mov	r2, r0
 530 00e0 0B46     		mov	r3, r1
 531 00e2 C7E90423 		strd	r2, [r7, #16]
 267:App/Common/Minimal/flop.c **** 		for( xPosition = 0; xPosition < xArraySize; xPosition++ )
 532              		.loc 1 267 0 discriminator 2
 533 00e6 7B6B     		ldr	r3, [r7, #52]
 534 00e8 03F10103 		add	r3, r3, #1
 535 00ec 7B63     		str	r3, [r7, #52]
 536              	.L25:
 267:App/Common/Minimal/flop.c **** 		for( xPosition = 0; xPosition < xArraySize; xPosition++ )
 537              		.loc 1 267 0 is_stmt 0 discriminator 1
 538 00ee 7A6B     		ldr	r2, [r7, #52]
 539 00f0 FB6A     		ldr	r3, [r7, #44]
 540 00f2 9A42     		cmp	r2, r3
 541 00f4 E8D3     		bcc	.L26
 272:App/Common/Minimal/flop.c **** 		dDifference = dTotal1 - dTotal2;
 542              		.loc 1 272 0 is_stmt 1
 543 00f6 D7E90601 		ldrd	r0, [r7, #24]
 544 00fa D7E90423 		ldrd	r2, [r7, #16]
 545 00fe FFF7FEFF 		bl	__aeabi_dsub
 546 0102 0246     		mov	r2, r0
 547 0104 0B46     		mov	r3, r1
 548 0106 C7E90223 		strd	r2, [r7, #8]
 273:App/Common/Minimal/flop.c **** 		if( fabs( dDifference ) > 0.001 )
 549              		.loc 1 273 0
 550 010a D7E90223 		ldrd	r2, [r7, #8]
 551 010e 1446     		mov	r4, r2
 552 0110 23F00045 		bic	r5, r3, #-2147483648
 553 0114 2046     		mov	r0, r4
 554 0116 2946     		mov	r1, r5
 555 0118 0BA3     		adr	r3, .L33
 556 011a D3E90023 		ldrd	r2, [r3]
 557 011e FFF7FEFF 		bl	__aeabi_dcmpgt
 558 0122 0346     		mov	r3, r0
 559 0124 002B     		cmp	r3, #0
 560 0126 02D0     		beq	.L27
 561              	.L31:
 275:App/Common/Minimal/flop.c **** 			sError = pdTRUE;
 562              		.loc 1 275 0
 563 0128 4FF00103 		mov	r3, #1
 564 012c 7B86     		strh	r3, [r7, #50]	@ movhi
 565              	.L27:
 282:App/Common/Minimal/flop.c **** 		if( sError == pdFALSE )
 566              		.loc 1 282 0
 567 012e B7F93230 		ldrsh	r3, [r7, #50]
 568 0132 002B     		cmp	r3, #0
 569 0134 7FF478AF 		bne	.L32
 287:App/Common/Minimal/flop.c **** 			( *pusTaskCheckVariable ) = pdTRUE;
 570              		.loc 1 287 0
 571 0138 BB6A     		ldr	r3, [r7, #40]
 572 013a 4FF00102 		mov	r2, #1
 573 013e 1A80     		strh	r2, [r3, #0]	@ movhi
 574              		.loc 1 289 0
 575 0140 72E7     		b	.L32
 576              	.L34:
 577 0142 00BFAFF3 		.align	3
 577      0080
 578              	.L33:
 579 0148 000000E0 		.word	-536870912
 580 014c 4D62503F 		.word	1062232653
 581              		.cfi_endproc
 582              	.LFE113:
 584              		.section	.text.vCompetingMathTask4,"ax",%progbits
 585              		.align	2
 586              		.thumb
 587              		.thumb_func
 589              	vCompetingMathTask4:
 590              	.LFB114:
 290:App/Common/Minimal/flop.c **** }
 291:App/Common/Minimal/flop.c **** /*-----------------------------------------------------------*/
 292:App/Common/Minimal/flop.c **** 
 293:App/Common/Minimal/flop.c **** static portTASK_FUNCTION( vCompetingMathTask4, pvParameters )
 294:App/Common/Minimal/flop.c **** {
 591              		.loc 1 294 0
 592              		.cfi_startproc
 593              		@ args = 0, pretend = 0, frame = 56
 594              		@ frame_needed = 1, uses_anonymous_args = 0
 595 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 596              	.LCFI12:
 597              		.cfi_def_cfa_offset 20
 598              		.cfi_offset 4, -20
 599              		.cfi_offset 5, -16
 600              		.cfi_offset 6, -12
 601              		.cfi_offset 7, -8
 602              		.cfi_offset 14, -4
 603 0002 8FB0     		sub	sp, sp, #60
 604              	.LCFI13:
 605              		.cfi_def_cfa_offset 80
 606 0004 00AF     		add	r7, sp, #0
 607              	.LCFI14:
 608              		.cfi_def_cfa_register 7
 609 0006 7860     		str	r0, [r7, #4]
 295:App/Common/Minimal/flop.c **** volatile portDOUBLE *pdArray, dTotal1, dTotal2, dDifference;
 296:App/Common/Minimal/flop.c **** volatile unsigned short *pusTaskCheckVariable;
 297:App/Common/Minimal/flop.c **** const size_t xArraySize = 10;
 610              		.loc 1 297 0
 611 0008 4FF00A03 		mov	r3, #10
 612 000c FB62     		str	r3, [r7, #44]
 298:App/Common/Minimal/flop.c **** size_t xPosition;
 299:App/Common/Minimal/flop.c **** short sError = pdFALSE;
 613              		.loc 1 299 0
 614 000e 4FF00003 		mov	r3, #0
 615 0012 7B86     		strh	r3, [r7, #50]	@ movhi
 300:App/Common/Minimal/flop.c **** 
 301:App/Common/Minimal/flop.c **** 	/* Some ports require that tasks that use a hardware floating point unit
 302:App/Common/Minimal/flop.c **** 	tell the kernel that they require a floating point context before any
 303:App/Common/Minimal/flop.c **** 	floating point instructions are executed. */
 304:App/Common/Minimal/flop.c **** 	portTASK_USES_FLOATING_POINT();
 305:App/Common/Minimal/flop.c **** 
 306:App/Common/Minimal/flop.c **** 	/* The variable this task increments to show it is still running is passed in
 307:App/Common/Minimal/flop.c **** 	as the parameter. */
 308:App/Common/Minimal/flop.c **** 	pusTaskCheckVariable = ( unsigned short * ) pvParameters;
 616              		.loc 1 308 0
 617 0014 7B68     		ldr	r3, [r7, #4]
 618 0016 BB62     		str	r3, [r7, #40]
 309:App/Common/Minimal/flop.c **** 
 310:App/Common/Minimal/flop.c **** 	pdArray = ( portDOUBLE * ) pvPortMalloc( xArraySize * sizeof( portDOUBLE ) );
 619              		.loc 1 310 0
 620 0018 FB6A     		ldr	r3, [r7, #44]
 621 001a 4FEAC303 		lsl	r3, r3, #3
 622 001e 1846     		mov	r0, r3
 623 0020 FFF7FEFF 		bl	pvPortMalloc
 624 0024 7862     		str	r0, [r7, #36]
 625 0026 00E0     		b	.L43
 626              	.L45:
 311:App/Common/Minimal/flop.c **** 
 312:App/Common/Minimal/flop.c **** 	/* Keep filling an array, keeping a running total of the values placed in the
 313:App/Common/Minimal/flop.c **** 	array.  Then run through the array adding up all the values.  If the two totals
 314:App/Common/Minimal/flop.c **** 	do not match, stop the check variable from incrementing. */
 315:App/Common/Minimal/flop.c **** 	for( ;; )
 316:App/Common/Minimal/flop.c **** 	{
 317:App/Common/Minimal/flop.c **** 		dTotal1 = 0.0;
 318:App/Common/Minimal/flop.c **** 		dTotal2 = 0.0;
 319:App/Common/Minimal/flop.c **** 
 320:App/Common/Minimal/flop.c **** 		for( xPosition = 0; xPosition < xArraySize; xPosition++ )
 321:App/Common/Minimal/flop.c **** 		{
 322:App/Common/Minimal/flop.c **** 			pdArray[ xPosition ] = ( portDOUBLE ) xPosition * 12.123;
 323:App/Common/Minimal/flop.c **** 			dTotal1 += ( portDOUBLE ) xPosition * 12.123;
 324:App/Common/Minimal/flop.c **** 		}
 325:App/Common/Minimal/flop.c **** 
 326:App/Common/Minimal/flop.c **** 		#if configUSE_PREEMPTION == 0
 327:App/Common/Minimal/flop.c **** 			taskYIELD();
 328:App/Common/Minimal/flop.c **** 		#endif
 329:App/Common/Minimal/flop.c **** 
 330:App/Common/Minimal/flop.c **** 		for( xPosition = 0; xPosition < xArraySize; xPosition++ )
 331:App/Common/Minimal/flop.c **** 		{
 332:App/Common/Minimal/flop.c **** 			dTotal2 += pdArray[ xPosition ];
 333:App/Common/Minimal/flop.c **** 		}
 334:App/Common/Minimal/flop.c **** 
 335:App/Common/Minimal/flop.c **** 		dDifference = dTotal1 - dTotal2;
 336:App/Common/Minimal/flop.c **** 		if( fabs( dDifference ) > 0.001 )
 337:App/Common/Minimal/flop.c **** 		{
 338:App/Common/Minimal/flop.c **** 			sError = pdTRUE;
 339:App/Common/Minimal/flop.c **** 		}
 340:App/Common/Minimal/flop.c **** 
 341:App/Common/Minimal/flop.c **** 		#if configUSE_PREEMPTION == 0
 342:App/Common/Minimal/flop.c **** 			taskYIELD();
 343:App/Common/Minimal/flop.c **** 		#endif
 344:App/Common/Minimal/flop.c **** 
 345:App/Common/Minimal/flop.c **** 		if( sError == pdFALSE )
 346:App/Common/Minimal/flop.c **** 		{
 347:App/Common/Minimal/flop.c **** 			/* If the calculation has always been correct then set set the check
 348:App/Common/Minimal/flop.c **** 			variable.  The check variable will get set to pdFALSE each time
 349:App/Common/Minimal/flop.c **** 			xAreMathsTaskStillRunning() is executed. */
 350:App/Common/Minimal/flop.c **** 			( *pusTaskCheckVariable ) = pdTRUE;
 351:App/Common/Minimal/flop.c **** 		}
 352:App/Common/Minimal/flop.c **** 	}
 627              		.loc 1 352 0
 628 0028 00BF     		nop
 629              	.L43:
 317:App/Common/Minimal/flop.c **** 		dTotal1 = 0.0;
 630              		.loc 1 317 0
 631 002a 4FF00002 		mov	r2, #0
 632 002e 4FF00003 		mov	r3, #0
 633 0032 C7E90623 		strd	r2, [r7, #24]
 318:App/Common/Minimal/flop.c **** 		dTotal2 = 0.0;
 634              		.loc 1 318 0
 635 0036 4FF00002 		mov	r2, #0
 636 003a 4FF00003 		mov	r3, #0
 637 003e C7E90423 		strd	r2, [r7, #16]
 320:App/Common/Minimal/flop.c **** 		for( xPosition = 0; xPosition < xArraySize; xPosition++ )
 638              		.loc 1 320 0
 639 0042 4FF00003 		mov	r3, #0
 640 0046 7B63     		str	r3, [r7, #52]
 641 0048 30E0     		b	.L36
 642              	.L37:
 322:App/Common/Minimal/flop.c **** 			pdArray[ xPosition ] = ( portDOUBLE ) xPosition * 12.123;
 643              		.loc 1 322 0 discriminator 2
 644 004a 7B6B     		ldr	r3, [r7, #52]
 645 004c 4FEAC303 		lsl	r3, r3, #3
 646 0050 7A6A     		ldr	r2, [r7, #36]
 647 0052 D618     		adds	r6, r2, r3
 648 0054 786B     		ldr	r0, [r7, #52]
 649 0056 FFF7FEFF 		bl	__aeabi_ui2d
 650 005a 0246     		mov	r2, r0
 651 005c 0B46     		mov	r3, r1
 652 005e 1046     		mov	r0, r2
 653 0060 1946     		mov	r1, r3
 654 0062 35A3     		adr	r3, .L46
 655 0064 D3E90023 		ldrd	r2, [r3]
 656 0068 FFF7FEFF 		bl	__aeabi_dmul
 657 006c 0246     		mov	r2, r0
 658 006e 0B46     		mov	r3, r1
 659 0070 C6E90023 		strd	r2, [r6]
 323:App/Common/Minimal/flop.c **** 			dTotal1 += ( portDOUBLE ) xPosition * 12.123;
 660              		.loc 1 323 0 discriminator 2
 661 0074 786B     		ldr	r0, [r7, #52]
 662 0076 FFF7FEFF 		bl	__aeabi_ui2d
 663 007a 0246     		mov	r2, r0
 664 007c 0B46     		mov	r3, r1
 665 007e 1046     		mov	r0, r2
 666 0080 1946     		mov	r1, r3
 667 0082 2DA3     		adr	r3, .L46
 668 0084 D3E90023 		ldrd	r2, [r3]
 669 0088 FFF7FEFF 		bl	__aeabi_dmul
 670 008c 0246     		mov	r2, r0
 671 008e 0B46     		mov	r3, r1
 672 0090 1046     		mov	r0, r2
 673 0092 1946     		mov	r1, r3
 674 0094 D7E90623 		ldrd	r2, [r7, #24]
 675 0098 FFF7FEFF 		bl	__aeabi_dadd
 676 009c 0246     		mov	r2, r0
 677 009e 0B46     		mov	r3, r1
 678 00a0 C7E90623 		strd	r2, [r7, #24]
 320:App/Common/Minimal/flop.c **** 		for( xPosition = 0; xPosition < xArraySize; xPosition++ )
 679              		.loc 1 320 0 discriminator 2
 680 00a4 7B6B     		ldr	r3, [r7, #52]
 681 00a6 03F10103 		add	r3, r3, #1
 682 00aa 7B63     		str	r3, [r7, #52]
 683              	.L36:
 320:App/Common/Minimal/flop.c **** 		for( xPosition = 0; xPosition < xArraySize; xPosition++ )
 684              		.loc 1 320 0 is_stmt 0 discriminator 1
 685 00ac 7A6B     		ldr	r2, [r7, #52]
 686 00ae FB6A     		ldr	r3, [r7, #44]
 687 00b0 9A42     		cmp	r2, r3
 688 00b2 CAD3     		bcc	.L37
 330:App/Common/Minimal/flop.c **** 		for( xPosition = 0; xPosition < xArraySize; xPosition++ )
 689              		.loc 1 330 0 is_stmt 1
 690 00b4 4FF00003 		mov	r3, #0
 691 00b8 7B63     		str	r3, [r7, #52]
 692 00ba 12E0     		b	.L38
 693              	.L39:
 332:App/Common/Minimal/flop.c **** 			dTotal2 += pdArray[ xPosition ];
 694              		.loc 1 332 0 discriminator 2
 695 00bc 7B6B     		ldr	r3, [r7, #52]
 696 00be 4FEAC303 		lsl	r3, r3, #3
 697 00c2 7A6A     		ldr	r2, [r7, #36]
 698 00c4 D318     		adds	r3, r2, r3
 699 00c6 D3E90001 		ldrd	r0, [r3]
 700 00ca D7E90423 		ldrd	r2, [r7, #16]
 701 00ce FFF7FEFF 		bl	__aeabi_dadd
 702 00d2 0246     		mov	r2, r0
 703 00d4 0B46     		mov	r3, r1
 704 00d6 C7E90423 		strd	r2, [r7, #16]
 330:App/Common/Minimal/flop.c **** 		for( xPosition = 0; xPosition < xArraySize; xPosition++ )
 705              		.loc 1 330 0 discriminator 2
 706 00da 7B6B     		ldr	r3, [r7, #52]
 707 00dc 03F10103 		add	r3, r3, #1
 708 00e0 7B63     		str	r3, [r7, #52]
 709              	.L38:
 330:App/Common/Minimal/flop.c **** 		for( xPosition = 0; xPosition < xArraySize; xPosition++ )
 710              		.loc 1 330 0 is_stmt 0 discriminator 1
 711 00e2 7A6B     		ldr	r2, [r7, #52]
 712 00e4 FB6A     		ldr	r3, [r7, #44]
 713 00e6 9A42     		cmp	r2, r3
 714 00e8 E8D3     		bcc	.L39
 335:App/Common/Minimal/flop.c **** 		dDifference = dTotal1 - dTotal2;
 715              		.loc 1 335 0 is_stmt 1
 716 00ea D7E90601 		ldrd	r0, [r7, #24]
 717 00ee D7E90423 		ldrd	r2, [r7, #16]
 718 00f2 FFF7FEFF 		bl	__aeabi_dsub
 719 00f6 0246     		mov	r2, r0
 720 00f8 0B46     		mov	r3, r1
 721 00fa C7E90223 		strd	r2, [r7, #8]
 336:App/Common/Minimal/flop.c **** 		if( fabs( dDifference ) > 0.001 )
 722              		.loc 1 336 0
 723 00fe D7E90223 		ldrd	r2, [r7, #8]
 724 0102 1446     		mov	r4, r2
 725 0104 23F00045 		bic	r5, r3, #-2147483648
 726 0108 2046     		mov	r0, r4
 727 010a 2946     		mov	r1, r5
 728 010c 0CA3     		adr	r3, .L46+8
 729 010e D3E90023 		ldrd	r2, [r3]
 730 0112 FFF7FEFF 		bl	__aeabi_dcmpgt
 731 0116 0346     		mov	r3, r0
 732 0118 002B     		cmp	r3, #0
 733 011a 02D0     		beq	.L40
 734              	.L44:
 338:App/Common/Minimal/flop.c **** 			sError = pdTRUE;
 735              		.loc 1 338 0
 736 011c 4FF00103 		mov	r3, #1
 737 0120 7B86     		strh	r3, [r7, #50]	@ movhi
 738              	.L40:
 345:App/Common/Minimal/flop.c **** 		if( sError == pdFALSE )
 739              		.loc 1 345 0
 740 0122 B7F93230 		ldrsh	r3, [r7, #50]
 741 0126 002B     		cmp	r3, #0
 742 0128 7FF47EAF 		bne	.L45
 350:App/Common/Minimal/flop.c **** 			( *pusTaskCheckVariable ) = pdTRUE;
 743              		.loc 1 350 0
 744 012c BB6A     		ldr	r3, [r7, #40]
 745 012e 4FF00102 		mov	r2, #1
 746 0132 1A80     		strh	r2, [r3, #0]	@ movhi
 747              		.loc 1 352 0
 748 0134 78E7     		b	.L45
 749              	.L47:
 750 0136 00BF     		.align	3
 751              	.L46:
 752 0138 000000E0 		.word	-536870912
 753 013c F93E2840 		.word	1076379385
 754 0140 000000E0 		.word	-536870912
 755 0144 4D62503F 		.word	1062232653
 756              		.cfi_endproc
 757              	.LFE114:
 759              		.section	.text.xAreMathsTaskStillRunning,"ax",%progbits
 760              		.align	2
 761              		.global	xAreMathsTaskStillRunning
 762              		.thumb
 763              		.thumb_func
 765              	xAreMathsTaskStillRunning:
 766              	.LFB115:
 353:App/Common/Minimal/flop.c **** }
 354:App/Common/Minimal/flop.c **** /*-----------------------------------------------------------*/
 355:App/Common/Minimal/flop.c **** 
 356:App/Common/Minimal/flop.c **** /* This is called to check that all the created tasks are still running. */
 357:App/Common/Minimal/flop.c **** portBASE_TYPE xAreMathsTaskStillRunning( void )
 358:App/Common/Minimal/flop.c **** {
 767              		.loc 1 358 0
 768              		.cfi_startproc
 769              		@ args = 0, pretend = 0, frame = 8
 770              		@ frame_needed = 1, uses_anonymous_args = 0
 771              		@ link register save eliminated.
 772 0000 80B4     		push	{r7}
 773              	.LCFI15:
 774              		.cfi_def_cfa_offset 4
 775              		.cfi_offset 7, -4
 776 0002 83B0     		sub	sp, sp, #12
 777              	.LCFI16:
 778              		.cfi_def_cfa_offset 16
 779 0004 00AF     		add	r7, sp, #0
 780              	.LCFI17:
 781              		.cfi_def_cfa_register 7
 359:App/Common/Minimal/flop.c **** portBASE_TYPE xReturn = pdPASS, xTask;
 782              		.loc 1 359 0
 783 0006 4FF00103 		mov	r3, #1
 784 000a 7B60     		str	r3, [r7, #4]
 360:App/Common/Minimal/flop.c **** 
 361:App/Common/Minimal/flop.c **** 	/* Check the maths tasks are still running by ensuring their check variables
 362:App/Common/Minimal/flop.c **** 	have been set to pdPASS. */
 363:App/Common/Minimal/flop.c **** 	for( xTask = 0; xTask < mathNUMBER_OF_TASKS; xTask++ )
 785              		.loc 1 363 0
 786 000c 4FF00003 		mov	r3, #0
 787 0010 3B60     		str	r3, [r7, #0]
 788 0012 1AE0     		b	.L49
 789              	.L52:
 364:App/Common/Minimal/flop.c **** 	{
 365:App/Common/Minimal/flop.c **** 		if( usTaskCheck[ xTask ] != pdTRUE )
 790              		.loc 1 365 0
 791 0014 40F20003 		movw	r3, #:lower16:usTaskCheck
 792 0018 C0F20003 		movt	r3, #:upper16:usTaskCheck
 793 001c 3A68     		ldr	r2, [r7, #0]
 794 001e 33F81230 		ldrh	r3, [r3, r2, lsl #1]	@ movhi
 795 0022 9BB2     		uxth	r3, r3
 796 0024 012B     		cmp	r3, #1
 797 0026 03D0     		beq	.L50
 366:App/Common/Minimal/flop.c **** 		{
 367:App/Common/Minimal/flop.c **** 			/* The check has not been set so the associated task has either
 368:App/Common/Minimal/flop.c **** 			stalled or detected an error. */
 369:App/Common/Minimal/flop.c **** 			xReturn = pdFAIL;
 798              		.loc 1 369 0
 799 0028 4FF00003 		mov	r3, #0
 800 002c 7B60     		str	r3, [r7, #4]
 801 002e 08E0     		b	.L51
 802              	.L50:
 370:App/Common/Minimal/flop.c **** 		}
 371:App/Common/Minimal/flop.c **** 		else
 372:App/Common/Minimal/flop.c **** 		{
 373:App/Common/Minimal/flop.c **** 			/* Reset the variable so it can be checked again the next time this
 374:App/Common/Minimal/flop.c **** 			function is executed. */
 375:App/Common/Minimal/flop.c **** 			usTaskCheck[ xTask ] = pdFALSE;
 803              		.loc 1 375 0
 804 0030 40F20003 		movw	r3, #:lower16:usTaskCheck
 805 0034 C0F20003 		movt	r3, #:upper16:usTaskCheck
 806 0038 3A68     		ldr	r2, [r7, #0]
 807 003a 4FF00001 		mov	r1, #0
 808 003e 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 809              	.L51:
 363:App/Common/Minimal/flop.c **** 	for( xTask = 0; xTask < mathNUMBER_OF_TASKS; xTask++ )
 810              		.loc 1 363 0
 811 0042 3B68     		ldr	r3, [r7, #0]
 812 0044 03F10103 		add	r3, r3, #1
 813 0048 3B60     		str	r3, [r7, #0]
 814              	.L49:
 363:App/Common/Minimal/flop.c **** 	for( xTask = 0; xTask < mathNUMBER_OF_TASKS; xTask++ )
 815              		.loc 1 363 0 is_stmt 0 discriminator 1
 816 004a 3B68     		ldr	r3, [r7, #0]
 817 004c 032B     		cmp	r3, #3
 818 004e E1DD     		ble	.L52
 376:App/Common/Minimal/flop.c **** 		}
 377:App/Common/Minimal/flop.c **** 	}
 378:App/Common/Minimal/flop.c **** 		
 379:App/Common/Minimal/flop.c **** 	return xReturn;
 819              		.loc 1 379 0 is_stmt 1
 820 0050 7B68     		ldr	r3, [r7, #4]
 380:App/Common/Minimal/flop.c **** }
 821              		.loc 1 380 0
 822 0052 1846     		mov	r0, r3
 823 0054 07F10C07 		add	r7, r7, #12
 824 0058 BD46     		mov	sp, r7
 825 005a 80BC     		pop	{r7}
 826 005c 7047     		bx	lr
 827              		.cfi_endproc
 828              	.LFE115:
 830 005e 00BF     		.text
 831              	.Letext0:
 832              		.file 2 "/home/thanhtruong/embedded-development/toolchain/gcc-arm-none-eabi-4_7-2013q1/bin/../lib/
 833              		.file 3 "/home/thanhtruong/embedded-development/toolchain/gcc-arm-none-eabi-4_7-2013q1/bin/../lib/
 834              		.file 4 "App/STM32F4-Discovery/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 flop.c
     /tmp/cc6ADSpN.s:20     .bss.usTaskCheck:00000000 $d
     /tmp/cc6ADSpN.s:23     .bss.usTaskCheck:00000000 usTaskCheck
     /tmp/cc6ADSpN.s:26     .rodata:00000000 $d
     /tmp/cc6ADSpN.s:27     .rodata:00000000 .LC0
     /tmp/cc6ADSpN.s:30     .rodata:00000008 .LC1
     /tmp/cc6ADSpN.s:33     .rodata:00000010 .LC2
     /tmp/cc6ADSpN.s:36     .rodata:00000018 .LC3
     /tmp/cc6ADSpN.s:39     .text.vStartMathTasks:00000000 $t
     /tmp/cc6ADSpN.s:44     .text.vStartMathTasks:00000000 vStartMathTasks
     /tmp/cc6ADSpN.s:150    .text.vCompetingMathTask1:00000000 vCompetingMathTask1
     /tmp/cc6ADSpN.s:282    .text.vCompetingMathTask2:00000000 vCompetingMathTask2
     /tmp/cc6ADSpN.s:414    .text.vCompetingMathTask3:00000000 vCompetingMathTask3
     /tmp/cc6ADSpN.s:589    .text.vCompetingMathTask4:00000000 vCompetingMathTask4
     /tmp/cc6ADSpN.s:135    .text.vStartMathTasks:000000d8 $d
     /tmp/cc6ADSpN.s:146    .text.vCompetingMathTask1:00000000 $t
     /tmp/cc6ADSpN.s:265    .text.vCompetingMathTask1:000000e0 $d
     /tmp/cc6ADSpN.s:278    .text.vCompetingMathTask2:00000000 $t
     /tmp/cc6ADSpN.s:399    .text.vCompetingMathTask2:000000e8 $d
     /tmp/cc6ADSpN.s:410    .text.vCompetingMathTask3:00000000 $t
     /tmp/cc6ADSpN.s:579    .text.vCompetingMathTask3:00000148 $d
     /tmp/cc6ADSpN.s:585    .text.vCompetingMathTask4:00000000 $t
     /tmp/cc6ADSpN.s:752    .text.vCompetingMathTask4:00000138 $d
     /tmp/cc6ADSpN.s:760    .text.xAreMathsTaskStillRunning:00000000 $t
     /tmp/cc6ADSpN.s:765    .text.xAreMathsTaskStillRunning:00000000 xAreMathsTaskStillRunning
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
xTaskGenericCreate
__aeabi_dadd
__aeabi_dmul
__aeabi_dsub
__aeabi_dcmpgt
__aeabi_ddiv
__aeabi_ui2d
pvPortMalloc
