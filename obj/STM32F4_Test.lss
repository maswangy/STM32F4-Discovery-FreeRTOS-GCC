
obj/STM32F4_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003510  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000008  08003698  08003698  0000b698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  080036a0  080036a0  0000b6a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000448  20000000  080036a4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00012d70  20000448  08003aec  00010448  2**2
                  ALLOC
  6 ._user_heap_stack 00000400  200131b8  0801685c  00010448  2**0
                  ALLOC
  7 .ARM.attributes 00000030  00000000  00000000  00010448  2**0
                  CONTENTS, READONLY
  8 .debug_info   000062bf  00000000  00000000  00010478  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001627  00000000  00000000  00016737  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002aec  00000000  00000000  00017d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000007e8  00000000  00000000  0001a84a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006f8  00000000  00000000  0001b032  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003fe0  00000000  00000000  0001b72a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002ea9  00000000  00000000  0001f70a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000070  00000000  00000000  000225b3  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001b44  00000000  00000000  00022624  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b110      	cbz	r0, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2101      	movs	r1, #1
 800019c:	7021      	strb	r1, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000448 	.word	0x20000448
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003680 	.word	0x08003680

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <frame_dummy+0x1c>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4806      	ldr	r0, [pc, #24]	; (80001cc <frame_dummy+0x20>)
 80001b4:	4906      	ldr	r1, [pc, #24]	; (80001d0 <frame_dummy+0x24>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4806      	ldr	r0, [pc, #24]	; (80001d4 <frame_dummy+0x28>)
 80001bc:	6801      	ldr	r1, [r0, #0]
 80001be:	b111      	cbz	r1, 80001c6 <frame_dummy+0x1a>
 80001c0:	4a05      	ldr	r2, [pc, #20]	; (80001d8 <frame_dummy+0x2c>)
 80001c2:	b102      	cbz	r2, 80001c6 <frame_dummy+0x1a>
 80001c4:	4790      	blx	r2
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003680 	.word	0x08003680
 80001d0:	2000044c 	.word	0x2000044c
 80001d4:	20000448 	.word	0x20000448
 80001d8:	00000000 	.word	0x00000000

080001dc <NVIC_SetPendingIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the interrupt for set pending
 */
static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	4603      	mov	r3, r0
 80001e4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 80001e6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80001ea:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80001ee:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80001f2:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80001f6:	79f9      	ldrb	r1, [r7, #7]
 80001f8:	f001 011f 	and.w	r1, r1, #31
 80001fc:	f04f 0001 	mov.w	r0, #1
 8000200:	fa00 f101 	lsl.w	r1, r0, r1
 8000204:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8000208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800020c:	f107 070c 	add.w	r7, r7, #12
 8000210:	46bd      	mov	sp, r7
 8000212:	bc80      	pop	{r7}
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop

08000218 <main>:
volatile unsigned long ulButtonPressCounts = 0UL;

/*-----------------------------------------------------------*/

int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	/* Configure the hardware ready to run the test. */
	prvSetupHardware();
 800021c:	f000 f808 	bl	8000230 <prvSetupHardware>
	/* Start standard demo/test application flash tasks.  See the comments at
	the top of this file.  The LED flash tasks are always created.  The other
	tasks are only created if mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY is set to
	0 (at the top of this file).  See the comments at the top of this file for
	more information. */
	vStartLEDFlashTasks( mainFLASH_TASK_PRIORITY );
 8000220:	f04f 0001 	mov.w	r0, #1
 8000224:	f002 fc56 	bl	8002ad4 <vStartLEDFlashTasks>
	mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY is set to 0 (at the top of this
	file).  See the comments at the top of this file for more information. */
	//prvOptionallyCreateComprehensveTestApplication();

	/* Start the scheduler. */
	vTaskStartScheduler();
 8000228:	f000 fb82 	bl	8000930 <vTaskStartScheduler>
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details. */
	for( ;; );
 800022c:	e7fe      	b.n	800022c <main+0x14>
 800022e:	bf00      	nop

08000230 <prvSetupHardware>:
	}
}
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	/* Setup STM32 system (clock, PLL and Flash configuration) */
	SystemInit();
 8000234:	f000 f922 	bl	800047c <SystemInit>

	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8000238:	f44f 7040 	mov.w	r0, #768	; 0x300
 800023c:	f002 fd0c 	bl	8002c58 <NVIC_PriorityGroupConfig>

	/* Setup the LED outputs. */
	vParTestInitialise();
 8000240:	f000 f8bc 	bl	80003bc <vParTestInitialise>

	/* Configure the button input.  This configures the interrupt to use the
	lowest interrupt priority, so it is ok to use the ISR safe FreeRTOS API
	from the button interrupt handler. */
	//STM_EVAL_PBInit( BUTTON_USER, BUTTON_MODE_EXTI );
}
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop

08000248 <vApplicationTickHook>:
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	#if ( mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY == 0 )
	{
		/* Just to verify that the interrupt nesting behaves as expected,
		increment ulFPUInterruptNesting on entry, and decrement it on exit. */
		ulFPUInterruptNesting++;
 800024c:	f240 4364 	movw	r3, #1124	; 0x464
 8000250:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f103 0201 	add.w	r2, r3, #1
 800025a:	f240 4364 	movw	r3, #1124	; 0x464
 800025e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000262:	601a      	str	r2, [r3, #0]

		/* Trigger a timer 2 interrupt, which will fill the registers with a
		different value and itself trigger a timer 3 interrupt.  Note that the
		timers are not actually used.  The timer 2 and 3 interrupt vectors are
		just used for convenience. */
		NVIC_SetPendingIRQ( TIM2_IRQn );
 8000264:	f04f 001c 	mov.w	r0, #28
 8000268:	f7ff ffb8 	bl	80001dc <NVIC_SetPendingIRQ>
		/* Ensure that, after returning from the nested interrupts, all the FPU
		registers contain the value to which they were set by the tick hook
		function. */
		//configASSERT( ulRegTestCheckFlopRegistersContainParameterValue( 0UL ) );

		ulFPUInterruptNesting--;
 800026c:	f240 4364 	movw	r3, #1124	; 0x464
 8000270:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f103 32ff 	add.w	r2, r3, #4294967295
 800027a:	f240 4364 	movw	r3, #1124	; 0x464
 800027e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000282:	601a      	str	r2, [r3, #0]
	}
	#endif
}
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop

08000288 <TIM3_IRQHandler>:
	NVIC_Init( &NVIC_InitStructure );
}
/*-----------------------------------------------------------*/

void TIM3_IRQHandler( void )
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
	/* Just to verify that the interrupt nesting behaves as expected, increment
	ulFPUInterruptNesting on entry, and decrement it on exit. */
	ulFPUInterruptNesting++;
 800028c:	f240 4364 	movw	r3, #1124	; 0x464
 8000290:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f103 0201 	add.w	r2, r3, #1
 800029a:	f240 4364 	movw	r3, #1124	; 0x464
 800029e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002a2:	601a      	str	r2, [r3, #0]

	/* This is the highest priority interrupt in the chain of forced nesting
	interrupts, so latch the maximum value reached by ulFPUInterruptNesting.
	This is done purely to allow verification that the nesting depth reaches
	that intended. */
	if( ulFPUInterruptNesting > ulMaxFPUInterruptNesting )
 80002a4:	f240 4364 	movw	r3, #1124	; 0x464
 80002a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	f240 4368 	movw	r3, #1128	; 0x468
 80002b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	429a      	cmp	r2, r3
 80002ba:	d909      	bls.n	80002d0 <TIM3_IRQHandler+0x48>
	{
		ulMaxFPUInterruptNesting = ulFPUInterruptNesting;
 80002bc:	f240 4364 	movw	r3, #1124	; 0x464
 80002c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	f240 4368 	movw	r3, #1128	; 0x468
 80002ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002ce:	601a      	str	r2, [r3, #0]

	/* Fill the FPU registers with 99 to overwrite the values written by
	TIM2_IRQHandler(). */
	//vRegTestClearFlopRegistersToParameterValue( 99UL );

	ulFPUInterruptNesting--;
 80002d0:	f240 4364 	movw	r3, #1124	; 0x464
 80002d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f103 32ff 	add.w	r2, r3, #4294967295
 80002de:	f240 4364 	movw	r3, #1124	; 0x464
 80002e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002e6:	601a      	str	r2, [r3, #0]
}
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <TIM2_IRQHandler>:
/*-----------------------------------------------------------*/

void TIM2_IRQHandler( void )
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	/* Just to verify that the interrupt nesting behaves as expected, increment
	ulFPUInterruptNesting on entry, and decrement it on exit. */
	ulFPUInterruptNesting++;
 80002f4:	f240 4364 	movw	r3, #1124	; 0x464
 80002f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	f103 0201 	add.w	r2, r3, #1
 8000302:	f240 4364 	movw	r3, #1124	; 0x464
 8000306:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800030a:	601a      	str	r2, [r3, #0]
	/* Fill the FPU registers with 1. */
	//vRegTestClearFlopRegistersToParameterValue( 1UL );

	/* Trigger a timer 3 interrupt, which will fill the registers with a
	different value. */
	NVIC_SetPendingIRQ( TIM3_IRQn );
 800030c:	f04f 001d 	mov.w	r0, #29
 8000310:	f7ff ff64 	bl	80001dc <NVIC_SetPendingIRQ>
	/* Ensure that, after returning from the nesting interrupt, all the FPU
	registers contain the value to which they were set by this interrupt
	function. */
	//configASSERT( ulRegTestCheckFlopRegistersContainParameterValue( 1UL ) );

	ulFPUInterruptNesting--;
 8000314:	f240 4364 	movw	r3, #1124	; 0x464
 8000318:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000322:	f240 4364 	movw	r3, #1124	; 0x464
 8000326:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800032a:	601a      	str	r2, [r3, #0]
}
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop

08000330 <EXTI9_5_IRQHandler>:
	#endif /* mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY */
}
/*-----------------------------------------------------------*/

void EXTI9_5_IRQHandler(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
long lHigherPriorityTaskWoken = pdFALSE;
 8000336:	f04f 0300 	mov.w	r3, #0
 800033a:	607b      	str	r3, [r7, #4]

	/* Only line 6 is enabled, so there is no need to test which line generated
	the interrupt. */
	EXTI_ClearITPendingBit( EXTI_Line6 );
 800033c:	f04f 0040 	mov.w	r0, #64	; 0x40
 8000340:	f002 fcb8 	bl	8002cb4 <EXTI_ClearITPendingBit>

	/* This interrupt does nothing more than demonstrate how to synchronise a
	task with an interrupt.  First the handler releases a semaphore.
	lHigherPriorityTaskWoken has been initialised to zero. */
	xSemaphoreGiveFromISR( xTestSemaphore, &lHigherPriorityTaskWoken );
 8000344:	f240 436c 	movw	r3, #1132	; 0x46c
 8000348:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800034c:	681a      	ldr	r2, [r3, #0]
 800034e:	f107 0304 	add.w	r3, r7, #4
 8000352:	4610      	mov	r0, r2
 8000354:	f04f 0100 	mov.w	r1, #0
 8000358:	461a      	mov	r2, r3
 800035a:	f04f 0300 	mov.w	r3, #0
 800035e:	f001 fb2f 	bl	80019c0 <xQueueGenericSendFromISR>
	semaphore caused the task to unblock, and the unblocked task has a priority
	higher than the currently executing task (the task that this interrupt
	interrupted), then lHigherPriorityTaskWoken will have been set to pdTRUE.
	Passing pdTRUE into the following macro call will cause this interrupt to
	return directly to the unblocked, higher priority, task. */
	portEND_SWITCHING_ISR( lHigherPriorityTaskWoken );
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d006      	beq.n	8000376 <EXTI9_5_IRQHandler+0x46>
 8000368:	f64e 5304 	movw	r3, #60676	; 0xed04
 800036c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000374:	601a      	str	r2, [r3, #0]
}
 8000376:	f107 0708 	add.w	r7, r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop

08000380 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 8000384:	f001 ffa4 	bl	80022d0 <ulPortSetInterruptMask>
	for( ;; );
 8000388:	e7fe      	b.n	8000388 <vApplicationMallocFailedHook+0x8>
 800038a:	bf00      	nop

0800038c <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	function, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop

08000398 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 80003a2:	f001 ff95 	bl	80022d0 <ulPortSetInterruptMask>
	for( ;; );
 80003a6:	e7fe      	b.n	80003a6 <vApplicationStackOverflowHook+0xe>

080003a8 <assert_failed>:
}
///*-----------------------------------------------------------*/
void assert_failed(uint8_t* file, uint32_t line){
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	6039      	str	r1, [r7, #0]

}
 80003b2:	f107 070c 	add.w	r7, r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr

080003bc <vParTestInitialise>:
static const Led_TypeDef xLEDs[ partstMAX_LEDS ] = { LED3, LED4, LED5, LED6 };

/*-----------------------------------------------------------*/

void vParTestInitialise( void )
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	/* Initialise all four LEDs that are built onto the starter kit. */
	STM_EVAL_LEDInit( LED3 );
 80003c0:	f04f 0001 	mov.w	r0, #1
 80003c4:	f002 fbf0 	bl	8002ba8 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit( LED4 );
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	f002 fbec 	bl	8002ba8 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit( LED5 );
 80003d0:	f04f 0002 	mov.w	r0, #2
 80003d4:	f002 fbe8 	bl	8002ba8 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit( LED6 );
 80003d8:	f04f 0003 	mov.w	r0, #3
 80003dc:	f002 fbe4 	bl	8002ba8 <STM_EVAL_LEDInit>
}
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop

080003e4 <vParTestToggleLED>:
	}
}
/*-----------------------------------------------------------*/

void vParTestToggleLED( unsigned long ulLED )
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
	if( ulLED < partstMAX_LEDS )
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	2b03      	cmp	r3, #3
 80003f0:	d80d      	bhi.n	800040e <vParTestToggleLED+0x2a>
	{
		taskENTER_CRITICAL();
 80003f2:	f001 ff3d 	bl	8002270 <vPortEnterCritical>
		{
			STM_EVAL_LEDToggle( xLEDs[ ulLED ] );
 80003f6:	f243 6344 	movw	r3, #13892	; 0x3644
 80003fa:	f6c0 0300 	movt	r3, #2048	; 0x800
 80003fe:	687a      	ldr	r2, [r7, #4]
 8000400:	189b      	adds	r3, r3, r2
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	4618      	mov	r0, r3
 8000406:	f002 fc05 	bl	8002c14 <STM_EVAL_LEDToggle>
		}
		taskEXIT_CRITICAL();
 800040a:	f001 ff47 	bl	800229c <vPortExitCritical>
	}
}
 800040e:	f107 0708 	add.w	r7, r7, #8
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop

08000418 <Reset_Handler>:
 8000418:	2100      	movs	r1, #0
 800041a:	f000 b804 	b.w	8000426 <LoopCopyDataInit>

0800041e <CopyDataInit>:
 800041e:	4b10      	ldr	r3, [pc, #64]	; (8000460 <LoopFillZerobss+0x22>)
 8000420:	585b      	ldr	r3, [r3, r1]
 8000422:	5043      	str	r3, [r0, r1]
 8000424:	3104      	adds	r1, #4

08000426 <LoopCopyDataInit>:
 8000426:	480f      	ldr	r0, [pc, #60]	; (8000464 <LoopFillZerobss+0x26>)
 8000428:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <LoopFillZerobss+0x2a>)
 800042a:	1842      	adds	r2, r0, r1
 800042c:	429a      	cmp	r2, r3
 800042e:	f4ff aff6 	bcc.w	800041e <CopyDataInit>
 8000432:	4a0e      	ldr	r2, [pc, #56]	; (800046c <LoopFillZerobss+0x2e>)
 8000434:	f000 b803 	b.w	800043e <LoopFillZerobss>

08000438 <FillZerobss>:
 8000438:	2300      	movs	r3, #0
 800043a:	f842 3b04 	str.w	r3, [r2], #4

0800043e <LoopFillZerobss>:
 800043e:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <LoopFillZerobss+0x32>)
 8000440:	429a      	cmp	r2, r3
 8000442:	f4ff aff9 	bcc.w	8000438 <FillZerobss>
 8000446:	480b      	ldr	r0, [pc, #44]	; (8000474 <LoopFillZerobss+0x36>)
 8000448:	6801      	ldr	r1, [r0, #0]
 800044a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800044e:	6001      	str	r1, [r0, #0]
 8000450:	f000 f814 	bl	800047c <SystemInit>
 8000454:	f002 fe60 	bl	8003118 <__libc_init_array>
 8000458:	f7ff fede 	bl	8000218 <main>
 800045c:	4770      	bx	lr
 800045e:	0000      	.short	0x0000
 8000460:	080036a4 	.word	0x080036a4
 8000464:	20000000 	.word	0x20000000
 8000468:	20000448 	.word	0x20000448
 800046c:	20000448 	.word	0x20000448
 8000470:	200131b8 	.word	0x200131b8
 8000474:	e000ed88 	.word	0xe000ed88

08000478 <ADC_IRQHandler>:
 8000478:	f7ff bffe 	b.w	8000478 <ADC_IRQHandler>

0800047c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000480:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000484:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000488:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800048c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000490:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8000494:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000498:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800049c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80004a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004a4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80004a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80004ac:	6812      	ldr	r2, [r2, #0]
 80004ae:	f042 0201 	orr.w	r2, r2, #1
 80004b2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80004b4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80004b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004bc:	f04f 0200 	mov.w	r2, #0
 80004c0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80004c2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80004c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004ca:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80004ce:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80004d2:	6812      	ldr	r2, [r2, #0]
 80004d4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80004d8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80004dc:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80004de:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80004e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004e6:	f243 0210 	movw	r2, #12304	; 0x3010
 80004ea:	f2c2 4200 	movt	r2, #9216	; 0x2400
 80004ee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80004f0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80004f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004f8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80004fc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000500:	6812      	ldr	r2, [r2, #0]
 8000502:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000506:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000508:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800050c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000510:	f04f 0200 	mov.w	r2, #0
 8000514:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000516:	f000 f809 	bl	800052c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800051a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800051e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000522:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000526:	609a      	str	r2, [r3, #8]
#endif
}
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop

0800052c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000532:	f04f 0300 	mov.w	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	f04f 0300 	mov.w	r3, #0
 800053c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800053e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000542:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000546:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800054a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800054e:	6812      	ldr	r2, [r2, #0]
 8000550:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000554:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000556:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800055a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000564:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	f103 0301 	add.w	r3, r3, #1
 800056c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d103      	bne.n	800057c <SetSysClock+0x50>
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800057a:	d1ec      	bne.n	8000556 <SetSysClock+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800057c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000580:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800058a:	2b00      	cmp	r3, #0
 800058c:	d003      	beq.n	8000596 <SetSysClock+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 800058e:	f04f 0301 	mov.w	r3, #1
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	e002      	b.n	800059c <SetSysClock+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000596:	f04f 0300 	mov.w	r3, #0
 800059a:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	f040 8082 	bne.w	80006a8 <SetSysClock+0x17c>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80005a4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80005a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005ac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80005b0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80005b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80005b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80005ba:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80005bc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80005c0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80005c4:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80005c8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80005cc:	6812      	ldr	r2, [r2, #0]
 80005ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80005d2:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80005d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80005d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005dc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80005e0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80005e4:	6892      	ldr	r2, [r2, #8]
 80005e6:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80005e8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80005ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005f0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80005f4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80005f8:	6892      	ldr	r2, [r2, #8]
 80005fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80005fe:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000600:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000604:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000608:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800060c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000610:	6892      	ldr	r2, [r2, #8]
 8000612:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000616:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000618:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800061c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000620:	f644 3219 	movw	r2, #19225	; 0x4b19
 8000624:	f2c0 7240 	movt	r2, #1856	; 0x740
 8000628:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800062a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800062e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000632:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000636:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800063a:	6812      	ldr	r2, [r2, #0]
 800063c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000640:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000642:	bf00      	nop
 8000644:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000648:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000652:	2b00      	cmp	r3, #0
 8000654:	d0f6      	beq.n	8000644 <SetSysClock+0x118>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_4WS;
 8000656:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800065a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800065e:	f240 6204 	movw	r2, #1540	; 0x604
 8000662:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000664:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000668:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800066c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000670:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000674:	6892      	ldr	r2, [r2, #8]
 8000676:	f022 0203 	bic.w	r2, r2, #3
 800067a:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800067c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000680:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000684:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000688:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800068c:	6892      	ldr	r2, [r2, #8]
 800068e:	f042 0202 	orr.w	r2, r2, #2
 8000692:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000694:	bf00      	nop
 8000696:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800069a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	f003 030c 	and.w	r3, r3, #12
 80006a4:	2b08      	cmp	r3, #8
 80006a6:	d1f6      	bne.n	8000696 <SetSysClock+0x16a>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80006a8:	f107 070c 	add.w	r7, r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <xTaskGenericCreate>:
	static portTickType prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;

#endif

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	; 0x28
 80006b8:	af02      	add	r7, sp, #8
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	4613      	mov	r3, r2
 80006c2:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d102      	bne.n	80006d0 <xTaskGenericCreate+0x1c>
 80006ca:	f001 fe01 	bl	80022d0 <ulPortSetInterruptMask>
 80006ce:	e7fe      	b.n	80006ce <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 80006d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006d2:	2b04      	cmp	r3, #4
 80006d4:	d902      	bls.n	80006dc <xTaskGenericCreate+0x28>
 80006d6:	f001 fdfb 	bl	80022d0 <ulPortSetInterruptMask>
 80006da:	e7fe      	b.n	80006da <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 80006dc:	88fb      	ldrh	r3, [r7, #6]
 80006de:	4618      	mov	r0, r3
 80006e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80006e2:	f000 fed1 	bl	8001488 <prvAllocateTCBAndStack>
 80006e6:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 80006e8:	69bb      	ldr	r3, [r7, #24]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	f000 80a3 	beq.w	8000836 <xTaskGenericCreate+0x182>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 80006f0:	69bb      	ldr	r3, [r7, #24]
 80006f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006f4:	88fb      	ldrh	r3, [r7, #6]
 80006f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80006fa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80006fe:	18d3      	adds	r3, r2, r3
 8000700:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	f023 0307 	bic.w	r3, r3, #7
 8000708:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	f003 0307 	and.w	r3, r3, #7
 8000710:	2b00      	cmp	r3, #0
 8000712:	d002      	beq.n	800071a <xTaskGenericCreate+0x66>
 8000714:	f001 fddc 	bl	80022d0 <ulPortSetInterruptMask>
 8000718:	e7fe      	b.n	8000718 <xTaskGenericCreate+0x64>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 800071a:	88fb      	ldrh	r3, [r7, #6]
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	69b8      	ldr	r0, [r7, #24]
 8000720:	68b9      	ldr	r1, [r7, #8]
 8000722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000726:	f000 fd79 	bl	800121c <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800072a:	6978      	ldr	r0, [r7, #20]
 800072c:	68f9      	ldr	r1, [r7, #12]
 800072e:	683a      	ldr	r2, [r7, #0]
 8000730:	f001 fc9a 	bl	8002068 <pxPortInitialiseStack>
 8000734:	4602      	mov	r2, r0
 8000736:	69bb      	ldr	r3, [r7, #24]
 8000738:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 800073a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800073c:	2b00      	cmp	r3, #0
 800073e:	d002      	beq.n	8000746 <xTaskGenericCreate+0x92>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 8000740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000742:	69ba      	ldr	r2, [r7, #24]
 8000744:	601a      	str	r2, [r3, #0]
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 8000746:	f001 fd93 	bl	8002270 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 800074a:	f240 5348 	movw	r3, #1352	; 0x548
 800074e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f103 0201 	add.w	r2, r3, #1
 8000758:	f240 5348 	movw	r3, #1352	; 0x548
 800075c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000760:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 8000762:	f240 4370 	movw	r3, #1136	; 0x470
 8000766:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d10f      	bne.n	8000790 <xTaskGenericCreate+0xdc>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8000770:	f240 4370 	movw	r3, #1136	; 0x470
 8000774:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000778:	69ba      	ldr	r2, [r7, #24]
 800077a:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 800077c:	f240 5348 	movw	r3, #1352	; 0x548
 8000780:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d118      	bne.n	80007bc <xTaskGenericCreate+0x108>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 800078a:	f000 fd97 	bl	80012bc <prvInitialiseTaskLists>
 800078e:	e015      	b.n	80007bc <xTaskGenericCreate+0x108>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8000790:	f240 5354 	movw	r3, #1364	; 0x554
 8000794:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d10e      	bne.n	80007bc <xTaskGenericCreate+0x108>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800079e:	f240 4370 	movw	r3, #1136	; 0x470
 80007a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d805      	bhi.n	80007bc <xTaskGenericCreate+0x108>
					{
						pxCurrentTCB = pxNewTCB;
 80007b0:	f240 4370 	movw	r3, #1136	; 0x470
 80007b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80007b8:	69ba      	ldr	r2, [r7, #24]
 80007ba:	601a      	str	r2, [r3, #0]
					}
				}
			}

			uxTaskNumber++;
 80007bc:	f240 5368 	movw	r3, #1384	; 0x568
 80007c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f103 0201 	add.w	r2, r3, #1
 80007ca:	f240 5368 	movw	r3, #1384	; 0x568
 80007ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80007d2:	601a      	str	r2, [r3, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 80007d4:	f240 5368 	movw	r3, #1384	; 0x568
 80007d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	69bb      	ldr	r3, [r7, #24]
 80007e0:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 80007e2:	69bb      	ldr	r3, [r7, #24]
 80007e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007e6:	f240 5350 	movw	r3, #1360	; 0x550
 80007ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d906      	bls.n	8000802 <xTaskGenericCreate+0x14e>
 80007f4:	69bb      	ldr	r3, [r7, #24]
 80007f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007f8:	f240 5350 	movw	r3, #1360	; 0x550
 80007fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	69bb      	ldr	r3, [r7, #24]
 8000804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000806:	4613      	mov	r3, r2
 8000808:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800080c:	189b      	adds	r3, r3, r2
 800080e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000812:	f240 4274 	movw	r2, #1140	; 0x474
 8000816:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800081a:	189a      	adds	r2, r3, r2
 800081c:	69bb      	ldr	r3, [r7, #24]
 800081e:	f103 0304 	add.w	r3, r3, #4
 8000822:	4610      	mov	r0, r2
 8000824:	4619      	mov	r1, r3
 8000826:	f001 fb95 	bl	8001f54 <vListInsertEnd>

			xReturn = pdPASS;
 800082a:	f04f 0301 	mov.w	r3, #1
 800082e:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8000830:	f001 fd34 	bl	800229c <vPortExitCritical>
 8000834:	e002      	b.n	800083c <xTaskGenericCreate+0x188>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000836:	f04f 33ff 	mov.w	r3, #4294967295
 800083a:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 800083c:	69fb      	ldr	r3, [r7, #28]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d111      	bne.n	8000866 <xTaskGenericCreate+0x1b2>
	{
		if( xSchedulerRunning != pdFALSE )
 8000842:	f240 5354 	movw	r3, #1364	; 0x554
 8000846:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d00a      	beq.n	8000866 <xTaskGenericCreate+0x1b2>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8000850:	f240 4370 	movw	r3, #1136	; 0x470
 8000854:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800085c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800085e:	429a      	cmp	r2, r3
 8000860:	d201      	bcs.n	8000866 <xTaskGenericCreate+0x1b2>
			{
				portYIELD_WITHIN_API();
 8000862:	f001 fcf5 	bl	8002250 <vPortYield>
			}
		}
	}

	return xReturn;
 8000866:	69fb      	ldr	r3, [r7, #28]
}
 8000868:	4618      	mov	r0, r3
 800086a:	f107 0720 	add.w	r7, r7, #32
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop

08000874 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 800087e:	f04f 0300 	mov.w	r3, #0
 8000882:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d102      	bne.n	8000890 <vTaskDelayUntil+0x1c>
 800088a:	f001 fd21 	bl	80022d0 <ulPortSetInterruptMask>
 800088e:	e7fe      	b.n	800088e <vTaskDelayUntil+0x1a>
		configASSERT( ( xTimeIncrement > 0U ) );
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d102      	bne.n	800089c <vTaskDelayUntil+0x28>
 8000896:	f001 fd1b 	bl	80022d0 <ulPortSetInterruptMask>
 800089a:	e7fe      	b.n	800089a <vTaskDelayUntil+0x26>

		vTaskSuspendAll();
 800089c:	f000 f88c 	bl	80009b8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const portTickType xConstTickCount = xTickCount;
 80008a0:	f240 534c 	movw	r3, #1356	; 0x54c
 80008a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	18d3      	adds	r3, r2, r3
 80008b4:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	693b      	ldr	r3, [r7, #16]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d90c      	bls.n	80008da <vTaskDelayUntil+0x66>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d913      	bls.n	80008f2 <vTaskDelayUntil+0x7e>
 80008ca:	68fa      	ldr	r2, [r7, #12]
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d90f      	bls.n	80008f2 <vTaskDelayUntil+0x7e>
				{
					xShouldDelay = pdTRUE;
 80008d2:	f04f 0301 	mov.w	r3, #1
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	e00b      	b.n	80008f2 <vTaskDelayUntil+0x7e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d803      	bhi.n	80008ec <vTaskDelayUntil+0x78>
 80008e4:	68fa      	ldr	r2, [r7, #12]
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d902      	bls.n	80008f2 <vTaskDelayUntil+0x7e>
				{
					xShouldDelay = pdTRUE;
 80008ec:	f04f 0301 	mov.w	r3, #1
 80008f0:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	68fa      	ldr	r2, [r7, #12]
 80008f6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d00c      	beq.n	8000918 <vTaskDelayUntil+0xa4>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 80008fe:	f240 4370 	movw	r3, #1136	; 0x470
 8000902:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f103 0304 	add.w	r3, r3, #4
 800090c:	4618      	mov	r0, r3
 800090e:	f001 fb7f 	bl	8002010 <uxListRemove>
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8000912:	68f8      	ldr	r0, [r7, #12]
 8000914:	f000 fd72 	bl	80013fc <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8000918:	f000 f860 	bl	80009dc <xTaskResumeAll>
 800091c:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d101      	bne.n	8000928 <vTaskDelayUntil+0xb4>
		{
			portYIELD_WITHIN_API();
 8000924:	f001 fc94 	bl	8002250 <vPortYield>
		}
	}
 8000928:	f107 0718 	add.w	r7, r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 8000936:	f04f 0300 	mov.w	r3, #0
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	f04f 0300 	mov.w	r3, #0
 8000940:	9301      	str	r3, [sp, #4]
 8000942:	f04f 0300 	mov.w	r3, #0
 8000946:	9302      	str	r3, [sp, #8]
 8000948:	f04f 0300 	mov.w	r3, #0
 800094c:	9303      	str	r3, [sp, #12]
 800094e:	f241 10f9 	movw	r0, #4601	; 0x11f9
 8000952:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000956:	f243 41f4 	movw	r1, #13556	; 0x34f4
 800095a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800095e:	f04f 0282 	mov.w	r2, #130	; 0x82
 8000962:	f04f 0300 	mov.w	r3, #0
 8000966:	f7ff fea5 	bl	80006b4 <xTaskGenericCreate>
 800096a:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d102      	bne.n	8000978 <vTaskStartScheduler+0x48>
		{
			xReturn = xTimerCreateTimerTask();
 8000972:	f001 fd55 	bl	8002420 <xTimerCreateTimerTask>
 8000976:	6078      	str	r0, [r7, #4]
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b01      	cmp	r3, #1
 800097c:	d112      	bne.n	80009a4 <vTaskStartScheduler+0x74>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800097e:	f001 fca7 	bl	80022d0 <ulPortSetInterruptMask>
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
 8000982:	f240 5354 	movw	r3, #1364	; 0x554
 8000986:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800098a:	f04f 0201 	mov.w	r2, #1
 800098e:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 8000990:	f240 534c 	movw	r3, #1356	; 0x54c
 8000994:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000998:	f04f 0200 	mov.w	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800099e:	f001 fbc5 	bl	800212c <xPortStartScheduler>
 80009a2:	e005      	b.n	80009b0 <vTaskStartScheduler+0x80>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d102      	bne.n	80009b0 <vTaskStartScheduler+0x80>
 80009aa:	f001 fc91 	bl	80022d0 <ulPortSetInterruptMask>
 80009ae:	e7fe      	b.n	80009ae <vTaskStartScheduler+0x7e>
	}
}
 80009b0:	f107 0708 	add.w	r7, r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 80009bc:	f240 5358 	movw	r3, #1368	; 0x558
 80009c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f103 0201 	add.w	r2, r3, #1
 80009ca:	f240 5358 	movw	r3, #1368	; 0x558
 80009ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009d2:	601a      	str	r2, [r3, #0]
}
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
tskTCB *pxTCB;
portBASE_TYPE xAlreadyYielded = pdFALSE;
 80009e2:	f04f 0300 	mov.w	r3, #0
 80009e6:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80009e8:	f240 5358 	movw	r3, #1368	; 0x558
 80009ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d102      	bne.n	80009fc <xTaskResumeAll+0x20>
 80009f6:	f001 fc6b 	bl	80022d0 <ulPortSetInterruptMask>
 80009fa:	e7fe      	b.n	80009fa <xTaskResumeAll+0x1e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80009fc:	f001 fc38 	bl	8002270 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000a00:	f240 5358 	movw	r3, #1368	; 0x558
 8000a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f103 32ff 	add.w	r2, r3, #4294967295
 8000a0e:	f240 5358 	movw	r3, #1368	; 0x558
 8000a12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a16:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8000a18:	f240 5358 	movw	r3, #1368	; 0x558
 8000a1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	f040 808b 	bne.w	8000b3e <xTaskResumeAll+0x162>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 8000a28:	f240 5348 	movw	r3, #1352	; 0x548
 8000a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	f000 8083 	beq.w	8000b3e <xTaskResumeAll+0x162>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000a38:	e047      	b.n	8000aca <xTaskResumeAll+0xee>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8000a3a:	f240 5308 	movw	r3, #1288	; 0x508
 8000a3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	68db      	ldr	r3, [r3, #12]
 8000a46:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	f103 0318 	add.w	r3, r3, #24
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f001 fade 	bl	8002010 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	f103 0304 	add.w	r3, r3, #4
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f001 fad8 	bl	8002010 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a64:	f240 5350 	movw	r3, #1360	; 0x550
 8000a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d906      	bls.n	8000a80 <xTaskResumeAll+0xa4>
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a76:	f240 5350 	movw	r3, #1360	; 0x550
 8000a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a84:	4613      	mov	r3, r2
 8000a86:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000a8a:	189b      	adds	r3, r3, r2
 8000a8c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000a90:	f240 4274 	movw	r2, #1140	; 0x474
 8000a94:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000a98:	189a      	adds	r2, r3, r2
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	f103 0304 	add.w	r3, r3, #4
 8000aa0:	4610      	mov	r0, r2
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	f001 fa56 	bl	8001f54 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aac:	f240 4370 	movw	r3, #1136	; 0x470
 8000ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d306      	bcc.n	8000aca <xTaskResumeAll+0xee>
					{
						xYieldPending = pdTRUE;
 8000abc:	f240 5360 	movw	r3, #1376	; 0x560
 8000ac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ac4:	f04f 0201 	mov.w	r2, #1
 8000ac8:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000aca:	f240 5308 	movw	r3, #1288	; 0x508
 8000ace:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d1b0      	bne.n	8000a3a <xTaskResumeAll+0x5e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 8000ad8:	f240 535c 	movw	r3, #1372	; 0x55c
 8000adc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d01f      	beq.n	8000b26 <xTaskResumeAll+0x14a>
				{
					while( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 8000ae6:	e017      	b.n	8000b18 <xTaskResumeAll+0x13c>
					{
						if( xTaskIncrementTick() != pdFALSE )
 8000ae8:	f000 f846 	bl	8000b78 <xTaskIncrementTick>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d006      	beq.n	8000b00 <xTaskResumeAll+0x124>
						{
							xYieldPending = pdTRUE;
 8000af2:	f240 5360 	movw	r3, #1376	; 0x560
 8000af6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000afa:	f04f 0201 	mov.w	r2, #1
 8000afe:	601a      	str	r2, [r3, #0]
						}
						--uxPendedTicks;
 8000b00:	f240 535c 	movw	r3, #1372	; 0x55c
 8000b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f103 32ff 	add.w	r2, r3, #4294967295
 8000b0e:	f240 535c 	movw	r3, #1372	; 0x55c
 8000b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b16:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 8000b18:	f240 535c 	movw	r3, #1372	; 0x55c
 8000b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d1e0      	bne.n	8000ae8 <xTaskResumeAll+0x10c>
						}
						--uxPendedTicks;
					}
				}

				if( xYieldPending == pdTRUE )
 8000b26:	f240 5360 	movw	r3, #1376	; 0x560
 8000b2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d104      	bne.n	8000b3e <xTaskResumeAll+0x162>
				{
					xAlreadyYielded = pdTRUE;
 8000b34:	f04f 0301 	mov.w	r3, #1
 8000b38:	607b      	str	r3, [r7, #4]
					portYIELD_WITHIN_API();
 8000b3a:	f001 fb89 	bl	8002250 <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 8000b3e:	f001 fbad 	bl	800229c <vPortExitCritical>

	return xAlreadyYielded;
 8000b42:	687b      	ldr	r3, [r7, #4]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	f107 0708 	add.w	r7, r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop

08000b50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCount( void )
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 8000b56:	f001 fb8b 	bl	8002270 <vPortEnterCritical>
	{
		xTicks = xTickCount;
 8000b5a:	f240 534c 	movw	r3, #1356	; 0x54c
 8000b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 8000b66:	f001 fb99 	bl	800229c <vPortExitCritical>

	return xTicks;
 8000b6a:	687b      	ldr	r3, [r7, #4]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f107 0708 	add.w	r7, r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop

08000b78 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

portBASE_TYPE xTaskIncrementTick( void )
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
tskTCB * pxTCB;
portTickType xItemValue;
portBASE_TYPE xSwitchRequired = pdFALSE;
 8000b7e:	f04f 0300 	mov.w	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8000b84:	f240 5358 	movw	r3, #1368	; 0x558
 8000b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f040 8102 	bne.w	8000d98 <xTaskIncrementTick+0x220>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8000b94:	f240 534c 	movw	r3, #1356	; 0x54c
 8000b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f103 0201 	add.w	r2, r3, #1
 8000ba2:	f240 534c 	movw	r3, #1356	; 0x54c
 8000ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000baa:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const portTickType xConstTickCount = xTickCount;
 8000bac:	f240 534c 	movw	r3, #1356	; 0x54c
 8000bb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( portTickType ) 0U )
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d152      	bne.n	8000c64 <xTaskIncrementTick+0xec>
			{
				taskSWITCH_DELAYED_LISTS();
 8000bbe:	f240 5300 	movw	r3, #1280	; 0x500
 8000bc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d002      	beq.n	8000bd4 <xTaskIncrementTick+0x5c>
 8000bce:	f001 fb7f 	bl	80022d0 <ulPortSetInterruptMask>
 8000bd2:	e7fe      	b.n	8000bd2 <xTaskIncrementTick+0x5a>
 8000bd4:	f240 5300 	movw	r3, #1280	; 0x500
 8000bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	f240 5304 	movw	r3, #1284	; 0x504
 8000be4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	f240 5300 	movw	r3, #1280	; 0x500
 8000bee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	f240 5304 	movw	r3, #1284	; 0x504
 8000bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bfc:	68fa      	ldr	r2, [r7, #12]
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	f240 5364 	movw	r3, #1380	; 0x564
 8000c04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f103 0201 	add.w	r2, r3, #1
 8000c0e:	f240 5364 	movw	r3, #1380	; 0x564
 8000c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	f240 5300 	movw	r3, #1280	; 0x500
 8000c1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d102      	bne.n	8000c2e <xTaskIncrementTick+0xb6>
 8000c28:	f04f 0301 	mov.w	r3, #1
 8000c2c:	e001      	b.n	8000c32 <xTaskIncrementTick+0xba>
 8000c2e:	f04f 0300 	mov.w	r3, #0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d007      	beq.n	8000c46 <xTaskIncrementTick+0xce>
 8000c36:	f240 0304 	movw	r3, #4
 8000c3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	e00e      	b.n	8000c64 <xTaskIncrementTick+0xec>
 8000c46:	f240 5300 	movw	r3, #1280	; 0x500
 8000c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	685a      	ldr	r2, [r3, #4]
 8000c5a:	f240 0304 	movw	r3, #4
 8000c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c62:	601a      	str	r2, [r3, #0]

			/* See if this tick has made a timeout expire.  Tasks are stored in the
			queue in the order of their wake time - meaning once one tasks has been
			found whose block time has not expired there is no need not look any
			further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8000c64:	f240 0304 	movw	r3, #4
 8000c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d370      	bcc.n	8000d56 <xTaskIncrementTick+0x1de>
 8000c74:	e000      	b.n	8000c78 <xTaskIncrementTick+0x100>
								xSwitchRequired = pdTRUE;
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
 8000c76:	bf00      	nop
			further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000c78:	f240 5300 	movw	r3, #1280	; 0x500
 8000c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <xTaskIncrementTick+0x116>
 8000c88:	f04f 0301 	mov.w	r3, #1
 8000c8c:	e001      	b.n	8000c92 <xTaskIncrementTick+0x11a>
 8000c8e:	f04f 0300 	mov.w	r3, #0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d007      	beq.n	8000ca6 <xTaskIncrementTick+0x12e>
					{
						/* The delayed list is empty.  Set xNextTaskUnblockTime to
						the	maximum possible value so it is extremely unlikely that
						the if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8000c96:	f240 0304 	movw	r3, #4
 8000c9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca2:	601a      	str	r2, [r3, #0]
						break;
 8000ca4:	e057      	b.n	8000d56 <xTaskIncrementTick+0x1de>
					{
						/* The delayed list is not empty, get the value of the item
						at the head of the delayed list.  This is the time at which
						the task at the head of the delayed list must be removed
						from the Blocked state. */
						pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000ca6:	f240 5300 	movw	r3, #1280	; 0x500
 8000caa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d206      	bcs.n	8000cd2 <xTaskIncrementTick+0x15a>
						{
							/* It is not time to unblock this item yet, but the item
							value is the time at which the task at the head of the
							blocked list must be removed from the Blocked state -
							so record the item value in xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8000cc4:	f240 0304 	movw	r3, #4
 8000cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	601a      	str	r2, [r3, #0]
							break;
 8000cd0:	e041      	b.n	8000d56 <xTaskIncrementTick+0x1de>
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	f103 0304 	add.w	r3, r3, #4
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f001 f999 	bl	8002010 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove it
						from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d005      	beq.n	8000cf2 <xTaskIncrementTick+0x17a>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	f103 0318 	add.w	r3, r3, #24
 8000cec:	4618      	mov	r0, r3
 8000cee:	f001 f98f 	bl	8002010 <uxListRemove>
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cf6:	f240 5350 	movw	r3, #1360	; 0x550
 8000cfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d906      	bls.n	8000d12 <xTaskIncrementTick+0x19a>
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d08:	f240 5350 	movw	r3, #1360	; 0x550
 8000d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d16:	4613      	mov	r3, r2
 8000d18:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000d1c:	189b      	adds	r3, r3, r2
 8000d1e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000d22:	f240 4274 	movw	r2, #1140	; 0x474
 8000d26:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000d2a:	189a      	adds	r2, r3, r2
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	f103 0304 	add.w	r3, r3, #4
 8000d32:	4610      	mov	r0, r2
 8000d34:	4619      	mov	r1, r3
 8000d36:	f001 f90d 	bl	8001f54 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should only
							be performed if the unblocked task has a priority that
							is equal to or higher than the currently executing
							task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d3e:	f240 4370 	movw	r3, #1136	; 0x470
 8000d42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d393      	bcc.n	8000c76 <xTaskIncrementTick+0xfe>
							{
								xSwitchRequired = pdTRUE;
 8000d4e:	f04f 0301 	mov.w	r3, #1
 8000d52:	617b      	str	r3, [r7, #20]
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
 8000d54:	e78f      	b.n	8000c76 <xTaskIncrementTick+0xfe>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8000d56:	f240 4370 	movw	r3, #1136	; 0x470
 8000d5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d62:	f240 4274 	movw	r2, #1140	; 0x474
 8000d66:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000d70:	185b      	adds	r3, r3, r1
 8000d72:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000d76:	18d3      	adds	r3, r2, r3
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d902      	bls.n	8000d84 <xTaskIncrementTick+0x20c>
			{
				xSwitchRequired = pdTRUE;
 8000d7e:	f04f 0301 	mov.w	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
		
		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( unsigned portBASE_TYPE ) 0U )
 8000d84:	f240 535c 	movw	r3, #1372	; 0x55c
 8000d88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d110      	bne.n	8000db4 <xTaskIncrementTick+0x23c>
			{
				vApplicationTickHook();
 8000d92:	f7ff fa59 	bl	8000248 <vApplicationTickHook>
 8000d96:	e00d      	b.n	8000db4 <xTaskIncrementTick+0x23c>
		}
		#endif /* configUSE_TICK_HOOK */		
	}
	else
	{
		++uxPendedTicks;
 8000d98:	f240 535c 	movw	r3, #1372	; 0x55c
 8000d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f103 0201 	add.w	r2, r3, #1
 8000da6:	f240 535c 	movw	r3, #1372	; 0x55c
 8000daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000dae:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8000db0:	f7ff fa4a 	bl	8000248 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8000db4:	f240 5360 	movw	r3, #1376	; 0x560
 8000db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d002      	beq.n	8000dc8 <xTaskIncrementTick+0x250>
		{
			xSwitchRequired = pdTRUE;
 8000dc2:	f04f 0301 	mov.w	r3, #1
 8000dc6:	617b      	str	r3, [r7, #20]
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8000dc8:	697b      	ldr	r3, [r7, #20]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f107 0718 	add.w	r7, r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 8000dda:	f240 5358 	movw	r3, #1368	; 0x558
 8000dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d007      	beq.n	8000df8 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8000de8:	f240 5360 	movw	r3, #1376	; 0x560
 8000dec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000df0:	f04f 0201 	mov.w	r2, #1
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	e09a      	b.n	8000f2e <vTaskSwitchContext+0x15a>
	}
	else
	{
		xYieldPending = pdFALSE;
 8000df8:	f240 5360 	movw	r3, #1376	; 0x560
 8000dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e00:	f04f 0200 	mov.w	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
				}
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 8000e06:	f240 4370 	movw	r3, #1136	; 0x470
 8000e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	f240 4370 	movw	r3, #1136	; 0x470
 8000e16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d80f      	bhi.n	8000e42 <vTaskSwitchContext+0x6e>
 8000e22:	f240 4370 	movw	r3, #1136	; 0x470
 8000e26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	f240 4370 	movw	r3, #1136	; 0x470
 8000e30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8000e3a:	4610      	mov	r0, r2
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f7ff faab 	bl	8000398 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 8000e42:	f240 4370 	movw	r3, #1136	; 0x470
 8000e46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f243 6148 	movw	r1, #13896	; 0x3648
 8000e54:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000e58:	f04f 0214 	mov.w	r2, #20
 8000e5c:	f002 f9a6 	bl	80031ac <memcmp>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d026      	beq.n	8000eb4 <vTaskSwitchContext+0xe0>
 8000e66:	f240 4370 	movw	r3, #1136	; 0x470
 8000e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	f240 4370 	movw	r3, #1136	; 0x470
 8000e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8000e7e:	4610      	mov	r0, r2
 8000e80:	4619      	mov	r1, r3
 8000e82:	f7ff fa89 	bl	8000398 <vApplicationStackOverflowHook>

		taskSELECT_HIGHEST_PRIORITY_TASK();
 8000e86:	e015      	b.n	8000eb4 <vTaskSwitchContext+0xe0>
 8000e88:	f240 5350 	movw	r3, #1360	; 0x550
 8000e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d102      	bne.n	8000e9c <vTaskSwitchContext+0xc8>
 8000e96:	f001 fa1b 	bl	80022d0 <ulPortSetInterruptMask>
 8000e9a:	e7fe      	b.n	8000e9a <vTaskSwitchContext+0xc6>
 8000e9c:	f240 5350 	movw	r3, #1360	; 0x550
 8000ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f103 32ff 	add.w	r2, r3, #4294967295
 8000eaa:	f240 5350 	movw	r3, #1360	; 0x550
 8000eae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	f240 5350 	movw	r3, #1360	; 0x550
 8000eb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ebc:	6819      	ldr	r1, [r3, #0]
 8000ebe:	f240 4274 	movw	r2, #1140	; 0x474
 8000ec2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000ecc:	185b      	adds	r3, r3, r1
 8000ece:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000ed2:	18d3      	adds	r3, r2, r3
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d0d6      	beq.n	8000e88 <vTaskSwitchContext+0xb4>
 8000eda:	f240 5350 	movw	r3, #1360	; 0x550
 8000ede:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000eea:	189b      	adds	r3, r3, r2
 8000eec:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000ef0:	f240 4274 	movw	r2, #1140	; 0x474
 8000ef4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000ef8:	189b      	adds	r3, r3, r2
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685a      	ldr	r2, [r3, #4]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f103 0308 	add.w	r3, r3, #8
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d104      	bne.n	8000f1e <vTaskSwitchContext+0x14a>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	68da      	ldr	r2, [r3, #12]
 8000f24:	f240 4370 	movw	r3, #1136	; 0x470
 8000f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f2c:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000f2e:	f107 0708 	add.w	r7, r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop

08000f38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( xList * const pxEventList, portTickType xTicksToWait )
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d102      	bne.n	8000f4e <vTaskPlaceOnEventList+0x16>
 8000f48:	f001 f9c2 	bl	80022d0 <ulPortSetInterruptMask>
 8000f4c:	e7fe      	b.n	8000f4c <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8000f4e:	f240 4370 	movw	r3, #1136	; 0x470
 8000f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f103 0318 	add.w	r3, r3, #24
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f001 f81c 	bl	8001f9c <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8000f64:	f240 4370 	movw	r3, #1136	; 0x470
 8000f68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f103 0304 	add.w	r3, r3, #4
 8000f72:	4618      	mov	r0, r3
 8000f74:	f001 f84c 	bl	8002010 <uxListRemove>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f7e:	d10e      	bne.n	8000f9e <vTaskPlaceOnEventList+0x66>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8000f80:	f240 4370 	movw	r3, #1136	; 0x470
 8000f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f103 0304 	add.w	r3, r3, #4
 8000f8e:	f240 5034 	movw	r0, #1332	; 0x534
 8000f92:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000f96:	4619      	mov	r1, r3
 8000f98:	f000 ffdc 	bl	8001f54 <vListInsertEnd>
 8000f9c:	e00a      	b.n	8000fb4 <vTaskPlaceOnEventList+0x7c>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 8000f9e:	f240 534c 	movw	r3, #1356	; 0x54c
 8000fa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	18d3      	adds	r3, r2, r3
 8000fac:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8000fae:	68f8      	ldr	r0, [r7, #12]
 8000fb0:	f000 fa24 	bl	80013fc <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8000fb4:	f107 0710 	add.w	r7, r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( xList * const pxEventList, portTickType xTicksToWait )
	{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d102      	bne.n	8000fd2 <vTaskPlaceOnEventListRestricted+0x16>
 8000fcc:	f001 f980 	bl	80022d0 <ulPortSetInterruptMask>
 8000fd0:	e7fe      	b.n	8000fd0 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8000fd2:	f240 4370 	movw	r3, #1136	; 0x470
 8000fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f103 0318 	add.w	r3, r3, #24
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f000 ffb6 	bl	8001f54 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8000fe8:	f240 4370 	movw	r3, #1136	; 0x470
 8000fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f103 0304 	add.w	r3, r3, #4
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f001 f80a 	bl	8002010 <uxListRemove>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 8000ffc:	f240 534c 	movw	r3, #1356	; 0x54c
 8001000:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	18d3      	adds	r3, r2, r3
 800100a:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800100c:	68f8      	ldr	r0, [r7, #12]
 800100e:	f000 f9f5 	bl	80013fc <prvAddCurrentTaskToDelayedList>
	}
 8001012:	f107 0710 	add.w	r7, r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop

0800101c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d102      	bne.n	8001038 <xTaskRemoveFromEventList+0x1c>
 8001032:	f001 f94d 	bl	80022d0 <ulPortSetInterruptMask>
 8001036:	e7fe      	b.n	8001036 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	f103 0318 	add.w	r3, r3, #24
 800103e:	4618      	mov	r0, r3
 8001040:	f000 ffe6 	bl	8002010 <uxListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001044:	f240 5358 	movw	r3, #1368	; 0x558
 8001048:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d12a      	bne.n	80010a8 <xTaskRemoveFromEventList+0x8c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	f103 0304 	add.w	r3, r3, #4
 8001058:	4618      	mov	r0, r3
 800105a:	f000 ffd9 	bl	8002010 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001062:	f240 5350 	movw	r3, #1360	; 0x550
 8001066:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	d906      	bls.n	800107e <xTaskRemoveFromEventList+0x62>
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001074:	f240 5350 	movw	r3, #1360	; 0x550
 8001078:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001082:	4613      	mov	r3, r2
 8001084:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001088:	189b      	adds	r3, r3, r2
 800108a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800108e:	f240 4274 	movw	r2, #1140	; 0x474
 8001092:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001096:	189a      	adds	r2, r3, r2
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	f103 0304 	add.w	r3, r3, #4
 800109e:	4610      	mov	r0, r2
 80010a0:	4619      	mov	r1, r3
 80010a2:	f000 ff57 	bl	8001f54 <vListInsertEnd>
 80010a6:	e009      	b.n	80010bc <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	f103 0318 	add.w	r3, r3, #24
 80010ae:	f240 5008 	movw	r0, #1288	; 0x508
 80010b2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80010b6:	4619      	mov	r1, r3
 80010b8:	f000 ff4c 	bl	8001f54 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010c0:	f240 4370 	movw	r3, #1136	; 0x470
 80010c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d30a      	bcc.n	80010e6 <xTaskRemoveFromEventList+0xca>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 80010d0:	f04f 0301 	mov.w	r3, #1
 80010d4:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80010d6:	f240 5360 	movw	r3, #1376	; 0x560
 80010da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010de:	f04f 0201 	mov.w	r2, #1
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	e002      	b.n	80010ec <xTaskRemoveFromEventList+0xd0>
	}
	else
	{
		xReturn = pdFALSE;
 80010e6:	f04f 0300 	mov.w	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80010ec:	68fb      	ldr	r3, [r7, #12]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	f107 0710 	add.w	r7, r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d102      	bne.n	800110c <vTaskSetTimeOutState+0x14>
 8001106:	f001 f8e3 	bl	80022d0 <ulPortSetInterruptMask>
 800110a:	e7fe      	b.n	800110a <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800110c:	f240 5364 	movw	r3, #1380	; 0x564
 8001110:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800111a:	f240 534c 	movw	r3, #1356	; 0x54c
 800111e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	605a      	str	r2, [r3, #4]
}
 8001128:	f107 0708 	add.w	r7, r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d102      	bne.n	8001146 <xTaskCheckForTimeOut+0x16>
 8001140:	f001 f8c6 	bl	80022d0 <ulPortSetInterruptMask>
 8001144:	e7fe      	b.n	8001144 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d102      	bne.n	8001152 <xTaskCheckForTimeOut+0x22>
 800114c:	f001 f8c0 	bl	80022d0 <ulPortSetInterruptMask>
 8001150:	e7fe      	b.n	8001150 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 8001152:	f001 f88d 	bl	8002270 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const portTickType xConstTickCount = xTickCount;
 8001156:	f240 534c 	movw	r3, #1356	; 0x54c
 800115a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800116a:	d103      	bne.n	8001174 <xTaskCheckForTimeOut+0x44>
			{
				xReturn = pdFALSE;
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	e02c      	b.n	80011ce <xTaskCheckForTimeOut+0x9e>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	f240 5364 	movw	r3, #1380	; 0x564
 800117c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	d008      	beq.n	8001198 <xTaskCheckForTimeOut+0x68>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	429a      	cmp	r2, r3
 800118e:	d803      	bhi.n	8001198 <xTaskCheckForTimeOut+0x68>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8001190:	f04f 0301 	mov.w	r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	e01a      	b.n	80011ce <xTaskCheckForTimeOut+0x9e>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	68ba      	ldr	r2, [r7, #8]
 800119e:	1ad2      	subs	r2, r2, r3
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d20f      	bcs.n	80011c8 <xTaskCheckForTimeOut+0x98>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6859      	ldr	r1, [r3, #4]
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	1acb      	subs	r3, r1, r3
 80011b4:	18d2      	adds	r2, r2, r3
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff ff9c 	bl	80010f8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80011c0:	f04f 0300 	mov.w	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	e002      	b.n	80011ce <xTaskCheckForTimeOut+0x9e>
		}
		else
		{
			xReturn = pdTRUE;
 80011c8:	f04f 0301 	mov.w	r3, #1
 80011cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80011ce:	f001 f865 	bl	800229c <vPortExitCritical>

	return xReturn;
 80011d2:	68fb      	ldr	r3, [r7, #12]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	f107 0710 	add.w	r7, r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop

080011e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80011e4:	f240 5360 	movw	r3, #1376	; 0x560
 80011e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011ec:	f04f 0201 	mov.w	r2, #1
 80011f0:	601a      	str	r2, [r3, #0]
}
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr

080011f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 8001200:	f000 f8ae 	bl	8001360 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8001204:	f240 4374 	movw	r3, #1140	; 0x474
 8001208:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d901      	bls.n	8001216 <prvIdleTask+0x1e>
			{
				taskYIELD();
 8001212:	f001 f81d 	bl	8002250 <vPortYield>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8001216:	f7ff f8b9 	bl	800038c <vApplicationIdleHook>
				}
				( void ) xTaskResumeAll();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 800121a:	e7f1      	b.n	8001200 <prvIdleTask+0x8>

0800121c <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
 8001228:	603b      	str	r3, [r7, #0]
unsigned portBASE_TYPE x;

	/* Store the task name in the TCB. */
	for( x = ( unsigned portBASE_TYPE ) 0; x < ( unsigned portBASE_TYPE ) configMAX_TASK_NAME_LEN; x++ )
 800122a:	f04f 0300 	mov.w	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	e013      	b.n	800125a <prvInitialiseTCBVariables+0x3e>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	18d3      	adds	r3, r2, r3
 8001238:	781a      	ldrb	r2, [r3, #0]
 800123a:	68f9      	ldr	r1, [r7, #12]
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	18cb      	adds	r3, r1, r3
 8001240:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001244:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	18d3      	adds	r3, r2, r3
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d007      	beq.n	8001262 <prvInitialiseTCBVariables+0x46>
static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
unsigned portBASE_TYPE x;

	/* Store the task name in the TCB. */
	for( x = ( unsigned portBASE_TYPE ) 0; x < ( unsigned portBASE_TYPE ) configMAX_TASK_NAME_LEN; x++ )
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	f103 0301 	add.w	r3, r3, #1
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	2b09      	cmp	r3, #9
 800125e:	d9e8      	bls.n	8001232 <prvInitialiseTCBVariables+0x16>
 8001260:	e000      	b.n	8001264 <prvInitialiseTCBVariables+0x48>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
 8001262:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = ( signed char ) '\0';
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( unsigned portBASE_TYPE ) configMAX_PRIORITIES )
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b04      	cmp	r3, #4
 8001272:	d902      	bls.n	800127a <prvInitialiseTCBVariables+0x5e>
	{
		uxPriority = ( unsigned portBASE_TYPE ) configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 8001274:	f04f 0304 	mov.w	r3, #4
 8001278:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f103 0304 	add.w	r3, r3, #4
 800128c:	4618      	mov	r0, r3
 800128e:	f000 fe53 	bl	8001f38 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f103 0318 	add.w	r3, r3, #24
 8001298:	4618      	mov	r0, r3
 800129a:	f000 fe4d 	bl	8001f38 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	68fa      	ldr	r2, [r7, #12]
 80012a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f1c3 0205 	rsb	r2, r3, #5
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
 80012b4:	f107 0718 	add.w	r7, r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX_PRIORITIES; uxPriority++ )
 80012c2:	f04f 0300 	mov.w	r3, #0
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	e012      	b.n	80012f0 <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	4613      	mov	r3, r2
 80012ce:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80012d2:	189b      	adds	r3, r3, r2
 80012d4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80012d8:	f240 4274 	movw	r2, #1140	; 0x474
 80012dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80012e0:	189b      	adds	r3, r3, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 fe08 	bl	8001ef8 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX_PRIORITIES; uxPriority++ )
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f103 0301 	add.w	r3, r3, #1
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	d9e9      	bls.n	80012ca <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80012f6:	f240 40d8 	movw	r0, #1240	; 0x4d8
 80012fa:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80012fe:	f000 fdfb 	bl	8001ef8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001302:	f240 40ec 	movw	r0, #1260	; 0x4ec
 8001306:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800130a:	f000 fdf5 	bl	8001ef8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800130e:	f240 5008 	movw	r0, #1288	; 0x508
 8001312:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001316:	f000 fdef 	bl	8001ef8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800131a:	f240 501c 	movw	r0, #1308	; 0x51c
 800131e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001322:	f000 fde9 	bl	8001ef8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001326:	f240 5034 	movw	r0, #1332	; 0x534
 800132a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800132e:	f000 fde3 	bl	8001ef8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001332:	f240 5300 	movw	r3, #1280	; 0x500
 8001336:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800133a:	f240 42d8 	movw	r2, #1240	; 0x4d8
 800133e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001342:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001344:	f240 5304 	movw	r3, #1284	; 0x504
 8001348:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800134c:	f240 42ec 	movw	r2, #1260	; 0x4ec
 8001350:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001354:	601a      	str	r2, [r3, #0]
}
 8001356:	f107 0708 	add.w	r7, r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop

08001360 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8001366:	e03d      	b.n	80013e4 <prvCheckTasksWaitingTermination+0x84>
		{
			vTaskSuspendAll();
 8001368:	f7ff fb26 	bl	80009b8 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800136c:	f240 531c 	movw	r3, #1308	; 0x51c
 8001370:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	bf14      	ite	ne
 800137a:	2300      	movne	r3, #0
 800137c:	2301      	moveq	r3, #1
 800137e:	b2db      	uxtb	r3, r3
 8001380:	607b      	str	r3, [r7, #4]
			( void ) xTaskResumeAll();
 8001382:	f7ff fb2b 	bl	80009dc <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d12b      	bne.n	80013e4 <prvCheckTasksWaitingTermination+0x84>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 800138c:	f000 ff70 	bl	8002270 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001390:	f240 531c 	movw	r3, #1308	; 0x51c
 8001394:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	f103 0304 	add.w	r3, r3, #4
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 fe33 	bl	8002010 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80013aa:	f240 5348 	movw	r3, #1352	; 0x548
 80013ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f103 32ff 	add.w	r2, r3, #4294967295
 80013b8:	f240 5348 	movw	r3, #1352	; 0x548
 80013bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013c0:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 80013c2:	f240 5330 	movw	r3, #1328	; 0x530
 80013c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f103 32ff 	add.w	r2, r3, #4294967295
 80013d0:	f240 5330 	movw	r3, #1328	; 0x530
 80013d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013d8:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 80013da:	f000 ff5f 	bl	800229c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80013de:	6838      	ldr	r0, [r7, #0]
 80013e0:	f000 f88a 	bl	80014f8 <prvDeleteTCB>
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 80013e4:	f240 5330 	movw	r3, #1328	; 0x530
 80013e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1ba      	bne.n	8001368 <prvCheckTasksWaitingTermination+0x8>
				prvDeleteTCB( pxTCB );
			}
		}
	}
	#endif /* vTaskDelete */
}
 80013f2:	f107 0708 	add.w	r7, r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop

080013fc <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8001404:	f240 4370 	movw	r3, #1136	; 0x470
 8001408:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 8001412:	f240 534c 	movw	r3, #1356	; 0x54c
 8001416:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	429a      	cmp	r2, r3
 8001420:	d210      	bcs.n	8001444 <prvAddCurrentTaskToDelayedList+0x48>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8001422:	f240 5304 	movw	r3, #1284	; 0x504
 8001426:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	f240 4370 	movw	r3, #1136	; 0x470
 8001430:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f103 0304 	add.w	r3, r3, #4
 800143a:	4610      	mov	r0, r2
 800143c:	4619      	mov	r1, r3
 800143e:	f000 fdad 	bl	8001f9c <vListInsert>
 8001442:	e01d      	b.n	8001480 <prvAddCurrentTaskToDelayedList+0x84>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8001444:	f240 5300 	movw	r3, #1280	; 0x500
 8001448:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	f240 4370 	movw	r3, #1136	; 0x470
 8001452:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f103 0304 	add.w	r3, r3, #4
 800145c:	4610      	mov	r0, r2
 800145e:	4619      	mov	r1, r3
 8001460:	f000 fd9c 	bl	8001f9c <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8001464:	f240 0304 	movw	r3, #4
 8001468:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	429a      	cmp	r2, r3
 8001472:	d205      	bcs.n	8001480 <prvAddCurrentTaskToDelayedList+0x84>
		{
			xNextTaskUnblockTime = xTimeToWake;
 8001474:	f240 0304 	movw	r3, #4
 8001478:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001480:	f107 0708 	add.w	r7, r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	6039      	str	r1, [r7, #0]
 8001492:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 8001494:	f04f 004c 	mov.w	r0, #76	; 0x4c
 8001498:	f001 faa8 	bl	80029ec <pvPortMalloc>
 800149c:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d023      	beq.n	80014ec <prvAllocateTCBAndStack+0x64>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d107      	bne.n	80014ba <prvAllocateTCBAndStack+0x32>
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f001 fa9b 	bl	80029ec <pvPortMalloc>
 80014b6:	4603      	mov	r3, r0
 80014b8:	e000      	b.n	80014bc <prvAllocateTCBAndStack+0x34>
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d106      	bne.n	80014d6 <prvAllocateTCBAndStack+0x4e>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 80014c8:	68f8      	ldr	r0, [r7, #12]
 80014ca:	f001 faf5 	bl	8002ab8 <vPortFree>
			pxNewTCB = NULL;
 80014ce:	f04f 0300 	mov.w	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	e00a      	b.n	80014ec <prvAllocateTCBAndStack+0x64>
		}
		else
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80014e0:	4610      	mov	r0, r2
 80014e2:	f04f 01a5 	mov.w	r1, #165	; 0xa5
 80014e6:	461a      	mov	r2, r3
 80014e8:	f001 ff5e 	bl	80033a8 <memset>
		}
	}

	return pxNewTCB;
 80014ec:	68fb      	ldr	r3, [r7, #12]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	f107 0710 	add.w	r7, r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001504:	4618      	mov	r0, r3
 8001506:	f001 fad7 	bl	8002ab8 <vPortFree>
		vPortFree( pxTCB );
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f001 fad4 	bl	8002ab8 <vPortFree>
	}
 8001510:	f107 0708 	add.w	r7, r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800151e:	f240 4370 	movw	r3, #1136	; 0x470
 8001522:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	607b      	str	r3, [r7, #4]

		return xReturn;
 800152a:	687b      	ldr	r3, [r7, #4]
	}
 800152c:	4618      	mov	r0, r3
 800152e:	f107 070c 	add.w	r7, r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
 800153e:	f240 5354 	movw	r3, #1364	; 0x554
 8001542:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d103      	bne.n	8001554 <xTaskGetSchedulerState+0x1c>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800154c:	f04f 0300 	mov.w	r3, #0
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	e00d      	b.n	8001570 <xTaskGetSchedulerState+0x38>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001554:	f240 5358 	movw	r3, #1368	; 0x558
 8001558:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d103      	bne.n	800156a <xTaskGetSchedulerState+0x32>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001562:	f04f 0301 	mov.w	r3, #1
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	e002      	b.n	8001570 <xTaskGetSchedulerState+0x38>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800156a:	f04f 0302 	mov.w	r3, #2
 800156e:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001570:	687b      	ldr	r3, [r7, #4]
	}
 8001572:	4618      	mov	r0, r3
 8001574:	f107 070c 	add.w	r7, r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop

08001580 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle const pxMutexHolder )
	{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d066      	beq.n	8001660 <vTaskPriorityInherit+0xe0>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001596:	f240 4370 	movw	r3, #1136	; 0x470
 800159a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d25c      	bcs.n	8001660 <vTaskPriorityInherit+0xe0>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80015a6:	f240 4370 	movw	r3, #1136	; 0x470
 80015aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b2:	f1c3 0205 	rsb	r2, r3, #5
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6959      	ldr	r1, [r3, #20]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015c2:	4613      	mov	r3, r2
 80015c4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80015c8:	189b      	adds	r3, r3, r2
 80015ca:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80015ce:	f240 4274 	movw	r2, #1140	; 0x474
 80015d2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80015d6:	189b      	adds	r3, r3, r2
 80015d8:	4299      	cmp	r1, r3
 80015da:	d102      	bne.n	80015e2 <vTaskPriorityInherit+0x62>
 80015dc:	f04f 0301 	mov.w	r3, #1
 80015e0:	e001      	b.n	80015e6 <vTaskPriorityInherit+0x66>
 80015e2:	f04f 0300 	mov.w	r3, #0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d032      	beq.n	8001650 <vTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f103 0304 	add.w	r3, r3, #4
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 fd0d 	bl	8002010 <uxListRemove>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80015f6:	f240 4370 	movw	r3, #1136	; 0x470
 80015fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800160a:	f240 5350 	movw	r3, #1360	; 0x550
 800160e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	429a      	cmp	r2, r3
 8001616:	d906      	bls.n	8001626 <vTaskPriorityInherit+0xa6>
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800161c:	f240 5350 	movw	r3, #1360	; 0x550
 8001620:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800162a:	4613      	mov	r3, r2
 800162c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001630:	189b      	adds	r3, r3, r2
 8001632:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001636:	f240 4274 	movw	r2, #1140	; 0x474
 800163a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800163e:	189a      	adds	r2, r3, r2
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f103 0304 	add.w	r3, r3, #4
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	f000 fc83 	bl	8001f54 <vListInsertEnd>
 800164e:	e007      	b.n	8001660 <vTaskPriorityInherit+0xe0>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001650:	f240 4370 	movw	r3, #1136	; 0x470
 8001654:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
 8001660:	f107 0710 	add.w	r7, r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle const pxMutexHolder )
	{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d039      	beq.n	80016ee <vTaskPriorityDisinherit+0x86>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001682:	429a      	cmp	r2, r3
 8001684:	d033      	beq.n	80016ee <vTaskPriorityDisinherit+0x86>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f103 0304 	add.w	r3, r3, #4
 800168c:	4618      	mov	r0, r3
 800168e:	f000 fcbf 	bl	8002010 <uxListRemove>
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169e:	f1c3 0205 	rsb	r2, r3, #5
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyList( pxTCB );
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016aa:	f240 5350 	movw	r3, #1360	; 0x550
 80016ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d906      	bls.n	80016c6 <vTaskPriorityDisinherit+0x5e>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016bc:	f240 5350 	movw	r3, #1360	; 0x550
 80016c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016ca:	4613      	mov	r3, r2
 80016cc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80016d0:	189b      	adds	r3, r3, r2
 80016d2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80016d6:	f240 4274 	movw	r2, #1140	; 0x474
 80016da:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80016de:	189a      	adds	r2, r3, r2
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f103 0304 	add.w	r3, r3, #4
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	f000 fc33 	bl	8001f54 <vListInsertEnd>
			}
		}
	}
 80016ee:	f107 0710 	add.w	r7, r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop

080016f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle xQueue, portBASE_TYPE xNewQueue )
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <xQueueGenericReset+0x1a>
 800170c:	f000 fde0 	bl	80022d0 <ulPortSetInterruptMask>
 8001710:	e7fe      	b.n	8001710 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 8001712:	f000 fdad 	bl	8002270 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171e:	68f9      	ldr	r1, [r7, #12]
 8001720:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001722:	fb01 f303 	mul.w	r3, r1, r3
 8001726:	18d2      	adds	r2, r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001744:	f103 33ff 	add.w	r3, r3, #4294967295
 8001748:	68f9      	ldr	r1, [r7, #12]
 800174a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800174c:	fb01 f303 	mul.w	r3, r1, r3
 8001750:	18d2      	adds	r2, r2, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f04f 32ff 	mov.w	r2, #4294967295
 800175c:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f04f 32ff 	mov.w	r2, #4294967295
 8001764:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10f      	bne.n	800178c <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d017      	beq.n	80017a4 <xQueueGenericReset+0xac>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f103 0310 	add.w	r3, r3, #16
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fc4e 	bl	800101c <xTaskRemoveFromEventList>
 8001780:	4603      	mov	r3, r0
 8001782:	2b01      	cmp	r3, #1
 8001784:	d10e      	bne.n	80017a4 <xQueueGenericReset+0xac>
				{
					portYIELD_WITHIN_API();
 8001786:	f000 fd63 	bl	8002250 <vPortYield>
 800178a:	e00b      	b.n	80017a4 <xQueueGenericReset+0xac>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f103 0310 	add.w	r3, r3, #16
 8001792:	4618      	mov	r0, r3
 8001794:	f000 fbb0 	bl	8001ef8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 fbaa 	bl	8001ef8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80017a4:	f000 fd7a 	bl	800229c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80017a8:	f04f 0301 	mov.w	r3, #1
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	f107 0710 	add.w	r7, r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop

080017b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	4613      	mov	r3, r2
 80017c4:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d02d      	beq.n	800182e <xQueueGenericCreate+0x76>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 80017d2:	f04f 0050 	mov.w	r0, #80	; 0x50
 80017d6:	f001 f909 	bl	80029ec <pvPortMalloc>
 80017da:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d025      	beq.n	800182e <xQueueGenericCreate+0x76>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	fb02 f303 	mul.w	r3, r2, r3
 80017ea:	f103 0301 	add.w	r3, r3, #1
 80017ee:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 80017f0:	6978      	ldr	r0, [r7, #20]
 80017f2:	f001 f8fb 	bl	80029ec <pvPortMalloc>
 80017f6:	4602      	mov	r2, r0
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d011      	beq.n	8001828 <xQueueGenericCreate+0x70>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	68ba      	ldr	r2, [r7, #8]
 800180e:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001810:	69b8      	ldr	r0, [r7, #24]
 8001812:	f04f 0101 	mov.w	r1, #1
 8001816:	f7ff ff6f 	bl	80016f8 <xQueueGenericReset>

				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	79fa      	ldrb	r2, [r7, #7]
 800181e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	61fb      	str	r3, [r7, #28]
 8001826:	e002      	b.n	800182e <xQueueGenericCreate+0x76>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 8001828:	69b8      	ldr	r0, [r7, #24]
 800182a:	f001 f945 	bl	8002ab8 <vPortFree>
			}
		}
	}

	configASSERT( xReturn );
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d102      	bne.n	800183a <xQueueGenericCreate+0x82>
 8001834:	f000 fd4c 	bl	80022d0 <ulPortSetInterruptMask>
 8001838:	e7fe      	b.n	8001838 <xQueueGenericCreate+0x80>

	return xReturn;
 800183a:	69fb      	ldr	r3, [r7, #28]
}
 800183c:	4618      	mov	r0, r3
 800183e:	f107 0720 	add.w	r7, r7, #32
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop

08001848 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 8001856:	f04f 0300 	mov.w	r3, #0
 800185a:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d102      	bne.n	800186c <xQueueGenericSend+0x24>
 8001866:	f000 fd33 	bl	80022d0 <ulPortSetInterruptMask>
 800186a:	e7fe      	b.n	800186a <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d103      	bne.n	800187a <xQueueGenericSend+0x32>
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	2b00      	cmp	r3, #0
 8001878:	d102      	bne.n	8001880 <xQueueGenericSend+0x38>
 800187a:	f04f 0301 	mov.w	r3, #1
 800187e:	e001      	b.n	8001884 <xQueueGenericSend+0x3c>
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d102      	bne.n	800188e <xQueueGenericSend+0x46>
 8001888:	f000 fd22 	bl	80022d0 <ulPortSetInterruptMask>
 800188c:	e7fe      	b.n	800188c <xQueueGenericSend+0x44>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	2b02      	cmp	r3, #2
 8001892:	d103      	bne.n	800189c <xQueueGenericSend+0x54>
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001898:	2b01      	cmp	r3, #1
 800189a:	d102      	bne.n	80018a2 <xQueueGenericSend+0x5a>
 800189c:	f04f 0301 	mov.w	r3, #1
 80018a0:	e001      	b.n	80018a6 <xQueueGenericSend+0x5e>
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d103      	bne.n	80018b2 <xQueueGenericSend+0x6a>
 80018aa:	f000 fd11 	bl	80022d0 <ulPortSetInterruptMask>
 80018ae:	e7fe      	b.n	80018ae <xQueueGenericSend+0x66>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 80018b0:	bf00      	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80018b2:	f000 fcdd 	bl	8002270 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018be:	429a      	cmp	r2, r3
 80018c0:	d302      	bcc.n	80018c8 <xQueueGenericSend+0x80>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d118      	bne.n	80018fa <xQueueGenericSend+0xb2>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80018c8:	69b8      	ldr	r0, [r7, #24]
 80018ca:	68b9      	ldr	r1, [r7, #8]
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	f000 f9c7 	bl	8001c60 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00a      	beq.n	80018f0 <xQueueGenericSend+0xa8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fb9b 	bl	800101c <xTaskRemoveFromEventList>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d101      	bne.n	80018f0 <xQueueGenericSend+0xa8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							portYIELD_WITHIN_API();
 80018ec:	f000 fcb0 	bl	8002250 <vPortYield>
						}
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80018f0:	f000 fcd4 	bl	800229c <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 80018f4:	f04f 0301 	mov.w	r3, #1
 80018f8:	e05d      	b.n	80019b6 <xQueueGenericSend+0x16e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d104      	bne.n	800190a <xQueueGenericSend+0xc2>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001900:	f000 fccc 	bl	800229c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	e055      	b.n	80019b6 <xQueueGenericSend+0x16e>
				}
				else if( xEntryTimeSet == pdFALSE )
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d107      	bne.n	8001920 <xQueueGenericSend+0xd8>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001910:	f107 0310 	add.w	r3, r7, #16
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fbef 	bl	80010f8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800191a:	f04f 0301 	mov.w	r3, #1
 800191e:	61fb      	str	r3, [r7, #28]
				{
					/* Entry time was already set. */
				}
			}
		}
		taskEXIT_CRITICAL();
 8001920:	f000 fcbc 	bl	800229c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001924:	f7ff f848 	bl	80009b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001928:	f000 fca2 	bl	8002270 <vPortEnterCritical>
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001934:	d103      	bne.n	800193e <xQueueGenericSend+0xf6>
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	645a      	str	r2, [r3, #68]	; 0x44
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001946:	d103      	bne.n	8001950 <xQueueGenericSend+0x108>
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	649a      	str	r2, [r3, #72]	; 0x48
 8001950:	f000 fca4 	bl	800229c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001954:	f107 0210 	add.w	r2, r7, #16
 8001958:	f107 0304 	add.w	r3, r7, #4
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
 8001960:	f7ff fbe6 	bl	8001130 <xTaskCheckForTimeOut>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d11e      	bne.n	80019a8 <xQueueGenericSend+0x160>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800196a:	69b8      	ldr	r0, [r7, #24]
 800196c:	f000 fa78 	bl	8001e60 <prvIsQueueFull>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d012      	beq.n	800199c <xQueueGenericSend+0x154>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	f103 0210 	add.w	r2, r3, #16
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4610      	mov	r0, r2
 8001980:	4619      	mov	r1, r3
 8001982:	f7ff fad9 	bl	8000f38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001986:	69b8      	ldr	r0, [r7, #24]
 8001988:	f000 fa00 	bl	8001d8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800198c:	f7ff f826 	bl	80009dc <xTaskResumeAll>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d18c      	bne.n	80018b0 <xQueueGenericSend+0x68>
				{
					portYIELD_WITHIN_API();
 8001996:	f000 fc5b 	bl	8002250 <vPortYield>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 800199a:	e789      	b.n	80018b0 <xQueueGenericSend+0x68>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800199c:	69b8      	ldr	r0, [r7, #24]
 800199e:	f000 f9f5 	bl	8001d8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80019a2:	f7ff f81b 	bl	80009dc <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 80019a6:	e783      	b.n	80018b0 <xQueueGenericSend+0x68>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80019a8:	69b8      	ldr	r0, [r7, #24]
 80019aa:	f000 f9ef 	bl	8001d8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80019ae:	f7ff f815 	bl	80009dc <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80019b2:	f04f 0300 	mov.w	r3, #0
		}
	}
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	f107 0720 	add.w	r7, r7, #32
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle xQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
 80019cc:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d102      	bne.n	80019de <xQueueGenericSendFromISR+0x1e>
 80019d8:	f000 fc7a 	bl	80022d0 <ulPortSetInterruptMask>
 80019dc:	e7fe      	b.n	80019dc <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d103      	bne.n	80019ec <xQueueGenericSendFromISR+0x2c>
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d102      	bne.n	80019f2 <xQueueGenericSendFromISR+0x32>
 80019ec:	f04f 0301 	mov.w	r3, #1
 80019f0:	e001      	b.n	80019f6 <xQueueGenericSendFromISR+0x36>
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d102      	bne.n	8001a00 <xQueueGenericSendFromISR+0x40>
 80019fa:	f000 fc69 	bl	80022d0 <ulPortSetInterruptMask>
 80019fe:	e7fe      	b.n	80019fe <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d103      	bne.n	8001a0e <xQueueGenericSendFromISR+0x4e>
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d102      	bne.n	8001a14 <xQueueGenericSendFromISR+0x54>
 8001a0e:	f04f 0301 	mov.w	r3, #1
 8001a12:	e001      	b.n	8001a18 <xQueueGenericSendFromISR+0x58>
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d102      	bne.n	8001a22 <xQueueGenericSendFromISR+0x62>
 8001a1c:	f000 fc58 	bl	80022d0 <ulPortSetInterruptMask>
 8001a20:	e7fe      	b.n	8001a20 <xQueueGenericSendFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001a22:	f000 fccb 	bl	80023bc <vPortValidateInterruptPriority>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001a26:	f000 fc53 	bl	80022d0 <ulPortSetInterruptMask>
 8001a2a:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d302      	bcc.n	8001a3e <xQueueGenericSendFromISR+0x7e>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d128      	bne.n	8001a90 <xQueueGenericSendFromISR+0xd0>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001a3e:	69b8      	ldr	r0, [r7, #24]
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	f000 f90c 	bl	8001c60 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a50:	d114      	bne.n	8001a7c <xQueueGenericSendFromISR+0xbc>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d016      	beq.n	8001a88 <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fadb 	bl	800101c <xTaskRemoveFromEventList>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d00d      	beq.n	8001a88 <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00a      	beq.n	8001a88 <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f04f 0201 	mov.w	r2, #1
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	e005      	b.n	8001a88 <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a80:	f103 0201 	add.w	r2, r3, #1
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 8001a88:	f04f 0301 	mov.w	r3, #1
 8001a8c:	61fb      	str	r3, [r7, #28]
 8001a8e:	e002      	b.n	8001a96 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001a96:	6978      	ldr	r0, [r7, #20]
 8001a98:	f000 fc24 	bl	80022e4 <vPortClearInterruptMask>

	return xReturn;
 8001a9c:	69fb      	ldr	r3, [r7, #28]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f107 0720 	add.w	r7, r7, #32
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle xQueue, const void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	; 0x28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
 8001ab4:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 8001ab6:	f04f 0300 	mov.w	r3, #0
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d102      	bne.n	8001acc <xQueueGenericReceive+0x24>
 8001ac6:	f000 fc03 	bl	80022d0 <ulPortSetInterruptMask>
 8001aca:	e7fe      	b.n	8001aca <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d103      	bne.n	8001ada <xQueueGenericReceive+0x32>
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d102      	bne.n	8001ae0 <xQueueGenericReceive+0x38>
 8001ada:	f04f 0301 	mov.w	r3, #1
 8001ade:	e001      	b.n	8001ae4 <xQueueGenericReceive+0x3c>
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d103      	bne.n	8001af0 <xQueueGenericReceive+0x48>
 8001ae8:	f000 fbf2 	bl	80022d0 <ulPortSetInterruptMask>
 8001aec:	e7fe      	b.n	8001aec <xQueueGenericReceive+0x44>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 8001aee:	bf00      	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001af0:	f000 fbbe 	bl	8002270 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d03f      	beq.n	8001b7c <xQueueGenericReceive+0xd4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8001afc:	6a3b      	ldr	r3, [r7, #32]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001b02:	6a38      	ldr	r0, [r7, #32]
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	f000 f919 	bl	8001d3c <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d11e      	bne.n	8001b4e <xQueueGenericReceive+0xa6>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b14:	f103 32ff 	add.w	r2, r3, #4294967295
 8001b18:	6a3b      	ldr	r3, [r7, #32]
 8001b1a:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d104      	bne.n	8001b2e <xQueueGenericReceive+0x86>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( signed char * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as xTaskHandle is a typedef. */
 8001b24:	f7ff fcf8 	bl	8001518 <xTaskGetCurrentTaskHandle>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	6a3b      	ldr	r3, [r7, #32]
 8001b2c:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d01d      	beq.n	8001b72 <xQueueGenericReceive+0xca>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	f103 0310 	add.w	r3, r3, #16
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fa6d 	bl	800101c <xTaskRemoveFromEventList>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d114      	bne.n	8001b72 <xQueueGenericReceive+0xca>
						{
							portYIELD_WITHIN_API();
 8001b48:	f000 fb82 	bl	8002250 <vPortYield>
 8001b4c:	e011      	b.n	8001b72 <xQueueGenericReceive+0xca>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	69fa      	ldr	r2, [r7, #28]
 8001b52:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b54:	6a3b      	ldr	r3, [r7, #32]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00a      	beq.n	8001b72 <xQueueGenericReceive+0xca>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b5c:	6a3b      	ldr	r3, [r7, #32]
 8001b5e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fa5a 	bl	800101c <xTaskRemoveFromEventList>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <xQueueGenericReceive+0xca>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 8001b6e:	f000 fb6f 	bl	8002250 <vPortYield>
						}
					}
				}

				taskEXIT_CRITICAL();
 8001b72:	f000 fb93 	bl	800229c <vPortExitCritical>
				return pdPASS;
 8001b76:	f04f 0301 	mov.w	r3, #1
 8001b7a:	e06b      	b.n	8001c54 <xQueueGenericReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d104      	bne.n	8001b8c <xQueueGenericReceive+0xe4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001b82:	f000 fb8b 	bl	800229c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001b86:	f04f 0300 	mov.w	r3, #0
 8001b8a:	e063      	b.n	8001c54 <xQueueGenericReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d107      	bne.n	8001ba2 <xQueueGenericReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff faae 	bl	80010f8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001b9c:	f04f 0301 	mov.w	r3, #1
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
				{
					/* Entry time was already set. */
				}
			}
		}
		taskEXIT_CRITICAL();
 8001ba2:	f000 fb7b 	bl	800229c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001ba6:	f7fe ff07 	bl	80009b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001baa:	f000 fb61 	bl	8002270 <vPortEnterCritical>
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb6:	d103      	bne.n	8001bc0 <xQueueGenericReceive+0x118>
 8001bb8:	6a3b      	ldr	r3, [r7, #32]
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	645a      	str	r2, [r3, #68]	; 0x44
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc8:	d103      	bne.n	8001bd2 <xQueueGenericReceive+0x12a>
 8001bca:	6a3b      	ldr	r3, [r7, #32]
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	649a      	str	r2, [r3, #72]	; 0x48
 8001bd2:	f000 fb63 	bl	800229c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001bd6:	f107 0214 	add.w	r2, r7, #20
 8001bda:	f107 0304 	add.w	r3, r7, #4
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	f7ff faa5 	bl	8001130 <xTaskCheckForTimeOut>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d12c      	bne.n	8001c46 <xQueueGenericReceive+0x19e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001bec:	6a38      	ldr	r0, [r7, #32]
 8001bee:	f000 f91d 	bl	8001e2c <prvIsQueueEmpty>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d020      	beq.n	8001c3a <xQueueGenericReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d108      	bne.n	8001c12 <xQueueGenericReceive+0x16a>
					{
						portENTER_CRITICAL();
 8001c00:	f000 fb36 	bl	8002270 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8001c04:	6a3b      	ldr	r3, [r7, #32]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fcb9 	bl	8001580 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 8001c0e:	f000 fb45 	bl	800229c <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001c12:	6a3b      	ldr	r3, [r7, #32]
 8001c14:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f7ff f98b 	bl	8000f38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001c22:	6a38      	ldr	r0, [r7, #32]
 8001c24:	f000 f8b2 	bl	8001d8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001c28:	f7fe fed8 	bl	80009dc <xTaskResumeAll>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f47f af5d 	bne.w	8001aee <xQueueGenericReceive+0x46>
				{
					portYIELD_WITHIN_API();
 8001c34:	f000 fb0c 	bl	8002250 <vPortYield>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 8001c38:	e759      	b.n	8001aee <xQueueGenericReceive+0x46>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001c3a:	6a38      	ldr	r0, [r7, #32]
 8001c3c:	f000 f8a6 	bl	8001d8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001c40:	f7fe fecc 	bl	80009dc <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 8001c44:	e753      	b.n	8001aee <xQueueGenericReceive+0x46>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8001c46:	6a38      	ldr	r0, [r7, #32]
 8001c48:	f000 f8a0 	bl	8001d8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001c4c:	f7fe fec6 	bl	80009dc <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8001c50:	f04f 0300 	mov.w	r3, #0
		}
	}
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop

08001c60 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d10d      	bne.n	8001c90 <prvCopyDataToQueue+0x30>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d155      	bne.n	8001d28 <prvCopyDataToQueue+0xc8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fcf1 	bl	8001668 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	e04b      	b.n	8001d28 <prvCopyDataToQueue+0xc8>
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d11a      	bne.n	8001ccc <prvCopyDataToQueue+0x6c>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	68b9      	ldr	r1, [r7, #8]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	f001 fade 	bl	8003264 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	18d2      	adds	r2, r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d332      	bcc.n	8001d28 <prvCopyDataToQueue+0xc8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	e02d      	b.n	8001d28 <prvCopyDataToQueue+0xc8>
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	68da      	ldr	r2, [r3, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	4610      	mov	r0, r2
 8001cd6:	68b9      	ldr	r1, [r7, #8]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	f001 fac3 	bl	8003264 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f1c3 0300 	rsb	r3, r3, #0
 8001cea:	18d2      	adds	r2, r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	68da      	ldr	r2, [r3, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d208      	bcs.n	8001d0e <prvCopyDataToQueue+0xae>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	f1c3 0300 	rsb	r3, r3, #0
 8001d08:	18d2      	adds	r2, r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	60da      	str	r2, [r3, #12]
		}

		if( xPosition == queueOVERWRITE )
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d109      	bne.n	8001d28 <prvCopyDataToQueue+0xc8>
		{
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d005      	beq.n	8001d28 <prvCopyDataToQueue+0xc8>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d20:	f103 32ff 	add.w	r2, r3, #4294967295
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2c:	f103 0201 	add.w	r2, r3, #1
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001d34:	f107 0710 	add.w	r7, r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void * const pvBuffer )
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d019      	beq.n	8001d82 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	18d2      	adds	r2, r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d303      	bcc.n	8001d70 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	60da      	str	r2, [r3, #12]
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	6838      	ldr	r0, [r7, #0]
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	f001 fa71 	bl	8003264 <memcpy>
	}
}
 8001d82:	f107 0708 	add.w	r7, r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop

08001d8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQUEUE *pxQueue )
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001d94:	f000 fa6c 	bl	8002270 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8001d98:	e014      	b.n	8001dc4 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d015      	beq.n	8001dce <prvUnlockQueue+0x42>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff f937 	bl	800101c <xTaskRemoveFromEventList>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <prvUnlockQueue+0x2c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 8001db4:	f7ff fa14 	bl	80011e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dbc:	f103 32ff 	add.w	r2, r3, #4294967295
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	dce6      	bgt.n	8001d9a <prvUnlockQueue+0xe>
 8001dcc:	e000      	b.n	8001dd0 <prvUnlockQueue+0x44>
						vTaskMissedYield();
					}
				}
				else
				{
					break;
 8001dce:	bf00      	nop
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8001dd8:	f000 fa60 	bl	800229c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001ddc:	f000 fa48 	bl	8002270 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8001de0:	e014      	b.n	8001e0c <prvUnlockQueue+0x80>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d015      	beq.n	8001e16 <prvUnlockQueue+0x8a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f103 0310 	add.w	r3, r3, #16
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff f913 	bl	800101c <xTaskRemoveFromEventList>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <prvUnlockQueue+0x74>
				{
					vTaskMissedYield();
 8001dfc:	f7ff f9f0 	bl	80011e0 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e04:	f103 32ff 	add.w	r2, r3, #4294967295
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	645a      	str	r2, [r3, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	dce6      	bgt.n	8001de2 <prvUnlockQueue+0x56>
 8001e14:	e000      	b.n	8001e18 <prvUnlockQueue+0x8c>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
 8001e16:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e1e:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001e20:	f000 fa3c 	bl	800229c <vPortExitCritical>
}
 8001e24:	f107 0708 	add.w	r7, r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQUEUE *pxQueue )
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8001e34:	f000 fa1c 	bl	8002270 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE )  0 )
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d103      	bne.n	8001e48 <prvIsQueueEmpty+0x1c>
		{
			xReturn = pdTRUE;
 8001e40:	f04f 0301 	mov.w	r3, #1
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	e002      	b.n	8001e4e <prvIsQueueEmpty+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001e48:	f04f 0300 	mov.w	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001e4e:	f000 fa25 	bl	800229c <vPortExitCritical>

	return xReturn;
 8001e52:	68fb      	ldr	r3, [r7, #12]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	f107 0710 	add.w	r7, r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop

08001e60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQUEUE *pxQueue )
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8001e68:	f000 fa02 	bl	8002270 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d103      	bne.n	8001e80 <prvIsQueueFull+0x20>
		{
			xReturn = pdTRUE;
 8001e78:	f04f 0301 	mov.w	r3, #1
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	e002      	b.n	8001e86 <prvIsQueueFull+0x26>
		}
		else
		{
			xReturn = pdFALSE;
 8001e80:	f04f 0300 	mov.w	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001e86:	f000 fa09 	bl	800229c <vPortExitCritical>

	return xReturn;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f107 0710 	add.w	r7, r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop

08001e98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( xQueueHandle xQueue, portTickType xTicksToWait )
	{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
	xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001ea6:	f000 f9e3 	bl	8002270 <vPortEnterCritical>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb2:	d103      	bne.n	8001ebc <vQueueWaitForMessageRestricted+0x24>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	645a      	str	r2, [r3, #68]	; 0x44
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec4:	d103      	bne.n	8001ece <vQueueWaitForMessageRestricted+0x36>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	649a      	str	r2, [r3, #72]	; 0x48
 8001ece:	f000 f9e5 	bl	800229c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d106      	bne.n	8001ee8 <vQueueWaitForMessageRestricted+0x50>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	6839      	ldr	r1, [r7, #0]
 8001ee4:	f7ff f86a 	bl	8000fbc <vTaskPlaceOnEventListRestricted>
		}
		prvUnlockQueue( pxQueue );
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f7ff ff4f 	bl	8001d8c <prvUnlockQueue>
	}
 8001eee:	f107 0710 	add.w	r7, r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop

08001ef8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList * const pxList )
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f103 0208 	add.w	r2, r3, #8
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f103 0208 	add.w	r2, r3, #8
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f103 0208 	add.w	r2, r3, #8
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
}
 8001f2e:	f107 070c 	add.w	r7, r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem * const pxItem )
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	611a      	str	r2, [r3, #16]
}
 8001f48:	f107 070c 	add.w	r7, r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop

08001f54 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList * const pxList, xListItem * const pxNewListItem )
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
xListItem * pxIndex;

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry. */
	pxIndex = pxList->pxIndex;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f103 0201 	add.w	r2, r3, #1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	601a      	str	r2, [r3, #0]
}
 8001f92:	f107 0714 	add.w	r7, r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList * const pxList, xListItem * const pxNewListItem )
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb2:	d103      	bne.n	8001fbc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	e00d      	b.n	8001fd8 <vListInsert+0x3c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f103 0308 	add.w	r3, r3, #8
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	e002      	b.n	8001fcc <vListInsert+0x30>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d9f6      	bls.n	8001fc6 <vListInsert+0x2a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f103 0201 	add.w	r2, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	601a      	str	r2, [r3, #0]
}
 8002006:	f107 0714 	add.w	r7, r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem * const pxItemToRemove )
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6892      	ldr	r2, [r2, #8]
 8002020:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6852      	ldr	r2, [r2, #4]
 800202a:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	429a      	cmp	r2, r3
 800203a:	d103      	bne.n	8002044 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f103 32ff 	add.w	r2, r3, #4294967295
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
}
 800205c:	4618      	mov	r0, r3
 800205e:	f107 0714 	add.w	r7, r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr

08002068 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f1a3 0304 	sub.w	r3, r3, #4
 800207a:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002082:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f1a3 0304 	sub.w	r3, r3, #4
 800208a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f1a3 0304 	sub.w	r3, r3, #4
 8002098:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) portTASK_RETURN_ADDRESS;	/* LR */
 800209a:	f242 03dd 	movw	r3, #8413	; 0x20dd
 800209e:	f6c0 0300 	movt	r3, #2048	; 0x800
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	6013      	str	r3, [r2, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f1a3 0314 	sub.w	r3, r3, #20
 80020ac:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f1a3 0304 	sub.w	r3, r3, #4
 80020ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f06f 0202 	mvn.w	r2, #2
 80020c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f1a3 0320 	sub.w	r3, r3, #32
 80020ca:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80020cc:	68fb      	ldr	r3, [r7, #12]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	f107 0714 	add.w	r7, r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop

080020dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80020e0:	f240 0308 	movw	r3, #8
 80020e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ee:	d002      	beq.n	80020f6 <prvTaskExitError+0x1a>
 80020f0:	f000 f8ee 	bl	80022d0 <ulPortSetInterruptMask>
 80020f4:	e7fe      	b.n	80020f4 <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 80020f6:	f000 f8eb 	bl	80022d0 <ulPortSetInterruptMask>
	for( ;; );
 80020fa:	e7fe      	b.n	80020fa <prvTaskExitError+0x1e>

080020fc <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <pxCurrentTCBConst2>)
 80020fe:	6819      	ldr	r1, [r3, #0]
 8002100:	6808      	ldr	r0, [r1, #0]
 8002102:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002106:	f380 8809 	msr	PSP, r0
 800210a:	f04f 0000 	mov.w	r0, #0
 800210e:	f380 8811 	msr	BASEPRI, r0
 8002112:	4770      	bx	lr

08002114 <pxCurrentTCBConst2>:
 8002114:	20000470 	.word	0x20000470

08002118 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002118:	4803      	ldr	r0, [pc, #12]	; (8002128 <prvPortStartFirstTask+0x10>)
 800211a:	6800      	ldr	r0, [r0, #0]
 800211c:	6800      	ldr	r0, [r0, #0]
 800211e:	f380 8808 	msr	MSP, r0
 8002122:	b662      	cpsie	i
 8002124:	df00      	svc	0
 8002126:	bf00      	nop
 8002128:	e000ed08 	.word	0xe000ed08

0800212c <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile unsigned long ulOriginalPriority;
		volatile char * const pcFirstUserPriorityRegister = ( volatile char * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002132:	f44f 4364 	mov.w	r3, #58368	; 0xe400
 8002136:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800213a:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pcFirstUserPriorityRegister;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	b2db      	uxtb	r3, r3
 8002142:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pcFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800214a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pcFirstUserPriorityRegister;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800215c:	b2da      	uxtb	r2, r3
 800215e:	f240 536c 	movw	r3, #1388	; 0x56c
 8002162:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002166:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002168:	f240 5370 	movw	r3, #1392	; 0x570
 800216c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002170:	f04f 0207 	mov.w	r2, #7
 8002174:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002176:	e011      	b.n	800219c <xPortStartScheduler+0x70>
		{
			ulMaxPRIGROUPValue--;
 8002178:	f240 5370 	movw	r3, #1392	; 0x570
 800217c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f103 32ff 	add.w	r2, r3, #4294967295
 8002186:	f240 5370 	movw	r3, #1392	; 0x570
 800218a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800218e:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( unsigned char ) 0x01;
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	b2db      	uxtb	r3, r3
 8002194:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002198:	b2db      	uxtb	r3, r3
 800219a:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	b25b      	sxtb	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	dbe7      	blt.n	8002178 <xPortStartScheduler+0x4c>
			ucMaxPriorityValue <<= ( unsigned char ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80021a8:	f240 5370 	movw	r3, #1392	; 0x570
 80021ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	ea4f 2203 	mov.w	r2, r3, lsl #8
 80021b6:	f240 5370 	movw	r3, #1392	; 0x570
 80021ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80021be:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80021c0:	f240 5370 	movw	r3, #1392	; 0x570
 80021c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021ce:	f240 5370 	movw	r3, #1392	; 0x570
 80021d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80021d6:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pcFirstUserPriorityRegister = ulOriginalPriority;
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80021e0:	f64e 5320 	movw	r3, #60704	; 0xed20
 80021e4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80021e8:	f64e 5220 	movw	r2, #60704	; 0xed20
 80021ec:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80021f6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80021f8:	f64e 5320 	movw	r3, #60704	; 0xed20
 80021fc:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8002200:	f64e 5220 	movw	r2, #60704	; 0xed20
 8002204:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8002208:	6812      	ldr	r2, [r2, #0]
 800220a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800220e:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002210:	f000 f8aa 	bl	8002368 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002214:	f240 0308 	movw	r3, #8
 8002218:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800221c:	f04f 0200 	mov.w	r2, #0
 8002220:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002222:	f000 f8c1 	bl	80023a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002226:	f64e 7334 	movw	r3, #61236	; 0xef34
 800222a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800222e:	f64e 7234 	movw	r2, #61236	; 0xef34
 8002232:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800223c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800223e:	f7ff ff6b 	bl	8002118 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
 8002242:	f04f 0300 	mov.w	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	f107 0710 	add.w	r7, r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <vPortYield>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002254:	f64e 5304 	movw	r3, #60676	; 0xed04
 8002258:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800225c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002260:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 8002262:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002266:	f3bf 8f6f 	isb	sy
}
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr

08002270 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8002274:	f000 f82c 	bl	80022d0 <ulPortSetInterruptMask>
	uxCriticalNesting++;
 8002278:	f240 0308 	movw	r3, #8
 800227c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f103 0201 	add.w	r2, r3, #1
 8002286:	f240 0308 	movw	r3, #8
 800228a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800228e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 8002290:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002294:	f3bf 8f6f 	isb	sy
}
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop

0800229c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 80022a0:	f240 0308 	movw	r3, #8
 80022a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f103 32ff 	add.w	r2, r3, #4294967295
 80022ae:	f240 0308 	movw	r3, #8
 80022b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022b6:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 80022b8:	f240 0308 	movw	r3, #8
 80022bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d103      	bne.n	80022ce <vPortExitCritical+0x32>
	{
		portENABLE_INTERRUPTS();
 80022c6:	f04f 0000 	mov.w	r0, #0
 80022ca:	f000 f80b 	bl	80022e4 <vPortClearInterruptMask>
	}
}
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
 80022d0:	f3ef 8011 	mrs	r0, BASEPRI
 80022d4:	f04f 0150 	mov.w	r1, #80	; 0x50
 80022d8:	f381 8811 	msr	BASEPRI, r1
 80022dc:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
 80022de:	f04f 0300 	mov.w	r3, #0
}
 80022e2:	4618      	mov	r0, r3

080022e4 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
 80022e4:	f380 8811 	msr	BASEPRI, r0
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop

080022ec <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80022ec:	f3ef 8009 	mrs	r0, PSP
 80022f0:	4b11      	ldr	r3, [pc, #68]	; (8002338 <pxCurrentTCBConst>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	f01e 0f10 	tst.w	lr, #16
 80022f8:	bf08      	it	eq
 80022fa:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80022fe:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002302:	6010      	str	r0, [r2, #0]
 8002304:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002308:	f04f 0050 	mov.w	r0, #80	; 0x50
 800230c:	f380 8811 	msr	BASEPRI, r0
 8002310:	f7fe fd60 	bl	8000dd4 <vTaskSwitchContext>
 8002314:	f04f 0000 	mov.w	r0, #0
 8002318:	f380 8811 	msr	BASEPRI, r0
 800231c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002320:	6819      	ldr	r1, [r3, #0]
 8002322:	6808      	ldr	r0, [r1, #0]
 8002324:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002328:	f01e 0f10 	tst.w	lr, #16
 800232c:	bf08      	it	eq
 800232e:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002332:	f380 8809 	msr	PSP, r0
 8002336:	4770      	bx	lr

08002338 <pxCurrentTCBConst>:
 8002338:	20000470 	.word	0x20000470

0800233c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 8002340:	f7ff ffc6 	bl	80022d0 <ulPortSetInterruptMask>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002344:	f7fe fc18 	bl	8000b78 <xTaskIncrementTick>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d006      	beq.n	800235c <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800234e:	f64e 5304 	movw	r3, #60676	; 0xed04
 8002352:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8002356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800235a:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 800235c:	f04f 0000 	mov.w	r0, #0
 8002360:	f7ff ffc0 	bl	80022e4 <vPortClearInterruptMask>
}
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop

08002368 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
 800236c:	f24e 0314 	movw	r3, #57364	; 0xe014
 8002370:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8002374:	f240 0200 	movw	r2, #0
 8002378:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800237c:	6811      	ldr	r1, [r2, #0]
 800237e:	f644 52d3 	movw	r2, #19923	; 0x4dd3
 8002382:	f2c1 0262 	movt	r2, #4194	; 0x1062
 8002386:	fba2 0201 	umull	r0, r2, r2, r1
 800238a:	ea4f 1292 	mov.w	r2, r2, lsr #6
 800238e:	f102 32ff 	add.w	r2, r2, #4294967295
 8002392:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8002394:	f24e 0310 	movw	r3, #57360	; 0xe010
 8002398:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800239c:	f04f 0207 	mov.w	r2, #7
 80023a0:	601a      	str	r2, [r3, #0]
}
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr

080023a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80023a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80023b8 <vPortEnableVFP+0x10>
 80023ac:	6801      	ldr	r1, [r0, #0]
 80023ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80023b2:	6001      	str	r1, [r0, #0]
 80023b4:	4770      	bx	lr
 80023b6:	0000      	.short	0x0000
 80023b8:	e000ed88 	.word	0xe000ed88

080023bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
	unsigned long ulCurrentInterrupt;
	unsigned char ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80023c2:	f3ef 8405 	mrs	r4, IPSR
 80023c6:	607c      	str	r4, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b0f      	cmp	r3, #15
 80023cc:	d913      	bls.n	80023f6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80023ce:	f243 635c 	movw	r3, #13916	; 0x365c
 80023d2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	18d3      	adds	r3, r2, r3
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80023e0:	f240 536c 	movw	r3, #1388	; 0x56c
 80023e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	78fa      	ldrb	r2, [r7, #3]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d202      	bcs.n	80023f6 <vPortValidateInterruptPriority+0x3a>
 80023f0:	f7ff ff6e 	bl	80022d0 <ulPortSetInterruptMask>
 80023f4:	e7fe      	b.n	80023f4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80023f6:	f64e 530c 	movw	r3, #60684	; 0xed0c
 80023fa:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002404:	f240 5370 	movw	r3, #1392	; 0x570
 8002408:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d902      	bls.n	8002418 <vPortValidateInterruptPriority+0x5c>
 8002412:	f7ff ff5d 	bl	80022d0 <ulPortSetInterruptMask>
 8002416:	e7fe      	b.n	8002416 <vPortValidateInterruptPriority+0x5a>
	}
 8002418:	f107 070c 	add.w	r7, r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	bd90      	pop	{r4, r7, pc}

08002420 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
 8002426:	f04f 0300 	mov.w	r3, #0
 800242a:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800242c:	f000 faa4 	bl	8002978 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002430:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8002434:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d01a      	beq.n	8002474 <xTimerCreateTimerTask+0x54>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800243e:	f04f 0302 	mov.w	r3, #2
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	f04f 0300 	mov.w	r3, #0
 8002448:	9301      	str	r3, [sp, #4]
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	9302      	str	r3, [sp, #8]
 8002450:	f04f 0300 	mov.w	r3, #0
 8002454:	9303      	str	r3, [sp, #12]
 8002456:	f242 50b5 	movw	r0, #9653	; 0x25b5
 800245a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800245e:	f243 41fc 	movw	r1, #13564	; 0x34fc
 8002462:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002466:	f44f 7282 	mov.w	r2, #260	; 0x104
 800246a:	f04f 0300 	mov.w	r3, #0
 800246e:	f7fe f921 	bl	80006b4 <xTaskGenericCreate>
 8002472:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d102      	bne.n	8002480 <xTimerCreateTimerTask+0x60>
 800247a:	f7ff ff29 	bl	80022d0 <ulPortSetInterruptMask>
 800247e:	e7fe      	b.n	800247e <xTimerCreateTimerTask+0x5e>
	return xReturn;
 8002480:	687b      	ldr	r3, [r7, #4]
}
 8002482:	4618      	mov	r0, r3
 8002484:	f107 0708 	add.w	r7, r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
 8002498:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
 800249a:	f04f 0300 	mov.w	r3, #0
 800249e:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80024a0:	f240 53a4 	movw	r3, #1444	; 0x5a4
 80024a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d03d      	beq.n	800252a <xTimerGenericCommand+0x9e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d125      	bne.n	800250c <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80024c0:	f7ff f83a 	bl	8001538 <xTaskGetSchedulerState>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d10f      	bne.n	80024ea <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 80024ca:	f240 53a4 	movw	r3, #1444	; 0x5a4
 80024ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	f107 0310 	add.w	r3, r7, #16
 80024d8:	4610      	mov	r0, r2
 80024da:	4619      	mov	r1, r3
 80024dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	f7ff f9b1 	bl	8001848 <xQueueGenericSend>
 80024e6:	61f8      	str	r0, [r7, #28]
 80024e8:	e01f      	b.n	800252a <xTimerGenericCommand+0x9e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80024ea:	f240 53a4 	movw	r3, #1444	; 0x5a4
 80024ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	f107 0310 	add.w	r3, r7, #16
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	f04f 0300 	mov.w	r3, #0
 8002504:	f7ff f9a0 	bl	8001848 <xQueueGenericSend>
 8002508:	61f8      	str	r0, [r7, #28]
 800250a:	e00e      	b.n	800252a <xTimerGenericCommand+0x9e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800250c:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8002510:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	f107 0310 	add.w	r3, r7, #16
 800251a:	4610      	mov	r0, r2
 800251c:	4619      	mov	r1, r3
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	f7ff fa4c 	bl	80019c0 <xQueueGenericSendFromISR>
 8002528:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
 800252a:	69fb      	ldr	r3, [r7, #28]
}
 800252c:	4618      	mov	r0, r3
 800252e:	f107 0720 	add.w	r7, r7, #32
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop

08002538 <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af02      	add	r7, sp, #8
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002542:	f240 539c 	movw	r3, #1436	; 0x59c
 8002546:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	60fb      	str	r3, [r7, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f103 0304 	add.w	r3, r3, #4
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fd59 	bl	8002010 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d11e      	bne.n	80025a4 <prvProcessExpiredTimer+0x6c>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	699a      	ldr	r2, [r3, #24]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	18d3      	adds	r3, r2, r3
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	4619      	mov	r1, r3
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f000 f8bf 	bl	80026f8 <prvInsertTimerInActiveList>
 800257a:	4603      	mov	r3, r0
 800257c:	2b01      	cmp	r3, #1
 800257e:	d111      	bne.n	80025a4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f04f 0100 	mov.w	r1, #0
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	f7ff ff7b 	bl	800248c <xTimerGenericCommand>
 8002596:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d102      	bne.n	80025a4 <prvProcessExpiredTimer+0x6c>
 800259e:	f7ff fe97 	bl	80022d0 <ulPortSetInterruptMask>
 80025a2:	e7fe      	b.n	80025a2 <prvProcessExpiredTimer+0x6a>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	4798      	blx	r3
}
 80025ac:	f107 0710 	add.w	r7, r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80025bc:	f107 0308 	add.w	r3, r7, #8
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 f843 	bl	800264c <prvGetNextExpireTime>
 80025c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	4619      	mov	r1, r3
 80025ce:	f000 f803 	bl	80025d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80025d2:	f000 f8db 	bl	800278c <prvProcessReceivedCommands>
	}
 80025d6:	e7f1      	b.n	80025bc <prvTimerTask+0x8>

080025d8 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
 80025e2:	f7fe f9e9 	bl	80009b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80025e6:	f107 0308 	add.w	r3, r7, #8
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 f858 	bl	80026a0 <prvSampleTimeNow>
 80025f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d121      	bne.n	800263c <prvProcessTimerOrBlockTask+0x64>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10a      	bne.n	8002614 <prvProcessTimerOrBlockTask+0x3c>
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	429a      	cmp	r2, r3
 8002604:	d806      	bhi.n	8002614 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002606:	f7fe f9e9 	bl	80009dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	68f9      	ldr	r1, [r7, #12]
 800260e:	f7ff ff93 	bl	8002538 <prvProcessExpiredTimer>
 8002612:	e017      	b.n	8002644 <prvProcessTimerOrBlockTask+0x6c>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8002614:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8002618:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	1acb      	subs	r3, r1, r3
 8002624:	4610      	mov	r0, r2
 8002626:	4619      	mov	r1, r3
 8002628:	f7ff fc36 	bl	8001e98 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 800262c:	f7fe f9d6 	bl	80009dc <xTaskResumeAll>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d105      	bne.n	8002642 <prvProcessTimerOrBlockTask+0x6a>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 8002636:	f7ff fe0b 	bl	8002250 <vPortYield>
 800263a:	e002      	b.n	8002642 <prvProcessTimerOrBlockTask+0x6a>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 800263c:	f7fe f9ce 	bl	80009dc <xTaskResumeAll>
 8002640:	e000      	b.n	8002644 <prvProcessTimerOrBlockTask+0x6c>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 8002642:	bf00      	nop
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002644:	f107 0710 	add.w	r7, r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002654:	f240 539c 	movw	r3, #1436	; 0x59c
 8002658:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	bf14      	ite	ne
 8002664:	2300      	movne	r3, #0
 8002666:	2301      	moveq	r3, #1
 8002668:	b2db      	uxtb	r3, r3
 800266a:	461a      	mov	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d108      	bne.n	800268a <prvGetNextExpireTime+0x3e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002678:	f240 539c 	movw	r3, #1436	; 0x59c
 800267c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	e002      	b.n	8002690 <prvGetNextExpireTime+0x44>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002690:	68fb      	ldr	r3, [r7, #12]
}
 8002692:	4618      	mov	r0, r3
 8002694:	f107 0714 	add.w	r7, r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop

080026a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80026a8:	f7fe fa52 	bl	8000b50 <xTaskGetTickCount>
 80026ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80026ae:	f240 53a8 	movw	r3, #1448	; 0x5a8
 80026b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d20c      	bcs.n	80026d8 <prvSampleTimeNow+0x38>
	{
		prvSwitchTimerLists( xLastTime );
 80026be:	f240 53a8 	movw	r3, #1448	; 0x5a8
 80026c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f000 f8e1 	bl	8002890 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f04f 0201 	mov.w	r2, #1
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	e003      	b.n	80026e0 <prvSampleTimeNow+0x40>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80026e0:	f240 53a8 	movw	r3, #1448	; 0x5a8
 80026e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 80026ec:	68fb      	ldr	r3, [r7, #12]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	f107 0710 	add.w	r7, r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
 8002704:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002718:	68ba      	ldr	r2, [r7, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	429a      	cmp	r2, r3
 800271e:	d817      	bhi.n	8002750 <prvInsertTimerInActiveList+0x58>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	1ad2      	subs	r2, r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	429a      	cmp	r2, r3
 800272c:	d303      	bcc.n	8002736 <prvInsertTimerInActiveList+0x3e>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800272e:	f04f 0301 	mov.w	r3, #1
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	e024      	b.n	8002780 <prvInsertTimerInActiveList+0x88>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002736:	f240 53a0 	movw	r3, #1440	; 0x5a0
 800273a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f103 0304 	add.w	r3, r3, #4
 8002746:	4610      	mov	r0, r2
 8002748:	4619      	mov	r1, r3
 800274a:	f7ff fc27 	bl	8001f9c <vListInsert>
 800274e:	e017      	b.n	8002780 <prvInsertTimerInActiveList+0x88>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d207      	bcs.n	8002768 <prvInsertTimerInActiveList+0x70>
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d303      	bcc.n	8002768 <prvInsertTimerInActiveList+0x70>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002760:	f04f 0301 	mov.w	r3, #1
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	e00b      	b.n	8002780 <prvInsertTimerInActiveList+0x88>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002768:	f240 539c 	movw	r3, #1436	; 0x59c
 800276c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f103 0304 	add.w	r3, r3, #4
 8002778:	4610      	mov	r0, r2
 800277a:	4619      	mov	r1, r3
 800277c:	f7ff fc0e 	bl	8001f9c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002780:	697b      	ldr	r3, [r7, #20]
}
 8002782:	4618      	mov	r0, r3
 8002784:	f107 0718 	add.w	r7, r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08a      	sub	sp, #40	; 0x28
 8002790:	af02      	add	r7, sp, #8
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002792:	e066      	b.n	8002862 <prvProcessReceivedCommands+0xd6>
	{
		pxTimer = xMessage.pxTimer;
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	61fb      	str	r3, [r7, #28]

		if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <prvProcessReceivedCommands+0x20>
		{
			/* The timer is in a list, remove it. */
			( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	f103 0304 	add.w	r3, r3, #4
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fc32 	bl	8002010 <uxListRemove>
		it must be present in the function call.  prvSampleTimeNow() must be 
		called after the message is received from xTimerQueue so there is no 
		possibility of a higher priority task adding a message to the message
		queue with a time that is ahead of the timer daemon task (because it
		pre-empted the timer daemon task after the xTimeNow value was set). */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80027ac:	f107 0304 	add.w	r3, r7, #4
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff ff75 	bl	80026a0 <prvSampleTimeNow>
 80027b6:	61b8      	str	r0, [r7, #24]

		switch( xMessage.xMessageID )
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	d84e      	bhi.n	800285c <prvProcessReceivedCommands+0xd0>
 80027be:	a201      	add	r2, pc, #4	; (adr r2, 80027c4 <prvProcessReceivedCommands+0x38>)
 80027c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c4:	080027d5 	.word	0x080027d5
 80027c8:	0800285d 	.word	0x0800285d
 80027cc:	0800282b 	.word	0x0800282b
 80027d0:	08002855 	.word	0x08002855
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	18d2      	adds	r2, r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	69f8      	ldr	r0, [r7, #28]
 80027e0:	4611      	mov	r1, r2
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	f7ff ff88 	bl	80026f8 <prvInsertTimerInActiveList>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d138      	bne.n	8002860 <prvProcessReceivedCommands+0xd4>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	69f8      	ldr	r0, [r7, #28]
 80027f4:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d130      	bne.n	8002860 <prvProcessReceivedCommands+0xd4>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	18d3      	adds	r3, r2, r3
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	9200      	str	r2, [sp, #0]
 800280c:	69f8      	ldr	r0, [r7, #28]
 800280e:	f04f 0100 	mov.w	r1, #0
 8002812:	461a      	mov	r2, r3
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	f7ff fe38 	bl	800248c <xTimerGenericCommand>
 800281c:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d11d      	bne.n	8002860 <prvProcessReceivedCommands+0xd4>
 8002824:	f7ff fd54 	bl	80022d0 <ulPortSetInterruptMask>
 8002828:	e7fe      	b.n	8002828 <prvProcessReceivedCommands+0x9c>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d102      	bne.n	800283e <prvProcessReceivedCommands+0xb2>
 8002838:	f7ff fd4a 	bl	80022d0 <ulPortSetInterruptMask>
 800283c:	e7fe      	b.n	800283c <prvProcessReceivedCommands+0xb0>
				longer or shorter than the old one.  The command time is 
				therefore set to the current time, and as the period cannot be
				zero the next expiry time can only be in the future, meaning
				(unlike for the xTimerStart() case above) there is no fail case
				that needs to be handled here. */
				( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	699a      	ldr	r2, [r3, #24]
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	18d3      	adds	r3, r2, r3
 8002846:	69f8      	ldr	r0, [r7, #28]
 8002848:	4619      	mov	r1, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	f7ff ff53 	bl	80026f8 <prvInsertTimerInActiveList>
				break;
 8002852:	e006      	b.n	8002862 <prvProcessReceivedCommands+0xd6>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
 8002854:	69f8      	ldr	r0, [r7, #28]
 8002856:	f000 f92f 	bl	8002ab8 <vPortFree>
				break;
 800285a:	e002      	b.n	8002862 <prvProcessReceivedCommands+0xd6>

			default	:
				/* Don't expect to get here. */
				break;
 800285c:	bf00      	nop
 800285e:	e000      	b.n	8002862 <prvProcessReceivedCommands+0xd6>
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
						configASSERT( xResult );
						( void ) xResult;
					}
				}
				break;
 8002860:	bf00      	nop
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002862:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8002866:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	f107 0308 	add.w	r3, r7, #8
 8002870:	4610      	mov	r0, r2
 8002872:	4619      	mov	r1, r3
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	f04f 0300 	mov.w	r3, #0
 800287c:	f7ff f914 	bl	8001aa8 <xQueueGenericReceive>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d186      	bne.n	8002794 <prvProcessReceivedCommands+0x8>
			default	:
				/* Don't expect to get here. */
				break;
		}
	}
}
 8002886:	f107 0720 	add.w	r7, r7, #32
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop

08002890 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08a      	sub	sp, #40	; 0x28
 8002894:	af02      	add	r7, sp, #8
 8002896:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002898:	e04b      	b.n	8002932 <prvSwitchTimerLists+0xa2>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800289a:	f240 539c 	movw	r3, #1436	; 0x59c
 800289e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80028aa:	f240 539c 	movw	r3, #1436	; 0x59c
 80028ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	61bb      	str	r3, [r7, #24]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	f103 0304 	add.w	r3, r3, #4
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff fba5 	bl	8002010 <uxListRemove>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	69b8      	ldr	r0, [r7, #24]
 80028cc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d12d      	bne.n	8002932 <prvSwitchTimerLists+0xa2>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	699a      	ldr	r2, [r3, #24]
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	18d3      	adds	r3, r2, r3
 80028de:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d912      	bls.n	800290e <prvSwitchTimerLists+0x7e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80028f4:	f240 539c 	movw	r3, #1436	; 0x59c
 80028f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	f103 0304 	add.w	r3, r3, #4
 8002904:	4610      	mov	r0, r2
 8002906:	4619      	mov	r1, r3
 8002908:	f7ff fb48 	bl	8001f9c <vListInsert>
 800290c:	e011      	b.n	8002932 <prvSwitchTimerLists+0xa2>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	69b8      	ldr	r0, [r7, #24]
 8002916:	f04f 0100 	mov.w	r1, #0
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	f7ff fdb4 	bl	800248c <xTimerGenericCommand>
 8002924:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d102      	bne.n	8002932 <prvSwitchTimerLists+0xa2>
 800292c:	f7ff fcd0 	bl	80022d0 <ulPortSetInterruptMask>
 8002930:	e7fe      	b.n	8002930 <prvSwitchTimerLists+0xa0>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002932:	f240 539c 	movw	r3, #1436	; 0x59c
 8002936:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1ab      	bne.n	800289a <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
 8002942:	f240 539c 	movw	r3, #1436	; 0x59c
 8002946:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
 800294e:	f240 53a0 	movw	r3, #1440	; 0x5a0
 8002952:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	f240 539c 	movw	r3, #1436	; 0x59c
 800295c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002960:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8002962:	f240 53a0 	movw	r3, #1440	; 0x5a0
 8002966:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	601a      	str	r2, [r3, #0]
}
 800296e:	f107 0720 	add.w	r7, r7, #32
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop

08002978 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800297c:	f7ff fc78 	bl	8002270 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002980:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8002984:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d12b      	bne.n	80029e6 <prvCheckForValidListAndQueue+0x6e>
		{
			vListInitialise( &xActiveTimerList1 );
 800298e:	f240 5074 	movw	r0, #1396	; 0x574
 8002992:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002996:	f7ff faaf 	bl	8001ef8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800299a:	f240 5088 	movw	r0, #1416	; 0x588
 800299e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80029a2:	f7ff faa9 	bl	8001ef8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80029a6:	f240 539c 	movw	r3, #1436	; 0x59c
 80029aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029ae:	f240 5274 	movw	r2, #1396	; 0x574
 80029b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80029b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80029b8:	f240 53a0 	movw	r3, #1440	; 0x5a0
 80029bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029c0:	f240 5288 	movw	r2, #1416	; 0x588
 80029c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80029c8:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 80029ca:	f04f 000a 	mov.w	r0, #10
 80029ce:	f04f 010c 	mov.w	r1, #12
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	f7fe feef 	bl	80017b8 <xQueueGenericCreate>
 80029da:	4602      	mov	r2, r0
 80029dc:	f240 53a4 	movw	r3, #1444	; 0x5a4
 80029e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029e4:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
 80029e6:	f7ff fc59 	bl	800229c <vPortExitCritical>
}
 80029ea:	bd80      	pop	{r7, pc}

080029ec <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
static unsigned char *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d005      	beq.n	8002a10 <pvPortMalloc+0x24>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f023 0307 	bic.w	r3, r3, #7
 8002a0a:	f103 0308 	add.w	r3, r3, #8
 8002a0e:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
 8002a10:	f7fd ffd2 	bl	80009b8 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8002a14:	f243 13b0 	movw	r3, #12720	; 0x31b0
 8002a18:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d108      	bne.n	8002a34 <pvPortMalloc+0x48>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
 8002a22:	4b24      	ldr	r3, [pc, #144]	; (8002ab4 <pvPortMalloc+0xc8>)
 8002a24:	f023 0307 	bic.w	r3, r3, #7
 8002a28:	461a      	mov	r2, r3
 8002a2a:	f243 13b0 	movw	r3, #12720	; 0x31b0
 8002a2e:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8002a32:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002a34:	f243 13ac 	movw	r3, #12716	; 0x31ac
 8002a38:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	18d2      	adds	r2, r2, r3
 8002a42:	f642 33f7 	movw	r3, #11255	; 0x2bf7
 8002a46:	f2c0 0301 	movt	r3, #1
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d825      	bhi.n	8002a9a <pvPortMalloc+0xae>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8002a4e:	f243 13ac 	movw	r3, #12716	; 0x31ac
 8002a52:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	18d2      	adds	r2, r2, r3
 8002a5c:	f243 13ac 	movw	r3, #12716	; 0x31ac
 8002a60:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8002a64:	681b      	ldr	r3, [r3, #0]
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d917      	bls.n	8002a9a <pvPortMalloc+0xae>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8002a6a:	f243 13b0 	movw	r3, #12720	; 0x31b0
 8002a6e:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	f243 13ac 	movw	r3, #12716	; 0x31ac
 8002a78:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	18d3      	adds	r3, r2, r3
 8002a80:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8002a82:	f243 13ac 	movw	r3, #12716	; 0x31ac
 8002a86:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	18d2      	adds	r2, r2, r3
 8002a90:	f243 13ac 	movw	r3, #12716	; 0x31ac
 8002a94:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8002a98:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}	
	xTaskResumeAll();
 8002a9a:	f7fd ff9f 	bl	80009dc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <pvPortMalloc+0xbc>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8002aa4:	f7fd fc6c 	bl	8000380 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f107 0710 	add.w	r7, r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	200005b4 	.word	0x200005b4

08002ab8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <vPortFree+0x14>
 8002ac6:	f7ff fc03 	bl	80022d0 <ulPortSetInterruptMask>
 8002aca:	e7fe      	b.n	8002aca <vPortFree+0x12>
}
 8002acc:	f107 0708 	add.w	r7, r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <vStartLEDFlashTasks>:
static portTASK_FUNCTION_PROTO( vLEDFlashTask, pvParameters );

/*-----------------------------------------------------------*/

void vStartLEDFlashTasks( unsigned portBASE_TYPE uxPriority )
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b088      	sub	sp, #32
 8002ad8:	af04      	add	r7, sp, #16
 8002ada:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xLEDTask;

	/* Create the three tasks. */
	//for( xLEDTask = 0; xLEDTask < ledNUMBER_OF_LEDS; ++xLEDTask )
	for( xLEDTask = 0; xLEDTask < 3; ++xLEDTask )
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	e01c      	b.n	8002b1e <vStartLEDFlashTasks+0x4a>
	{
		/* Spawn the task. */
		xTaskCreate( vLEDFlashTask, ( signed char * ) "LEDx", ledSTACK_SIZE, NULL, uxPriority, ( xTaskHandle * ) NULL );
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	f04f 0300 	mov.w	r3, #0
 8002aec:	9301      	str	r3, [sp, #4]
 8002aee:	f04f 0300 	mov.w	r3, #0
 8002af2:	9302      	str	r3, [sp, #8]
 8002af4:	f04f 0300 	mov.w	r3, #0
 8002af8:	9303      	str	r3, [sp, #12]
 8002afa:	f642 302d 	movw	r0, #11053	; 0x2b2d
 8002afe:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002b02:	f243 5104 	movw	r1, #13572	; 0x3504
 8002b06:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002b0a:	f04f 0282 	mov.w	r2, #130	; 0x82
 8002b0e:	f04f 0300 	mov.w	r3, #0
 8002b12:	f7fd fdcf 	bl	80006b4 <xTaskGenericCreate>
{
signed portBASE_TYPE xLEDTask;

	/* Create the three tasks. */
	//for( xLEDTask = 0; xLEDTask < ledNUMBER_OF_LEDS; ++xLEDTask )
	for( xLEDTask = 0; xLEDTask < 3; ++xLEDTask )
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f103 0301 	add.w	r3, r3, #1
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	dddf      	ble.n	8002ae4 <vStartLEDFlashTasks+0x10>
	{
		/* Spawn the task. */
		xTaskCreate( vLEDFlashTask, ( signed char * ) "LEDx", ledSTACK_SIZE, NULL, uxPriority, ( xTaskHandle * ) NULL );
	}
}
 8002b24:	f107 0710 	add.w	r7, r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <vLEDFlashTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vLEDFlashTask, pvParameters )
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]

	/* The parameters are not used. */
	( void ) pvParameters;

	/* Calculate the LED and flash rate. */
	portENTER_CRITICAL();
 8002b34:	f7ff fb9c 	bl	8002270 <vPortEnterCritical>
	{
		/* See which of the eight LED's we should use. */
		uxLED = uxFlashTaskNumber;
 8002b38:	f243 13b4 	movw	r3, #12724	; 0x31b4
 8002b3c:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	617b      	str	r3, [r7, #20]

		/* Update so the next task uses the next LED. */
		uxFlashTaskNumber++;
 8002b44:	f243 13b4 	movw	r3, #12724	; 0x31b4
 8002b48:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f103 0201 	add.w	r2, r3, #1
 8002b52:	f243 13b4 	movw	r3, #12724	; 0x31b4
 8002b56:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8002b5a:	601a      	str	r2, [r3, #0]
	}
	portEXIT_CRITICAL();
 8002b5c:	f7ff fb9e 	bl	800229c <vPortExitCritical>

	xFlashRate = ledFLASH_RATE_BASE + ( ledFLASH_RATE_BASE * ( portTickType ) uxLED );
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f103 0301 	add.w	r3, r3, #1
 8002b66:	f240 124d 	movw	r2, #333	; 0x14d
 8002b6a:	fb02 f303 	mul.w	r3, r2, r3
 8002b6e:	613b      	str	r3, [r7, #16]
	xFlashRate /= portTICK_RATE_MS;

	/* We will turn the LED on and off again in the delay period, so each
	delay is only half the total period. */
	xFlashRate /= ( portTickType ) 2;
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8002b76:	613b      	str	r3, [r7, #16]

	/* We need to initialise xLastFlashTime prior to the first call to 
	vTaskDelayUntil(). */
	xLastFlashTime = xTaskGetTickCount();
 8002b78:	f7fd ffea 	bl	8000b50 <xTaskGetTickCount>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		/* Delay for half the flash period then turn the LED on. */
		vTaskDelayUntil( &xLastFlashTime, xFlashRate );
 8002b80:	f107 030c 	add.w	r3, r7, #12
 8002b84:	4618      	mov	r0, r3
 8002b86:	6939      	ldr	r1, [r7, #16]
 8002b88:	f7fd fe74 	bl	8000874 <vTaskDelayUntil>
		vParTestToggleLED( uxLED );
 8002b8c:	6978      	ldr	r0, [r7, #20]
 8002b8e:	f7fd fc29 	bl	80003e4 <vParTestToggleLED>

		/* Delay for half the flash period then turn the LED off. */
		vTaskDelayUntil( &xLastFlashTime, xFlashRate );
 8002b92:	f107 030c 	add.w	r3, r7, #12
 8002b96:	4618      	mov	r0, r3
 8002b98:	6939      	ldr	r1, [r7, #16]
 8002b9a:	f7fd fe6b 	bl	8000874 <vTaskDelayUntil>
		vParTestToggleLED( uxLED );
 8002b9e:	6978      	ldr	r0, [r7, #20]
 8002ba0:	f7fd fc20 	bl	80003e4 <vParTestToggleLED>
	}
 8002ba4:	e7ec      	b.n	8002b80 <vLEDFlashTask+0x54>
 8002ba6:	bf00      	nop

08002ba8 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8002bb2:	79fa      	ldrb	r2, [r7, #7]
 8002bb4:	f243 6368 	movw	r3, #13928	; 0x3668
 8002bb8:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f04f 0101 	mov.w	r1, #1
 8002bc6:	f000 f9df 	bl	8002f88 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8002bca:	79fa      	ldrb	r2, [r7, #7]
 8002bcc:	f243 6360 	movw	r3, #13920	; 0x3660
 8002bd0:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002bd4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002bd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002bda:	f04f 0301 	mov.w	r3, #1
 8002bde:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002be6:	f04f 0301 	mov.w	r3, #1
 8002bea:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002bec:	f04f 0302 	mov.w	r3, #2
 8002bf0:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8002bf2:	79fa      	ldrb	r2, [r7, #7]
 8002bf4:	f240 030c 	movw	r3, #12
 8002bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bfc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002c00:	f107 0308 	add.w	r3, r7, #8
 8002c04:	4610      	mov	r0, r2
 8002c06:	4619      	mov	r1, r3
 8002c08:	f000 f874 	bl	8002cf4 <GPIO_Init>
}
 8002c0c:	f107 0710 	add.w	r7, r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <STM_EVAL_LEDToggle>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 8002c1e:	79fa      	ldrb	r2, [r7, #7]
 8002c20:	f240 030c 	movw	r3, #12
 8002c24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002c2c:	79f9      	ldrb	r1, [r7, #7]
 8002c2e:	f240 030c 	movw	r3, #12
 8002c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c36:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002c3a:	6959      	ldr	r1, [r3, #20]
 8002c3c:	79f8      	ldrb	r0, [r7, #7]
 8002c3e:	f243 6360 	movw	r3, #13920	; 0x3660
 8002c42:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002c46:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8002c4a:	404b      	eors	r3, r1
 8002c4c:	6153      	str	r3, [r2, #20]
}
 8002c4e:	f107 070c 	add.w	r7, r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c66:	d017      	beq.n	8002c98 <NVIC_PriorityGroupConfig+0x40>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002c6e:	d013      	beq.n	8002c98 <NVIC_PriorityGroupConfig+0x40>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002c76:	d00f      	beq.n	8002c98 <NVIC_PriorityGroupConfig+0x40>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7e:	d00b      	beq.n	8002c98 <NVIC_PriorityGroupConfig+0x40>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c86:	d007      	beq.n	8002c98 <NVIC_PriorityGroupConfig+0x40>
 8002c88:	f243 500c 	movw	r0, #13580	; 0x350c
 8002c8c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002c90:	f04f 0173 	mov.w	r1, #115	; 0x73
 8002c94:	f7fd fb88 	bl	80003a8 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8002c98:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8002c9c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
 8002ca6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002caa:	60da      	str	r2, [r3, #12]
}
 8002cac:	f107 0708 	add.w	r7, r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8002cc2:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d102      	bne.n	8002cd0 <EXTI_ClearITPendingBit+0x1c>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d107      	bne.n	8002ce0 <EXTI_ClearITPendingBit+0x2c>
 8002cd0:	f243 5054 	movw	r0, #13652	; 0x3554
 8002cd4:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002cd8:	f240 111d 	movw	r1, #285	; 0x11d
 8002cdc:	f7fd fb64 	bl	80003a8 <assert_failed>
  
  EXTI->PR = EXTI_Line;
 8002ce0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002ce4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	615a      	str	r2, [r3, #20]
}
 8002cec:	f107 0708 	add.w	r7, r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	f04f 0300 	mov.w	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d03f      	beq.n	8002d9e <GPIO_Init+0xaa>
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d038      	beq.n	8002d9e <GPIO_Init+0xaa>
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d031      	beq.n	8002d9e <GPIO_Init+0xaa>
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d02a      	beq.n	8002d9e <GPIO_Init+0xaa>
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d023      	beq.n	8002d9e <GPIO_Init+0xaa>
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d01c      	beq.n	8002d9e <GPIO_Init+0xaa>
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002d6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d015      	beq.n	8002d9e <GPIO_Init+0xaa>
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002d78:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d00e      	beq.n	8002d9e <GPIO_Init+0xaa>
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d007      	beq.n	8002d9e <GPIO_Init+0xaa>
 8002d8e:	f243 50a4 	movw	r0, #13732	; 0x35a4
 8002d92:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002d96:	f04f 01bb 	mov.w	r1, #187	; 0xbb
 8002d9a:	f7fd fb05 	bl	80003a8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d107      	bne.n	8002db6 <GPIO_Init+0xc2>
 8002da6:	f243 50a4 	movw	r0, #13732	; 0x35a4
 8002daa:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002dae:	f04f 01bc 	mov.w	r1, #188	; 0xbc
 8002db2:	f7fd faf9 	bl	80003a8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	791b      	ldrb	r3, [r3, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d013      	beq.n	8002de6 <GPIO_Init+0xf2>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	791b      	ldrb	r3, [r3, #4]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d00f      	beq.n	8002de6 <GPIO_Init+0xf2>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	791b      	ldrb	r3, [r3, #4]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d00b      	beq.n	8002de6 <GPIO_Init+0xf2>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	791b      	ldrb	r3, [r3, #4]
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	d007      	beq.n	8002de6 <GPIO_Init+0xf2>
 8002dd6:	f243 50a4 	movw	r0, #13732	; 0x35a4
 8002dda:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002dde:	f04f 01bd 	mov.w	r1, #189	; 0xbd
 8002de2:	f7fd fae1 	bl	80003a8 <assert_failed>
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	79db      	ldrb	r3, [r3, #7]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00f      	beq.n	8002e0e <GPIO_Init+0x11a>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	79db      	ldrb	r3, [r3, #7]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d00b      	beq.n	8002e0e <GPIO_Init+0x11a>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	79db      	ldrb	r3, [r3, #7]
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d007      	beq.n	8002e0e <GPIO_Init+0x11a>
 8002dfe:	f243 50a4 	movw	r0, #13732	; 0x35a4
 8002e02:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002e06:	f04f 01be 	mov.w	r1, #190	; 0xbe
 8002e0a:	f7fd facd 	bl	80003a8 <assert_failed>

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	e0af      	b.n	8002f76 <GPIO_Init+0x282>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f04f 0201 	mov.w	r2, #1
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	f040 809c 	bne.w	8002f6e <GPIO_Init+0x27a>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002e40:	f04f 0103 	mov.w	r1, #3
 8002e44:	fa01 f303 	lsl.w	r3, r1, r3
 8002e48:	ea6f 0303 	mvn.w	r3, r3
 8002e4c:	401a      	ands	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	791b      	ldrb	r3, [r3, #4]
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002e62:	fa01 f303 	lsl.w	r3, r1, r3
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	791b      	ldrb	r3, [r3, #4]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d003      	beq.n	8002e7c <GPIO_Init+0x188>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	791b      	ldrb	r3, [r3, #4]
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d15c      	bne.n	8002f36 <GPIO_Init+0x242>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	795b      	ldrb	r3, [r3, #5]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d013      	beq.n	8002eac <GPIO_Init+0x1b8>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	795b      	ldrb	r3, [r3, #5]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d00f      	beq.n	8002eac <GPIO_Init+0x1b8>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	795b      	ldrb	r3, [r3, #5]
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d00b      	beq.n	8002eac <GPIO_Init+0x1b8>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	795b      	ldrb	r3, [r3, #5]
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d007      	beq.n	8002eac <GPIO_Init+0x1b8>
 8002e9c:	f243 50a4 	movw	r0, #13732	; 0x35a4
 8002ea0:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002ea4:	f04f 01d0 	mov.w	r1, #208	; 0xd0
 8002ea8:	f7fd fa7e 	bl	80003a8 <assert_failed>

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002eb6:	f04f 0103 	mov.w	r1, #3
 8002eba:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebe:	ea6f 0303 	mvn.w	r3, r3
 8002ec2:	401a      	ands	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	795b      	ldrb	r3, [r3, #5]
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8002edc:	431a      	orrs	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	799b      	ldrb	r3, [r3, #6]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00b      	beq.n	8002f02 <GPIO_Init+0x20e>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	799b      	ldrb	r3, [r3, #6]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d007      	beq.n	8002f02 <GPIO_Init+0x20e>
 8002ef2:	f243 50a4 	movw	r0, #13732	; 0x35a4
 8002ef6:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002efa:	f04f 01d7 	mov.w	r1, #215	; 0xd7
 8002efe:	f7fd fa53 	bl	80003a8 <assert_failed>

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	f04f 0101 	mov.w	r1, #1
 8002f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f12:	ea6f 0303 	mvn.w	r3, r3
 8002f16:	401a      	ands	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	799b      	ldrb	r3, [r3, #6]
 8002f24:	4619      	mov	r1, r3
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	431a      	orrs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002f42:	f04f 0103 	mov.w	r1, #3
 8002f46:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4a:	ea6f 0303 	mvn.w	r3, r3
 8002f4e:	401a      	ands	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	79db      	ldrb	r3, [r3, #7]
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002f64:	fa01 f303 	lsl.w	r3, r1, r3
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f103 0301 	add.w	r3, r3, #1
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2b0f      	cmp	r3, #15
 8002f7a:	f67f af4c 	bls.w	8002e16 <GPIO_Init+0x122>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8002f7e:	f107 0718 	add.w	r7, r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop

08002f88 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	f44f 436e 	mov.w	r3, #60928	; 0xee00
 8002f9a:	f2c8 138b 	movt	r3, #33163	; 0x818b
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d102      	bne.n	8002faa <RCC_AHB1PeriphClockCmd+0x22>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d107      	bne.n	8002fba <RCC_AHB1PeriphClockCmd+0x32>
 8002faa:	f243 50f4 	movw	r0, #13812	; 0x35f4
 8002fae:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002fb2:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8002fb6:	f7fd f9f7 	bl	80003a8 <assert_failed>

  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8002fba:	78fb      	ldrb	r3, [r7, #3]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00a      	beq.n	8002fd6 <RCC_AHB1PeriphClockCmd+0x4e>
 8002fc0:	78fb      	ldrb	r3, [r7, #3]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d007      	beq.n	8002fd6 <RCC_AHB1PeriphClockCmd+0x4e>
 8002fc6:	f243 50f4 	movw	r0, #13812	; 0x35f4
 8002fca:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002fce:	f240 4142 	movw	r1, #1090	; 0x442
 8002fd2:	f7fd f9e9 	bl	80003a8 <assert_failed>
  if (NewState != DISABLE)
 8002fd6:	78fb      	ldrb	r3, [r7, #3]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00c      	beq.n	8002ff6 <RCC_AHB1PeriphClockCmd+0x6e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8002fdc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002fe0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002fe4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002fe8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002fec:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ff4:	e00d      	b.n	8003012 <RCC_AHB1PeriphClockCmd+0x8a>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8002ff6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002ffa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ffe:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003002:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003006:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	ea6f 0202 	mvn.w	r2, r2
 800300e:	400a      	ands	r2, r1
 8003010:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8003012:	f107 0708 	add.w	r7, r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop

0800301c <__register_exitproc>:
 800301c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003020:	4c27      	ldr	r4, [pc, #156]	; (80030c0 <__register_exitproc+0xa4>)
 8003022:	6825      	ldr	r5, [r4, #0]
 8003024:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 8003028:	b084      	sub	sp, #16
 800302a:	4607      	mov	r7, r0
 800302c:	2c00      	cmp	r4, #0
 800302e:	d041      	beq.n	80030b4 <__register_exitproc+0x98>
 8003030:	6866      	ldr	r6, [r4, #4]
 8003032:	2e1f      	cmp	r6, #31
 8003034:	dd1c      	ble.n	8003070 <__register_exitproc+0x54>
 8003036:	4823      	ldr	r0, [pc, #140]	; (80030c4 <__register_exitproc+0xa8>)
 8003038:	b910      	cbnz	r0, 8003040 <__register_exitproc+0x24>
 800303a:	f04f 30ff 	mov.w	r0, #4294967295
 800303e:	e01f      	b.n	8003080 <__register_exitproc+0x64>
 8003040:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003044:	9103      	str	r1, [sp, #12]
 8003046:	9202      	str	r2, [sp, #8]
 8003048:	9301      	str	r3, [sp, #4]
 800304a:	f3af 8000 	nop.w
 800304e:	9903      	ldr	r1, [sp, #12]
 8003050:	9a02      	ldr	r2, [sp, #8]
 8003052:	9b01      	ldr	r3, [sp, #4]
 8003054:	4604      	mov	r4, r0
 8003056:	2800      	cmp	r0, #0
 8003058:	d0ef      	beq.n	800303a <__register_exitproc+0x1e>
 800305a:	f8d5 6148 	ldr.w	r6, [r5, #328]	; 0x148
 800305e:	2000      	movs	r0, #0
 8003060:	6060      	str	r0, [r4, #4]
 8003062:	6026      	str	r6, [r4, #0]
 8003064:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8003068:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 800306c:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 8003070:	6865      	ldr	r5, [r4, #4]
 8003072:	b947      	cbnz	r7, 8003086 <__register_exitproc+0x6a>
 8003074:	1ca8      	adds	r0, r5, #2
 8003076:	3501      	adds	r5, #1
 8003078:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
 800307c:	6065      	str	r5, [r4, #4]
 800307e:	2000      	movs	r0, #0
 8003080:	b004      	add	sp, #16
 8003082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003086:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 800308a:	2001      	movs	r0, #1
 800308c:	eb04 0885 	add.w	r8, r4, r5, lsl #2
 8003090:	fa00 f005 	lsl.w	r0, r0, r5
 8003094:	4306      	orrs	r6, r0
 8003096:	2f02      	cmp	r7, #2
 8003098:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
 800309c:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 80030a0:	f8c8 3108 	str.w	r3, [r8, #264]	; 0x108
 80030a4:	d1e6      	bne.n	8003074 <__register_exitproc+0x58>
 80030a6:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 80030aa:	ea43 0200 	orr.w	r2, r3, r0
 80030ae:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 80030b2:	e7df      	b.n	8003074 <__register_exitproc+0x58>
 80030b4:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 80030b8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 80030bc:	e7b8      	b.n	8003030 <__register_exitproc+0x14>
 80030be:	bf00      	nop
 80030c0:	0800367c 	.word	0x0800367c
 80030c4:	00000000 	.word	0x00000000

080030c8 <__libc_fini_array>:
 80030c8:	b570      	push	{r4, r5, r6, lr}
 80030ca:	4b11      	ldr	r3, [pc, #68]	; (8003110 <__libc_fini_array+0x48>)
 80030cc:	4c11      	ldr	r4, [pc, #68]	; (8003114 <__libc_fini_array+0x4c>)
 80030ce:	1b18      	subs	r0, r3, r4
 80030d0:	1081      	asrs	r1, r0, #2
 80030d2:	d018      	beq.n	8003106 <__libc_fini_array+0x3e>
 80030d4:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80030d8:	1e4e      	subs	r6, r1, #1
 80030da:	4635      	mov	r5, r6
 80030dc:	f854 2d04 	ldr.w	r2, [r4, #-4]!
 80030e0:	f006 0601 	and.w	r6, r6, #1
 80030e4:	4790      	blx	r2
 80030e6:	b175      	cbz	r5, 8003106 <__libc_fini_array+0x3e>
 80030e8:	b126      	cbz	r6, 80030f4 <__libc_fini_array+0x2c>
 80030ea:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 80030ee:	4798      	blx	r3
 80030f0:	3d01      	subs	r5, #1
 80030f2:	d008      	beq.n	8003106 <__libc_fini_array+0x3e>
 80030f4:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 80030f8:	4780      	blx	r0
 80030fa:	3d01      	subs	r5, #1
 80030fc:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8003100:	4788      	blx	r1
 8003102:	3d01      	subs	r5, #1
 8003104:	d1f6      	bne.n	80030f4 <__libc_fini_array+0x2c>
 8003106:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800310a:	f000 babf 	b.w	800368c <_fini>
 800310e:	bf00      	nop
 8003110:	080036a4 	.word	0x080036a4
 8003114:	080036a0 	.word	0x080036a0

08003118 <__libc_init_array>:
 8003118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311a:	4f20      	ldr	r7, [pc, #128]	; (800319c <__libc_init_array+0x84>)
 800311c:	4c20      	ldr	r4, [pc, #128]	; (80031a0 <__libc_init_array+0x88>)
 800311e:	1b38      	subs	r0, r7, r4
 8003120:	1087      	asrs	r7, r0, #2
 8003122:	d017      	beq.n	8003154 <__libc_init_array+0x3c>
 8003124:	1e7a      	subs	r2, r7, #1
 8003126:	6823      	ldr	r3, [r4, #0]
 8003128:	2501      	movs	r5, #1
 800312a:	f002 0601 	and.w	r6, r2, #1
 800312e:	4798      	blx	r3
 8003130:	42af      	cmp	r7, r5
 8003132:	d00f      	beq.n	8003154 <__libc_init_array+0x3c>
 8003134:	b12e      	cbz	r6, 8003142 <__libc_init_array+0x2a>
 8003136:	f854 1f04 	ldr.w	r1, [r4, #4]!
 800313a:	2502      	movs	r5, #2
 800313c:	4788      	blx	r1
 800313e:	42af      	cmp	r7, r5
 8003140:	d008      	beq.n	8003154 <__libc_init_array+0x3c>
 8003142:	6860      	ldr	r0, [r4, #4]
 8003144:	4780      	blx	r0
 8003146:	3502      	adds	r5, #2
 8003148:	68a2      	ldr	r2, [r4, #8]
 800314a:	1d26      	adds	r6, r4, #4
 800314c:	4790      	blx	r2
 800314e:	3408      	adds	r4, #8
 8003150:	42af      	cmp	r7, r5
 8003152:	d1f6      	bne.n	8003142 <__libc_init_array+0x2a>
 8003154:	4f13      	ldr	r7, [pc, #76]	; (80031a4 <__libc_init_array+0x8c>)
 8003156:	4c14      	ldr	r4, [pc, #80]	; (80031a8 <__libc_init_array+0x90>)
 8003158:	f000 fa92 	bl	8003680 <_init>
 800315c:	1b3b      	subs	r3, r7, r4
 800315e:	109f      	asrs	r7, r3, #2
 8003160:	d018      	beq.n	8003194 <__libc_init_array+0x7c>
 8003162:	1e7d      	subs	r5, r7, #1
 8003164:	6821      	ldr	r1, [r4, #0]
 8003166:	f005 0601 	and.w	r6, r5, #1
 800316a:	2501      	movs	r5, #1
 800316c:	4788      	blx	r1
 800316e:	42af      	cmp	r7, r5
 8003170:	d011      	beq.n	8003196 <__libc_init_array+0x7e>
 8003172:	b12e      	cbz	r6, 8003180 <__libc_init_array+0x68>
 8003174:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8003178:	2502      	movs	r5, #2
 800317a:	4780      	blx	r0
 800317c:	42af      	cmp	r7, r5
 800317e:	d00b      	beq.n	8003198 <__libc_init_array+0x80>
 8003180:	6862      	ldr	r2, [r4, #4]
 8003182:	4790      	blx	r2
 8003184:	3502      	adds	r5, #2
 8003186:	68a3      	ldr	r3, [r4, #8]
 8003188:	1d26      	adds	r6, r4, #4
 800318a:	4798      	blx	r3
 800318c:	3408      	adds	r4, #8
 800318e:	42af      	cmp	r7, r5
 8003190:	d1f6      	bne.n	8003180 <__libc_init_array+0x68>
 8003192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800319a:	bf00      	nop
 800319c:	08003698 	.word	0x08003698
 80031a0:	08003698 	.word	0x08003698
 80031a4:	080036a0 	.word	0x080036a0
 80031a8:	08003698 	.word	0x08003698

080031ac <memcmp>:
 80031ac:	2a03      	cmp	r2, #3
 80031ae:	b4f0      	push	{r4, r5, r6, r7}
 80031b0:	d931      	bls.n	8003216 <memcmp+0x6a>
 80031b2:	ea41 0300 	orr.w	r3, r1, r0
 80031b6:	079c      	lsls	r4, r3, #30
 80031b8:	d12e      	bne.n	8003218 <memcmp+0x6c>
 80031ba:	6806      	ldr	r6, [r0, #0]
 80031bc:	680f      	ldr	r7, [r1, #0]
 80031be:	1f15      	subs	r5, r2, #4
 80031c0:	1d03      	adds	r3, r0, #4
 80031c2:	1d0c      	adds	r4, r1, #4
 80031c4:	42be      	cmp	r6, r7
 80031c6:	f3c5 0c80 	ubfx	ip, r5, #2, #1
 80031ca:	d124      	bne.n	8003216 <memcmp+0x6a>
 80031cc:	2d03      	cmp	r5, #3
 80031ce:	462a      	mov	r2, r5
 80031d0:	d91f      	bls.n	8003212 <memcmp+0x66>
 80031d2:	f1bc 0f00 	cmp.w	ip, #0
 80031d6:	d008      	beq.n	80031ea <memcmp+0x3e>
 80031d8:	6825      	ldr	r5, [r4, #0]
 80031da:	681e      	ldr	r6, [r3, #0]
 80031dc:	4621      	mov	r1, r4
 80031de:	4618      	mov	r0, r3
 80031e0:	3404      	adds	r4, #4
 80031e2:	3304      	adds	r3, #4
 80031e4:	42ae      	cmp	r6, r5
 80031e6:	d011      	beq.n	800320c <memcmp+0x60>
 80031e8:	e015      	b.n	8003216 <memcmp+0x6a>
 80031ea:	4618      	mov	r0, r3
 80031ec:	4621      	mov	r1, r4
 80031ee:	6823      	ldr	r3, [r4, #0]
 80031f0:	6804      	ldr	r4, [r0, #0]
 80031f2:	1d05      	adds	r5, r0, #4
 80031f4:	1d0e      	adds	r6, r1, #4
 80031f6:	429c      	cmp	r4, r3
 80031f8:	d10d      	bne.n	8003216 <memcmp+0x6a>
 80031fa:	4628      	mov	r0, r5
 80031fc:	4631      	mov	r1, r6
 80031fe:	6835      	ldr	r5, [r6, #0]
 8003200:	6806      	ldr	r6, [r0, #0]
 8003202:	3a04      	subs	r2, #4
 8003204:	1d03      	adds	r3, r0, #4
 8003206:	1d0c      	adds	r4, r1, #4
 8003208:	42ae      	cmp	r6, r5
 800320a:	d104      	bne.n	8003216 <memcmp+0x6a>
 800320c:	3a04      	subs	r2, #4
 800320e:	2a03      	cmp	r2, #3
 8003210:	d8eb      	bhi.n	80031ea <memcmp+0x3e>
 8003212:	4621      	mov	r1, r4
 8003214:	4618      	mov	r0, r3
 8003216:	b31a      	cbz	r2, 8003260 <memcmp+0xb4>
 8003218:	7803      	ldrb	r3, [r0, #0]
 800321a:	780c      	ldrb	r4, [r1, #0]
 800321c:	42a3      	cmp	r3, r4
 800321e:	d10a      	bne.n	8003236 <memcmp+0x8a>
 8003220:	1e55      	subs	r5, r2, #1
 8003222:	2200      	movs	r2, #0
 8003224:	07eb      	lsls	r3, r5, #31
 8003226:	d514      	bpl.n	8003252 <memcmp+0xa6>
 8003228:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800322c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003230:	2201      	movs	r2, #1
 8003232:	42a3      	cmp	r3, r4
 8003234:	d00d      	beq.n	8003252 <memcmp+0xa6>
 8003236:	1b18      	subs	r0, r3, r4
 8003238:	e010      	b.n	800325c <memcmp+0xb0>
 800323a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800323e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003242:	42a3      	cmp	r3, r4
 8003244:	d1f7      	bne.n	8003236 <memcmp+0x8a>
 8003246:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800324a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800324e:	42a3      	cmp	r3, r4
 8003250:	d1f1      	bne.n	8003236 <memcmp+0x8a>
 8003252:	42aa      	cmp	r2, r5
 8003254:	f102 0202 	add.w	r2, r2, #2
 8003258:	d1ef      	bne.n	800323a <memcmp+0x8e>
 800325a:	2000      	movs	r0, #0
 800325c:	bcf0      	pop	{r4, r5, r6, r7}
 800325e:	4770      	bx	lr
 8003260:	4610      	mov	r0, r2
 8003262:	e7fb      	b.n	800325c <memcmp+0xb0>

08003264 <memcpy>:
 8003264:	2a0f      	cmp	r2, #15
 8003266:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800326a:	f240 8095 	bls.w	8003398 <memcpy+0x134>
 800326e:	ea41 0300 	orr.w	r3, r1, r0
 8003272:	079b      	lsls	r3, r3, #30
 8003274:	f040 8092 	bne.w	800339c <memcpy+0x138>
 8003278:	680c      	ldr	r4, [r1, #0]
 800327a:	6004      	str	r4, [r0, #0]
 800327c:	684d      	ldr	r5, [r1, #4]
 800327e:	6045      	str	r5, [r0, #4]
 8003280:	688e      	ldr	r6, [r1, #8]
 8003282:	f1a2 0310 	sub.w	r3, r2, #16
 8003286:	6086      	str	r6, [r0, #8]
 8003288:	68cc      	ldr	r4, [r1, #12]
 800328a:	461d      	mov	r5, r3
 800328c:	2d0f      	cmp	r5, #15
 800328e:	60c4      	str	r4, [r0, #12]
 8003290:	f3c3 1600 	ubfx	r6, r3, #4, #1
 8003294:	f101 0410 	add.w	r4, r1, #16
 8003298:	f100 0310 	add.w	r3, r0, #16
 800329c:	d922      	bls.n	80032e4 <memcpy+0x80>
 800329e:	b166      	cbz	r6, 80032ba <memcpy+0x56>
 80032a0:	6826      	ldr	r6, [r4, #0]
 80032a2:	601e      	str	r6, [r3, #0]
 80032a4:	6866      	ldr	r6, [r4, #4]
 80032a6:	605e      	str	r6, [r3, #4]
 80032a8:	68a6      	ldr	r6, [r4, #8]
 80032aa:	609e      	str	r6, [r3, #8]
 80032ac:	68e6      	ldr	r6, [r4, #12]
 80032ae:	3d10      	subs	r5, #16
 80032b0:	60de      	str	r6, [r3, #12]
 80032b2:	3410      	adds	r4, #16
 80032b4:	3310      	adds	r3, #16
 80032b6:	2d0f      	cmp	r5, #15
 80032b8:	d914      	bls.n	80032e4 <memcpy+0x80>
 80032ba:	6826      	ldr	r6, [r4, #0]
 80032bc:	601e      	str	r6, [r3, #0]
 80032be:	6866      	ldr	r6, [r4, #4]
 80032c0:	605e      	str	r6, [r3, #4]
 80032c2:	68a6      	ldr	r6, [r4, #8]
 80032c4:	609e      	str	r6, [r3, #8]
 80032c6:	68e6      	ldr	r6, [r4, #12]
 80032c8:	60de      	str	r6, [r3, #12]
 80032ca:	6926      	ldr	r6, [r4, #16]
 80032cc:	611e      	str	r6, [r3, #16]
 80032ce:	6966      	ldr	r6, [r4, #20]
 80032d0:	615e      	str	r6, [r3, #20]
 80032d2:	69a6      	ldr	r6, [r4, #24]
 80032d4:	619e      	str	r6, [r3, #24]
 80032d6:	69e6      	ldr	r6, [r4, #28]
 80032d8:	3d20      	subs	r5, #32
 80032da:	61de      	str	r6, [r3, #28]
 80032dc:	3420      	adds	r4, #32
 80032de:	3320      	adds	r3, #32
 80032e0:	2d0f      	cmp	r5, #15
 80032e2:	d8ea      	bhi.n	80032ba <memcpy+0x56>
 80032e4:	f1a2 0310 	sub.w	r3, r2, #16
 80032e8:	f023 040f 	bic.w	r4, r3, #15
 80032ec:	f002 030f 	and.w	r3, r2, #15
 80032f0:	3410      	adds	r4, #16
 80032f2:	2b03      	cmp	r3, #3
 80032f4:	eb00 0804 	add.w	r8, r0, r4
 80032f8:	4421      	add	r1, r4
 80032fa:	d951      	bls.n	80033a0 <memcpy+0x13c>
 80032fc:	f1a3 0904 	sub.w	r9, r3, #4
 8003300:	460b      	mov	r3, r1
 8003302:	ea4f 0999 	mov.w	r9, r9, lsr #2
 8003306:	eb01 0c89 	add.w	ip, r1, r9, lsl #2
 800330a:	f853 6b04 	ldr.w	r6, [r3], #4
 800330e:	ebc1 050c 	rsb	r5, r1, ip
 8003312:	4644      	mov	r4, r8
 8003314:	f10c 0c04 	add.w	ip, ip, #4
 8003318:	4563      	cmp	r3, ip
 800331a:	f844 6b04 	str.w	r6, [r4], #4
 800331e:	f3c5 0580 	ubfx	r5, r5, #2, #1
 8003322:	d012      	beq.n	800334a <memcpy+0xe6>
 8003324:	b12d      	cbz	r5, 8003332 <memcpy+0xce>
 8003326:	f853 5b04 	ldr.w	r5, [r3], #4
 800332a:	4563      	cmp	r3, ip
 800332c:	f844 5b04 	str.w	r5, [r4], #4
 8003330:	d00b      	beq.n	800334a <memcpy+0xe6>
 8003332:	461e      	mov	r6, r3
 8003334:	4625      	mov	r5, r4
 8003336:	f856 7b04 	ldr.w	r7, [r6], #4
 800333a:	f845 7b04 	str.w	r7, [r5], #4
 800333e:	685f      	ldr	r7, [r3, #4]
 8003340:	1d33      	adds	r3, r6, #4
 8003342:	6067      	str	r7, [r4, #4]
 8003344:	1d2c      	adds	r4, r5, #4
 8003346:	4563      	cmp	r3, ip
 8003348:	d1f3      	bne.n	8003332 <memcpy+0xce>
 800334a:	f109 0301 	add.w	r3, r9, #1
 800334e:	009c      	lsls	r4, r3, #2
 8003350:	1909      	adds	r1, r1, r4
 8003352:	f002 0203 	and.w	r2, r2, #3
 8003356:	4444      	add	r4, r8
 8003358:	b1da      	cbz	r2, 8003392 <memcpy+0x12e>
 800335a:	4623      	mov	r3, r4
 800335c:	780d      	ldrb	r5, [r1, #0]
 800335e:	f803 5b01 	strb.w	r5, [r3], #1
 8003362:	18a2      	adds	r2, r4, r2
 8003364:	43e4      	mvns	r4, r4
 8003366:	1914      	adds	r4, r2, r4
 8003368:	4293      	cmp	r3, r2
 800336a:	f004 0401 	and.w	r4, r4, #1
 800336e:	d010      	beq.n	8003392 <memcpy+0x12e>
 8003370:	b12c      	cbz	r4, 800337e <memcpy+0x11a>
 8003372:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003376:	f803 4b01 	strb.w	r4, [r3], #1
 800337a:	4293      	cmp	r3, r2
 800337c:	d009      	beq.n	8003392 <memcpy+0x12e>
 800337e:	784d      	ldrb	r5, [r1, #1]
 8003380:	461c      	mov	r4, r3
 8003382:	f804 5b01 	strb.w	r5, [r4], #1
 8003386:	788d      	ldrb	r5, [r1, #2]
 8003388:	705d      	strb	r5, [r3, #1]
 800338a:	1c63      	adds	r3, r4, #1
 800338c:	3102      	adds	r1, #2
 800338e:	4293      	cmp	r3, r2
 8003390:	d1f5      	bne.n	800337e <memcpy+0x11a>
 8003392:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8003396:	4770      	bx	lr
 8003398:	4604      	mov	r4, r0
 800339a:	e7dd      	b.n	8003358 <memcpy+0xf4>
 800339c:	4604      	mov	r4, r0
 800339e:	e7dc      	b.n	800335a <memcpy+0xf6>
 80033a0:	4644      	mov	r4, r8
 80033a2:	461a      	mov	r2, r3
 80033a4:	e7d8      	b.n	8003358 <memcpy+0xf4>
 80033a6:	bf00      	nop

080033a8 <memset>:
 80033a8:	b4f0      	push	{r4, r5, r6, r7}
 80033aa:	0784      	lsls	r4, r0, #30
 80033ac:	4603      	mov	r3, r0
 80033ae:	f000 808e 	beq.w	80034ce <memset+0x126>
 80033b2:	1e54      	subs	r4, r2, #1
 80033b4:	2a00      	cmp	r2, #0
 80033b6:	f000 8088 	beq.w	80034ca <memset+0x122>
 80033ba:	07e5      	lsls	r5, r4, #31
 80033bc:	b2ce      	uxtb	r6, r1
 80033be:	d411      	bmi.n	80033e4 <memset+0x3c>
 80033c0:	461a      	mov	r2, r3
 80033c2:	1e67      	subs	r7, r4, #1
 80033c4:	f802 6b01 	strb.w	r6, [r2], #1
 80033c8:	4613      	mov	r3, r2
 80033ca:	4615      	mov	r5, r2
 80033cc:	0792      	lsls	r2, r2, #30
 80033ce:	d00f      	beq.n	80033f0 <memset+0x48>
 80033d0:	2c00      	cmp	r4, #0
 80033d2:	d07a      	beq.n	80034ca <memset+0x122>
 80033d4:	f803 6b01 	strb.w	r6, [r3], #1
 80033d8:	079a      	lsls	r2, r3, #30
 80033da:	463c      	mov	r4, r7
 80033dc:	461d      	mov	r5, r3
 80033de:	d007      	beq.n	80033f0 <memset+0x48>
 80033e0:	3c01      	subs	r4, #1
 80033e2:	e7ed      	b.n	80033c0 <memset+0x18>
 80033e4:	4603      	mov	r3, r0
 80033e6:	f803 6b01 	strb.w	r6, [r3], #1
 80033ea:	079a      	lsls	r2, r3, #30
 80033ec:	461d      	mov	r5, r3
 80033ee:	d1f7      	bne.n	80033e0 <memset+0x38>
 80033f0:	2c03      	cmp	r4, #3
 80033f2:	d952      	bls.n	800349a <memset+0xf2>
 80033f4:	b2ce      	uxtb	r6, r1
 80033f6:	ea46 2706 	orr.w	r7, r6, r6, lsl #8
 80033fa:	2c0f      	cmp	r4, #15
 80033fc:	ea47 4307 	orr.w	r3, r7, r7, lsl #16
 8003400:	d92d      	bls.n	800345e <memset+0xb6>
 8003402:	f1a4 0210 	sub.w	r2, r4, #16
 8003406:	4617      	mov	r7, r2
 8003408:	2f0f      	cmp	r7, #15
 800340a:	f3c2 1600 	ubfx	r6, r2, #4, #1
 800340e:	602b      	str	r3, [r5, #0]
 8003410:	606b      	str	r3, [r5, #4]
 8003412:	60ab      	str	r3, [r5, #8]
 8003414:	60eb      	str	r3, [r5, #12]
 8003416:	f105 0210 	add.w	r2, r5, #16
 800341a:	d916      	bls.n	800344a <memset+0xa2>
 800341c:	b13e      	cbz	r6, 800342e <memset+0x86>
 800341e:	3f10      	subs	r7, #16
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	6053      	str	r3, [r2, #4]
 8003424:	6093      	str	r3, [r2, #8]
 8003426:	60d3      	str	r3, [r2, #12]
 8003428:	3210      	adds	r2, #16
 800342a:	2f0f      	cmp	r7, #15
 800342c:	d90d      	bls.n	800344a <memset+0xa2>
 800342e:	3f20      	subs	r7, #32
 8003430:	f102 0610 	add.w	r6, r2, #16
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	6053      	str	r3, [r2, #4]
 8003438:	6093      	str	r3, [r2, #8]
 800343a:	60d3      	str	r3, [r2, #12]
 800343c:	6113      	str	r3, [r2, #16]
 800343e:	6153      	str	r3, [r2, #20]
 8003440:	6193      	str	r3, [r2, #24]
 8003442:	61d3      	str	r3, [r2, #28]
 8003444:	3220      	adds	r2, #32
 8003446:	2f0f      	cmp	r7, #15
 8003448:	d8f1      	bhi.n	800342e <memset+0x86>
 800344a:	f1a4 0210 	sub.w	r2, r4, #16
 800344e:	f022 020f 	bic.w	r2, r2, #15
 8003452:	f004 040f 	and.w	r4, r4, #15
 8003456:	3210      	adds	r2, #16
 8003458:	2c03      	cmp	r4, #3
 800345a:	4415      	add	r5, r2
 800345c:	d91d      	bls.n	800349a <memset+0xf2>
 800345e:	1f27      	subs	r7, r4, #4
 8003460:	463e      	mov	r6, r7
 8003462:	462a      	mov	r2, r5
 8003464:	2e03      	cmp	r6, #3
 8003466:	f842 3b04 	str.w	r3, [r2], #4
 800346a:	f3c7 0780 	ubfx	r7, r7, #2, #1
 800346e:	d90d      	bls.n	800348c <memset+0xe4>
 8003470:	b127      	cbz	r7, 800347c <memset+0xd4>
 8003472:	3e04      	subs	r6, #4
 8003474:	2e03      	cmp	r6, #3
 8003476:	f842 3b04 	str.w	r3, [r2], #4
 800347a:	d907      	bls.n	800348c <memset+0xe4>
 800347c:	4617      	mov	r7, r2
 800347e:	3e08      	subs	r6, #8
 8003480:	f847 3b04 	str.w	r3, [r7], #4
 8003484:	6053      	str	r3, [r2, #4]
 8003486:	1d3a      	adds	r2, r7, #4
 8003488:	2e03      	cmp	r6, #3
 800348a:	d8f7      	bhi.n	800347c <memset+0xd4>
 800348c:	1f23      	subs	r3, r4, #4
 800348e:	f023 0203 	bic.w	r2, r3, #3
 8003492:	1d13      	adds	r3, r2, #4
 8003494:	f004 0403 	and.w	r4, r4, #3
 8003498:	18ed      	adds	r5, r5, r3
 800349a:	b1b4      	cbz	r4, 80034ca <memset+0x122>
 800349c:	462b      	mov	r3, r5
 800349e:	b2c9      	uxtb	r1, r1
 80034a0:	f803 1b01 	strb.w	r1, [r3], #1
 80034a4:	192c      	adds	r4, r5, r4
 80034a6:	43ed      	mvns	r5, r5
 80034a8:	1962      	adds	r2, r4, r5
 80034aa:	42a3      	cmp	r3, r4
 80034ac:	f002 0501 	and.w	r5, r2, #1
 80034b0:	d00b      	beq.n	80034ca <memset+0x122>
 80034b2:	b11d      	cbz	r5, 80034bc <memset+0x114>
 80034b4:	f803 1b01 	strb.w	r1, [r3], #1
 80034b8:	42a3      	cmp	r3, r4
 80034ba:	d006      	beq.n	80034ca <memset+0x122>
 80034bc:	461a      	mov	r2, r3
 80034be:	f802 1b01 	strb.w	r1, [r2], #1
 80034c2:	7059      	strb	r1, [r3, #1]
 80034c4:	1c53      	adds	r3, r2, #1
 80034c6:	42a3      	cmp	r3, r4
 80034c8:	d1f8      	bne.n	80034bc <memset+0x114>
 80034ca:	bcf0      	pop	{r4, r5, r6, r7}
 80034cc:	4770      	bx	lr
 80034ce:	4605      	mov	r5, r0
 80034d0:	4614      	mov	r4, r2
 80034d2:	e78d      	b.n	80033f0 <memset+0x48>

080034d4 <register_fini>:
 80034d4:	4b02      	ldr	r3, [pc, #8]	; (80034e0 <register_fini+0xc>)
 80034d6:	b113      	cbz	r3, 80034de <register_fini+0xa>
 80034d8:	4802      	ldr	r0, [pc, #8]	; (80034e4 <register_fini+0x10>)
 80034da:	f000 b805 	b.w	80034e8 <atexit>
 80034de:	4770      	bx	lr
 80034e0:	00000000 	.word	0x00000000
 80034e4:	080030c9 	.word	0x080030c9

080034e8 <atexit>:
 80034e8:	4601      	mov	r1, r0
 80034ea:	2000      	movs	r0, #0
 80034ec:	4602      	mov	r2, r0
 80034ee:	4603      	mov	r3, r0
 80034f0:	f7ff bd94 	b.w	800301c <__register_exitproc>
 80034f4:	454c4449 	.word	0x454c4449
 80034f8:	00000000 	.word	0x00000000
 80034fc:	20726d54 	.word	0x20726d54
 8003500:	00637653 	.word	0x00637653
 8003504:	7844454c 	.word	0x7844454c
 8003508:	00000000 	.word	0x00000000
 800350c:	2f707041 	.word	0x2f707041
 8003510:	334d5453 	.word	0x334d5453
 8003514:	2d344632 	.word	0x2d344632
 8003518:	63736944 	.word	0x63736944
 800351c:	7265766f 	.word	0x7265766f
 8003520:	694c2f79 	.word	0x694c2f79
 8003524:	72617262 	.word	0x72617262
 8003528:	2f736569 	.word	0x2f736569
 800352c:	334d5453 	.word	0x334d5453
 8003530:	78344632 	.word	0x78344632
 8003534:	74535f78 	.word	0x74535f78
 8003538:	72655064 	.word	0x72655064
 800353c:	5f687069 	.word	0x5f687069
 8003540:	76697244 	.word	0x76697244
 8003544:	732f7265 	.word	0x732f7265
 8003548:	6d2f6372 	.word	0x6d2f6372
 800354c:	2e637369 	.word	0x2e637369
 8003550:	00000063 	.word	0x00000063
 8003554:	2f707041 	.word	0x2f707041
 8003558:	334d5453 	.word	0x334d5453
 800355c:	2d344632 	.word	0x2d344632
 8003560:	63736944 	.word	0x63736944
 8003564:	7265766f 	.word	0x7265766f
 8003568:	694c2f79 	.word	0x694c2f79
 800356c:	72617262 	.word	0x72617262
 8003570:	2f736569 	.word	0x2f736569
 8003574:	334d5453 	.word	0x334d5453
 8003578:	78344632 	.word	0x78344632
 800357c:	74535f78 	.word	0x74535f78
 8003580:	72655064 	.word	0x72655064
 8003584:	5f687069 	.word	0x5f687069
 8003588:	76697244 	.word	0x76697244
 800358c:	732f7265 	.word	0x732f7265
 8003590:	732f6372 	.word	0x732f6372
 8003594:	32336d74 	.word	0x32336d74
 8003598:	78783466 	.word	0x78783466
 800359c:	7478655f 	.word	0x7478655f
 80035a0:	00632e69 	.word	0x00632e69
 80035a4:	2f707041 	.word	0x2f707041
 80035a8:	334d5453 	.word	0x334d5453
 80035ac:	2d344632 	.word	0x2d344632
 80035b0:	63736944 	.word	0x63736944
 80035b4:	7265766f 	.word	0x7265766f
 80035b8:	694c2f79 	.word	0x694c2f79
 80035bc:	72617262 	.word	0x72617262
 80035c0:	2f736569 	.word	0x2f736569
 80035c4:	334d5453 	.word	0x334d5453
 80035c8:	78344632 	.word	0x78344632
 80035cc:	74535f78 	.word	0x74535f78
 80035d0:	72655064 	.word	0x72655064
 80035d4:	5f687069 	.word	0x5f687069
 80035d8:	76697244 	.word	0x76697244
 80035dc:	732f7265 	.word	0x732f7265
 80035e0:	732f6372 	.word	0x732f6372
 80035e4:	32336d74 	.word	0x32336d74
 80035e8:	78783466 	.word	0x78783466
 80035ec:	6970675f 	.word	0x6970675f
 80035f0:	00632e6f 	.word	0x00632e6f
 80035f4:	2f707041 	.word	0x2f707041
 80035f8:	334d5453 	.word	0x334d5453
 80035fc:	2d344632 	.word	0x2d344632
 8003600:	63736944 	.word	0x63736944
 8003604:	7265766f 	.word	0x7265766f
 8003608:	694c2f79 	.word	0x694c2f79
 800360c:	72617262 	.word	0x72617262
 8003610:	2f736569 	.word	0x2f736569
 8003614:	334d5453 	.word	0x334d5453
 8003618:	78344632 	.word	0x78344632
 800361c:	74535f78 	.word	0x74535f78
 8003620:	72655064 	.word	0x72655064
 8003624:	5f687069 	.word	0x5f687069
 8003628:	76697244 	.word	0x76697244
 800362c:	732f7265 	.word	0x732f7265
 8003630:	732f6372 	.word	0x732f6372
 8003634:	32336d74 	.word	0x32336d74
 8003638:	78783466 	.word	0x78783466
 800363c:	6363725f 	.word	0x6363725f
 8003640:	0000632e 	.word	0x0000632e

08003644 <xLEDs>:
 8003644:	03020001                                ....

08003648 <ucExpectedStackBytes.8450>:
 8003648:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
 8003658:	a5a5a5a5                                ....

0800365c <pcInterruptPriorityRegisters>:
 800365c:	e000e3f0                                ....

08003660 <GPIO_PIN>:
 8003660:	20001000 80004000                       ... .@..

08003668 <GPIO_CLK>:
 8003668:	00000008 00000008 00000008 00000008     ................
 8003678:	00000043                                C...

0800367c <_global_impure_ptr>:
 800367c:	20000020                                 .. 

08003680 <_init>:
 8003680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003682:	bf00      	nop
 8003684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003686:	bc08      	pop	{r3}
 8003688:	469e      	mov	lr, r3
 800368a:	4770      	bx	lr

0800368c <_fini>:
 800368c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800368e:	bf00      	nop
 8003690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003692:	bc08      	pop	{r3}
 8003694:	469e      	mov	lr, r3
 8003696:	4770      	bx	lr
