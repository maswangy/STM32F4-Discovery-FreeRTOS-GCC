   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"integer.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.bss.xTaskCheck,"aw",%nobits
  20              		.align	2
  23              	xTaskCheck:
  24 0000 00000000 		.space	4
  25              		.section	.rodata
  26              		.align	2
  27              	.LC0:
  28 0000 496E744D 		.ascii	"IntMath\000"
  28      61746800 
  29              		.section	.text.vStartIntegerMathTasks,"ax",%progbits
  30              		.align	2
  31              		.global	vStartIntegerMathTasks
  32              		.thumb
  33              		.thumb_func
  35              	vStartIntegerMathTasks:
  36              	.LFB110:
  37              		.file 1 "App/Common/Minimal/integer.c"
   1:App/Common/Minimal/integer.c **** /*
   2:App/Common/Minimal/integer.c ****     FreeRTOS V7.5.3 - Copyright (C) 2013 Real Time Engineers Ltd. 
   3:App/Common/Minimal/integer.c ****     All rights reserved
   4:App/Common/Minimal/integer.c **** 
   5:App/Common/Minimal/integer.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:App/Common/Minimal/integer.c **** 
   7:App/Common/Minimal/integer.c ****     ***************************************************************************
   8:App/Common/Minimal/integer.c ****      *                                                                       *
   9:App/Common/Minimal/integer.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:App/Common/Minimal/integer.c ****      *    robust, strictly quality controlled, supported, and cross          *
  11:App/Common/Minimal/integer.c ****      *    platform software that has become a de facto standard.             *
  12:App/Common/Minimal/integer.c ****      *                                                                       *
  13:App/Common/Minimal/integer.c ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:App/Common/Minimal/integer.c ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  15:App/Common/Minimal/integer.c ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:App/Common/Minimal/integer.c ****      *                                                                       *
  17:App/Common/Minimal/integer.c ****      *    Thank you!                                                         *
  18:App/Common/Minimal/integer.c ****      *                                                                       *
  19:App/Common/Minimal/integer.c ****     ***************************************************************************
  20:App/Common/Minimal/integer.c **** 
  21:App/Common/Minimal/integer.c ****     This file is part of the FreeRTOS distribution.
  22:App/Common/Minimal/integer.c **** 
  23:App/Common/Minimal/integer.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  24:App/Common/Minimal/integer.c ****     the terms of the GNU General Public License (version 2) as published by the
  25:App/Common/Minimal/integer.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:App/Common/Minimal/integer.c **** 
  27:App/Common/Minimal/integer.c ****     >>! NOTE: The modification to the GPL is included to allow you to distribute
  28:App/Common/Minimal/integer.c ****     >>! a combined work that includes FreeRTOS without being obliged to provide
  29:App/Common/Minimal/integer.c ****     >>! the source code for proprietary components outside of the FreeRTOS
  30:App/Common/Minimal/integer.c ****     >>! kernel.
  31:App/Common/Minimal/integer.c **** 
  32:App/Common/Minimal/integer.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:App/Common/Minimal/integer.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:App/Common/Minimal/integer.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:App/Common/Minimal/integer.c ****     link: http://www.freertos.org/a00114.html
  36:App/Common/Minimal/integer.c **** 
  37:App/Common/Minimal/integer.c ****     1 tab == 4 spaces!
  38:App/Common/Minimal/integer.c **** 
  39:App/Common/Minimal/integer.c ****     ***************************************************************************
  40:App/Common/Minimal/integer.c ****      *                                                                       *
  41:App/Common/Minimal/integer.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:App/Common/Minimal/integer.c ****      *    not run, what could be wrong?"                                     *
  43:App/Common/Minimal/integer.c ****      *                                                                       *
  44:App/Common/Minimal/integer.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  45:App/Common/Minimal/integer.c ****      *                                                                       *
  46:App/Common/Minimal/integer.c ****     ***************************************************************************
  47:App/Common/Minimal/integer.c **** 
  48:App/Common/Minimal/integer.c ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:App/Common/Minimal/integer.c ****     license and Real Time Engineers Ltd. contact details.
  50:App/Common/Minimal/integer.c **** 
  51:App/Common/Minimal/integer.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:App/Common/Minimal/integer.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:App/Common/Minimal/integer.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:App/Common/Minimal/integer.c **** 
  55:App/Common/Minimal/integer.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:App/Common/Minimal/integer.c ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:App/Common/Minimal/integer.c ****     licenses offer ticketed support, indemnification and middleware.
  58:App/Common/Minimal/integer.c **** 
  59:App/Common/Minimal/integer.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:App/Common/Minimal/integer.c ****     engineered and independently SIL3 certified version for use in safety and
  61:App/Common/Minimal/integer.c ****     mission critical applications that require provable dependability.
  62:App/Common/Minimal/integer.c **** 
  63:App/Common/Minimal/integer.c ****     1 tab == 4 spaces!
  64:App/Common/Minimal/integer.c **** */
  65:App/Common/Minimal/integer.c **** 
  66:App/Common/Minimal/integer.c **** /*
  67:App/Common/Minimal/integer.c ****  * Creates one or more tasks that repeatedly perform a set of integer
  68:App/Common/Minimal/integer.c ****  * calculations.  The result of each run-time calculation is compared to the 
  69:App/Common/Minimal/integer.c ****  * known expected result - with a mismatch being indicative of an error in the
  70:App/Common/Minimal/integer.c ****  * context switch mechanism.
  71:App/Common/Minimal/integer.c ****  */
  72:App/Common/Minimal/integer.c **** 
  73:App/Common/Minimal/integer.c **** #include <stdlib.h>
  74:App/Common/Minimal/integer.c **** 
  75:App/Common/Minimal/integer.c **** /* Scheduler include files. */
  76:App/Common/Minimal/integer.c **** #include "FreeRTOS.h"
  77:App/Common/Minimal/integer.c **** #include "task.h"
  78:App/Common/Minimal/integer.c **** 
  79:App/Common/Minimal/integer.c **** /* Demo program include files. */
  80:App/Common/Minimal/integer.c **** #include "integer.h"
  81:App/Common/Minimal/integer.c **** 
  82:App/Common/Minimal/integer.c **** /* The constants used in the calculation. */
  83:App/Common/Minimal/integer.c **** #define intgCONST1				( ( long ) 123 )
  84:App/Common/Minimal/integer.c **** #define intgCONST2				( ( long ) 234567 )
  85:App/Common/Minimal/integer.c **** #define intgCONST3				( ( long ) -3 )
  86:App/Common/Minimal/integer.c **** #define intgCONST4				( ( long ) 7 )
  87:App/Common/Minimal/integer.c **** #define intgEXPECTED_ANSWER		( ( ( intgCONST1 + intgCONST2 ) * intgCONST3 ) / intgCONST4 )
  88:App/Common/Minimal/integer.c **** 
  89:App/Common/Minimal/integer.c **** #define intgSTACK_SIZE			configMINIMAL_STACK_SIZE
  90:App/Common/Minimal/integer.c **** 
  91:App/Common/Minimal/integer.c **** /* As this is the minimal version, we will only create one task. */
  92:App/Common/Minimal/integer.c **** #define intgNUMBER_OF_TASKS		( 1 )
  93:App/Common/Minimal/integer.c **** 
  94:App/Common/Minimal/integer.c **** /* The task function.  Repeatedly performs a 32 bit calculation, checking the
  95:App/Common/Minimal/integer.c **** result against the expected result.  If the result is incorrect then the
  96:App/Common/Minimal/integer.c **** context switch must have caused some corruption. */
  97:App/Common/Minimal/integer.c **** static portTASK_FUNCTION_PROTO( vCompeteingIntMathTask, pvParameters );
  98:App/Common/Minimal/integer.c **** 
  99:App/Common/Minimal/integer.c **** /* Variables that are set to true within the calculation task to indicate
 100:App/Common/Minimal/integer.c **** that the task is still executing.  The check task sets the variable back to
 101:App/Common/Minimal/integer.c **** false, flagging an error if the variable is still false the next time it
 102:App/Common/Minimal/integer.c **** is called. */
 103:App/Common/Minimal/integer.c **** static volatile signed portBASE_TYPE xTaskCheck[ intgNUMBER_OF_TASKS ] = { ( signed portBASE_TYPE )
 104:App/Common/Minimal/integer.c **** 
 105:App/Common/Minimal/integer.c **** /*-----------------------------------------------------------*/
 106:App/Common/Minimal/integer.c **** 
 107:App/Common/Minimal/integer.c **** void vStartIntegerMathTasks( unsigned portBASE_TYPE uxPriority )
 108:App/Common/Minimal/integer.c **** {
  38              		.loc 1 108 0
  39              		.cfi_startproc
  40              		@ args = 0, pretend = 0, frame = 16
  41              		@ frame_needed = 1, uses_anonymous_args = 0
  42 0000 80B5     		push	{r7, lr}
  43              	.LCFI0:
  44              		.cfi_def_cfa_offset 8
  45              		.cfi_offset 7, -8
  46              		.cfi_offset 14, -4
  47 0002 88B0     		sub	sp, sp, #32
  48              	.LCFI1:
  49              		.cfi_def_cfa_offset 40
  50 0004 04AF     		add	r7, sp, #16
  51              	.LCFI2:
  52              		.cfi_def_cfa 7, 24
  53 0006 7860     		str	r0, [r7, #4]
 109:App/Common/Minimal/integer.c **** short sTask;
 110:App/Common/Minimal/integer.c **** 
 111:App/Common/Minimal/integer.c **** 	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
  54              		.loc 1 111 0
  55 0008 4FF00003 		mov	r3, #0
  56 000c FB81     		strh	r3, [r7, #14]	@ movhi
  57 000e 23E0     		b	.L2
  58              	.L3:
 112:App/Common/Minimal/integer.c **** 	{
 113:App/Common/Minimal/integer.c **** 		xTaskCreate( vCompeteingIntMathTask, ( signed char * ) "IntMath", intgSTACK_SIZE, ( void * ) &( x
  59              		.loc 1 113 0 discriminator 2
  60 0010 B7F90E30 		ldrsh	r3, [r7, #14]
  61 0014 4FEA8302 		lsl	r2, r3, #2
  62 0018 40F20003 		movw	r3, #:lower16:xTaskCheck
  63 001c C0F20003 		movt	r3, #:upper16:xTaskCheck
  64 0020 D318     		adds	r3, r2, r3
  65 0022 7A68     		ldr	r2, [r7, #4]
  66 0024 0092     		str	r2, [sp, #0]
  67 0026 4FF00002 		mov	r2, #0
  68 002a 0192     		str	r2, [sp, #4]
  69 002c 4FF00002 		mov	r2, #0
  70 0030 0292     		str	r2, [sp, #8]
  71 0032 4FF00002 		mov	r2, #0
  72 0036 0392     		str	r2, [sp, #12]
  73 0038 40F20000 		movw	r0, #:lower16:vCompeteingIntMathTask
  74 003c C0F20000 		movt	r0, #:upper16:vCompeteingIntMathTask
  75 0040 40F20001 		movw	r1, #:lower16:.LC0
  76 0044 C0F20001 		movt	r1, #:upper16:.LC0
  77 0048 4FF08202 		mov	r2, #130
  78 004c FFF7FEFF 		bl	xTaskGenericCreate
 111:App/Common/Minimal/integer.c **** 	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
  79              		.loc 1 111 0 discriminator 2
  80 0050 FB89     		ldrh	r3, [r7, #14]	@ movhi
  81 0052 03F10103 		add	r3, r3, #1
  82 0056 FB81     		strh	r3, [r7, #14]	@ movhi
  83              	.L2:
 111:App/Common/Minimal/integer.c **** 	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
  84              		.loc 1 111 0 is_stmt 0 discriminator 1
  85 0058 B7F90E30 		ldrsh	r3, [r7, #14]
  86 005c 002B     		cmp	r3, #0
  87 005e D7DD     		ble	.L3
 114:App/Common/Minimal/integer.c **** 	}
 115:App/Common/Minimal/integer.c **** }
  88              		.loc 1 115 0 is_stmt 1
  89 0060 07F11007 		add	r7, r7, #16
  90 0064 BD46     		mov	sp, r7
  91 0066 80BD     		pop	{r7, pc}
  92              		.cfi_endproc
  93              	.LFE110:
  95              		.section	.text.vCompeteingIntMathTask,"ax",%progbits
  96              		.align	2
  97              		.thumb
  98              		.thumb_func
 100              	vCompeteingIntMathTask:
 101              	.LFB111:
 116:App/Common/Minimal/integer.c **** /*-----------------------------------------------------------*/
 117:App/Common/Minimal/integer.c **** 
 118:App/Common/Minimal/integer.c **** static portTASK_FUNCTION( vCompeteingIntMathTask, pvParameters )
 119:App/Common/Minimal/integer.c **** {
 102              		.loc 1 119 0
 103              		.cfi_startproc
 104              		@ args = 0, pretend = 0, frame = 24
 105              		@ frame_needed = 1, uses_anonymous_args = 0
 106 0000 80B5     		push	{r7, lr}
 107              	.LCFI3:
 108              		.cfi_def_cfa_offset 8
 109              		.cfi_offset 7, -8
 110              		.cfi_offset 14, -4
 111 0002 86B0     		sub	sp, sp, #24
 112              	.LCFI4:
 113              		.cfi_def_cfa_offset 32
 114 0004 00AF     		add	r7, sp, #0
 115              	.LCFI5:
 116              		.cfi_def_cfa_register 7
 117 0006 7860     		str	r0, [r7, #4]
 120:App/Common/Minimal/integer.c **** /* These variables are all effectively set to constants so they are volatile to
 121:App/Common/Minimal/integer.c **** ensure the compiler does not just get rid of them. */
 122:App/Common/Minimal/integer.c **** volatile long lValue;
 123:App/Common/Minimal/integer.c **** short sError = pdFALSE;
 118              		.loc 1 123 0
 119 0008 4FF00003 		mov	r3, #0
 120 000c FB82     		strh	r3, [r7, #22]	@ movhi
 124:App/Common/Minimal/integer.c **** volatile signed portBASE_TYPE *pxTaskHasExecuted;
 125:App/Common/Minimal/integer.c **** 
 126:App/Common/Minimal/integer.c **** 	/* Set a pointer to the variable we are going to set to true each
 127:App/Common/Minimal/integer.c **** 	iteration.  This is also a good test of the parameter passing mechanism
 128:App/Common/Minimal/integer.c **** 	within each port. */
 129:App/Common/Minimal/integer.c **** 	pxTaskHasExecuted = ( volatile signed portBASE_TYPE * ) pvParameters;
 121              		.loc 1 129 0
 122 000e 7B68     		ldr	r3, [r7, #4]
 123 0010 3B61     		str	r3, [r7, #16]
 124 0012 00E0     		b	.L7
 125              	.L8:
 130:App/Common/Minimal/integer.c **** 
 131:App/Common/Minimal/integer.c **** 	/* Keep performing a calculation and checking the result against a constant. */
 132:App/Common/Minimal/integer.c **** 	for( ;; )
 133:App/Common/Minimal/integer.c **** 	{
 134:App/Common/Minimal/integer.c **** 		/* Perform the calculation.  This will store partial value in
 135:App/Common/Minimal/integer.c **** 		registers, resulting in a good test of the context switch mechanism. */
 136:App/Common/Minimal/integer.c **** 		lValue = intgCONST1;
 137:App/Common/Minimal/integer.c **** 		lValue += intgCONST2;
 138:App/Common/Minimal/integer.c **** 
 139:App/Common/Minimal/integer.c **** 		/* Yield in case cooperative scheduling is being used. */
 140:App/Common/Minimal/integer.c **** 		#if configUSE_PREEMPTION == 0
 141:App/Common/Minimal/integer.c **** 		{
 142:App/Common/Minimal/integer.c **** 			taskYIELD();
 143:App/Common/Minimal/integer.c **** 		}
 144:App/Common/Minimal/integer.c **** 		#endif
 145:App/Common/Minimal/integer.c **** 
 146:App/Common/Minimal/integer.c **** 		/* Finish off the calculation. */
 147:App/Common/Minimal/integer.c **** 		lValue *= intgCONST3;
 148:App/Common/Minimal/integer.c **** 		lValue /= intgCONST4;
 149:App/Common/Minimal/integer.c **** 
 150:App/Common/Minimal/integer.c **** 		/* If the calculation is found to be incorrect we stop setting the 
 151:App/Common/Minimal/integer.c **** 		TaskHasExecuted variable so the check task can see an error has 
 152:App/Common/Minimal/integer.c **** 		occurred. */
 153:App/Common/Minimal/integer.c **** 		if( lValue != intgEXPECTED_ANSWER ) /*lint !e774 volatile used to prevent this being optimised ou
 154:App/Common/Minimal/integer.c **** 		{
 155:App/Common/Minimal/integer.c **** 			sError = pdTRUE;
 156:App/Common/Minimal/integer.c **** 		}
 157:App/Common/Minimal/integer.c **** 
 158:App/Common/Minimal/integer.c **** 		if( sError == pdFALSE )
 159:App/Common/Minimal/integer.c **** 		{
 160:App/Common/Minimal/integer.c **** 			/* We have not encountered any errors, so set the flag that show
 161:App/Common/Minimal/integer.c **** 			we are still executing.  This will be periodically cleared by
 162:App/Common/Minimal/integer.c **** 			the check task. */
 163:App/Common/Minimal/integer.c **** 			portENTER_CRITICAL();
 164:App/Common/Minimal/integer.c **** 				*pxTaskHasExecuted = pdTRUE;
 165:App/Common/Minimal/integer.c **** 			portEXIT_CRITICAL();
 166:App/Common/Minimal/integer.c **** 		}
 167:App/Common/Minimal/integer.c **** 
 168:App/Common/Minimal/integer.c **** 		/* Yield in case cooperative scheduling is being used. */
 169:App/Common/Minimal/integer.c **** 		#if configUSE_PREEMPTION == 0
 170:App/Common/Minimal/integer.c **** 		{
 171:App/Common/Minimal/integer.c **** 			taskYIELD();
 172:App/Common/Minimal/integer.c **** 		}
 173:App/Common/Minimal/integer.c **** 		#endif
 174:App/Common/Minimal/integer.c **** 	}
 126              		.loc 1 174 0
 127 0014 00BF     		nop
 128              	.L7:
 136:App/Common/Minimal/integer.c **** 		lValue = intgCONST1;
 129              		.loc 1 136 0
 130 0016 4FF07B03 		mov	r3, #123
 131 001a FB60     		str	r3, [r7, #12]
 137:App/Common/Minimal/integer.c **** 		lValue += intgCONST2;
 132              		.loc 1 137 0
 133 001c FB68     		ldr	r3, [r7, #12]
 134 001e 03F56533 		add	r3, r3, #234496
 135 0022 03F14703 		add	r3, r3, #71
 136 0026 FB60     		str	r3, [r7, #12]
 147:App/Common/Minimal/integer.c **** 		lValue *= intgCONST3;
 137              		.loc 1 147 0
 138 0028 FB68     		ldr	r3, [r7, #12]
 139 002a 1A46     		mov	r2, r3
 140 002c 4FEA8303 		lsl	r3, r3, #2
 141 0030 D31A     		subs	r3, r2, r3
 142 0032 FB60     		str	r3, [r7, #12]
 148:App/Common/Minimal/integer.c **** 		lValue /= intgCONST4;
 143              		.loc 1 148 0
 144 0034 FB68     		ldr	r3, [r7, #12]
 145 0036 42F29342 		movw	r2, #9363
 146 003a C9F24922 		movt	r2, 37449
 147 003e 82FB0312 		smull	r1, r2, r2, r3
 148 0042 D218     		adds	r2, r2, r3
 149 0044 4FEAA202 		asr	r2, r2, #2
 150 0048 4FEAE373 		asr	r3, r3, #31
 151 004c D31A     		subs	r3, r2, r3
 152 004e FB60     		str	r3, [r7, #12]
 153:App/Common/Minimal/integer.c **** 		if( lValue != intgEXPECTED_ANSWER ) /*lint !e774 volatile used to prevent this being optimised ou
 153              		.loc 1 153 0
 154 0050 FA68     		ldr	r2, [r7, #12]
 155 0052 47F21B73 		movw	r3, #30491
 156 0056 CFF6FE73 		movt	r3, 65534
 157 005a 9A42     		cmp	r2, r3
 158 005c 02D0     		beq	.L5
 155:App/Common/Minimal/integer.c **** 			sError = pdTRUE;
 159              		.loc 1 155 0
 160 005e 4FF00103 		mov	r3, #1
 161 0062 FB82     		strh	r3, [r7, #22]	@ movhi
 162              	.L5:
 158:App/Common/Minimal/integer.c **** 		if( sError == pdFALSE )
 163              		.loc 1 158 0
 164 0064 B7F91630 		ldrsh	r3, [r7, #22]
 165 0068 002B     		cmp	r3, #0
 166 006a D3D1     		bne	.L8
 163:App/Common/Minimal/integer.c **** 			portENTER_CRITICAL();
 167              		.loc 1 163 0
 168 006c FFF7FEFF 		bl	vPortEnterCritical
 164:App/Common/Minimal/integer.c **** 				*pxTaskHasExecuted = pdTRUE;
 169              		.loc 1 164 0
 170 0070 3B69     		ldr	r3, [r7, #16]
 171 0072 4FF00102 		mov	r2, #1
 172 0076 1A60     		str	r2, [r3, #0]
 165:App/Common/Minimal/integer.c **** 			portEXIT_CRITICAL();
 173              		.loc 1 165 0
 174 0078 FFF7FEFF 		bl	vPortExitCritical
 175              		.loc 1 174 0
 176 007c CAE7     		b	.L8
 177              		.cfi_endproc
 178              	.LFE111:
 180 007e 00BF     		.section	.text.xAreIntegerMathsTaskStillRunning,"ax",%progbits
 181              		.align	2
 182              		.global	xAreIntegerMathsTaskStillRunning
 183              		.thumb
 184              		.thumb_func
 186              	xAreIntegerMathsTaskStillRunning:
 187              	.LFB112:
 175:App/Common/Minimal/integer.c **** }
 176:App/Common/Minimal/integer.c **** /*-----------------------------------------------------------*/
 177:App/Common/Minimal/integer.c **** 
 178:App/Common/Minimal/integer.c **** /* This is called to check that all the created tasks are still running. */
 179:App/Common/Minimal/integer.c **** portBASE_TYPE xAreIntegerMathsTaskStillRunning( void )
 180:App/Common/Minimal/integer.c **** {
 188              		.loc 1 180 0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 8
 191              		@ frame_needed = 1, uses_anonymous_args = 0
 192              		@ link register save eliminated.
 193 0000 80B4     		push	{r7}
 194              	.LCFI6:
 195              		.cfi_def_cfa_offset 4
 196              		.cfi_offset 7, -4
 197 0002 83B0     		sub	sp, sp, #12
 198              	.LCFI7:
 199              		.cfi_def_cfa_offset 16
 200 0004 00AF     		add	r7, sp, #0
 201              	.LCFI8:
 202              		.cfi_def_cfa_register 7
 181:App/Common/Minimal/integer.c **** portBASE_TYPE xReturn = pdTRUE;
 203              		.loc 1 181 0
 204 0006 4FF00103 		mov	r3, #1
 205 000a 7B60     		str	r3, [r7, #4]
 182:App/Common/Minimal/integer.c **** short sTask;
 183:App/Common/Minimal/integer.c **** 
 184:App/Common/Minimal/integer.c **** 	/* Check the maths tasks are still running by ensuring their check variables 
 185:App/Common/Minimal/integer.c **** 	are still being set to true. */
 186:App/Common/Minimal/integer.c **** 	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 206              		.loc 1 186 0
 207 000c 4FF00003 		mov	r3, #0
 208 0010 7B80     		strh	r3, [r7, #2]	@ movhi
 209 0012 1AE0     		b	.L10
 210              	.L12:
 187:App/Common/Minimal/integer.c **** 	{
 188:App/Common/Minimal/integer.c **** 		if( xTaskCheck[ sTask ] == pdFALSE )
 211              		.loc 1 188 0
 212 0014 B7F90220 		ldrsh	r2, [r7, #2]
 213 0018 40F20003 		movw	r3, #:lower16:xTaskCheck
 214 001c C0F20003 		movt	r3, #:upper16:xTaskCheck
 215 0020 53F82230 		ldr	r3, [r3, r2, lsl #2]
 216 0024 002B     		cmp	r3, #0
 217 0026 02D1     		bne	.L11
 189:App/Common/Minimal/integer.c **** 		{
 190:App/Common/Minimal/integer.c **** 			/* The check has not incremented so an error exists. */
 191:App/Common/Minimal/integer.c **** 			xReturn = pdFALSE;
 218              		.loc 1 191 0
 219 0028 4FF00003 		mov	r3, #0
 220 002c 7B60     		str	r3, [r7, #4]
 221              	.L11:
 192:App/Common/Minimal/integer.c **** 		}
 193:App/Common/Minimal/integer.c **** 
 194:App/Common/Minimal/integer.c **** 		/* Reset the check variable so we can tell if it has been set by
 195:App/Common/Minimal/integer.c **** 		the next time around. */
 196:App/Common/Minimal/integer.c **** 		xTaskCheck[ sTask ] = pdFALSE;
 222              		.loc 1 196 0
 223 002e B7F90220 		ldrsh	r2, [r7, #2]
 224 0032 40F20003 		movw	r3, #:lower16:xTaskCheck
 225 0036 C0F20003 		movt	r3, #:upper16:xTaskCheck
 226 003a 4FF00001 		mov	r1, #0
 227 003e 43F82210 		str	r1, [r3, r2, lsl #2]
 186:App/Common/Minimal/integer.c **** 	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 228              		.loc 1 186 0
 229 0042 7B88     		ldrh	r3, [r7, #2]	@ movhi
 230 0044 03F10103 		add	r3, r3, #1
 231 0048 7B80     		strh	r3, [r7, #2]	@ movhi
 232              	.L10:
 186:App/Common/Minimal/integer.c **** 	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 233              		.loc 1 186 0 is_stmt 0 discriminator 1
 234 004a B7F90230 		ldrsh	r3, [r7, #2]
 235 004e 002B     		cmp	r3, #0
 236 0050 E0DD     		ble	.L12
 197:App/Common/Minimal/integer.c **** 	}
 198:App/Common/Minimal/integer.c **** 
 199:App/Common/Minimal/integer.c **** 	return xReturn;
 237              		.loc 1 199 0 is_stmt 1
 238 0052 7B68     		ldr	r3, [r7, #4]
 200:App/Common/Minimal/integer.c **** }
 239              		.loc 1 200 0
 240 0054 1846     		mov	r0, r3
 241 0056 07F10C07 		add	r7, r7, #12
 242 005a BD46     		mov	sp, r7
 243 005c 80BC     		pop	{r7}
 244 005e 7047     		bx	lr
 245              		.cfi_endproc
 246              	.LFE112:
 248              		.text
 249              	.Letext0:
 250              		.file 2 "/home/thanhtruong/embedded-development/toolchain/gcc-arm-none-eabi-4_7-2013q1/bin/../lib/
 251              		.file 3 "Source/include/task.h"
 252              		.file 4 "App/STM32F4-Discovery/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 integer.c
     /tmp/ccesSsm1.s:20     .bss.xTaskCheck:00000000 $d
     /tmp/ccesSsm1.s:23     .bss.xTaskCheck:00000000 xTaskCheck
     /tmp/ccesSsm1.s:26     .rodata:00000000 $d
     /tmp/ccesSsm1.s:27     .rodata:00000000 .LC0
     /tmp/ccesSsm1.s:30     .text.vStartIntegerMathTasks:00000000 $t
     /tmp/ccesSsm1.s:35     .text.vStartIntegerMathTasks:00000000 vStartIntegerMathTasks
     /tmp/ccesSsm1.s:100    .text.vCompeteingIntMathTask:00000000 vCompeteingIntMathTask
     /tmp/ccesSsm1.s:96     .text.vCompeteingIntMathTask:00000000 $t
     /tmp/ccesSsm1.s:181    .text.xAreIntegerMathsTaskStillRunning:00000000 $t
     /tmp/ccesSsm1.s:186    .text.xAreIntegerMathsTaskStillRunning:00000000 xAreIntegerMathsTaskStillRunning
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
xTaskGenericCreate
vPortEnterCritical
vPortExitCritical
