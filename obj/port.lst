   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"port.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.data.uxCriticalNesting,"aw",%progbits
  20              		.align	2
  23              	uxCriticalNesting:
  24 0000 AAAAAAAA 		.word	-1431655766
  25              		.section	.bss.ucMaxSysCallPriority,"aw",%nobits
  28              	ucMaxSysCallPriority:
  29 0000 00       		.space	1
  30              		.section	.bss.ulMaxPRIGROUPValue,"aw",%nobits
  31              		.align	2
  34              	ulMaxPRIGROUPValue:
  35 0000 00000000 		.space	4
  36              		.section	.rodata.pcInterruptPriorityRegisters,"a",%progbits
  37              		.align	2
  40              	pcInterruptPriorityRegisters:
  41 0000 F0E300E0 		.word	-536812560
  42              		.section	.text.pxPortInitialiseStack,"ax",%progbits
  43              		.align	2
  44              		.global	pxPortInitialiseStack
  45              		.thumb
  46              		.thumb_func
  48              	pxPortInitialiseStack:
  49              	.LFB110:
  50              		.file 1 "Source/portable/GCC/ARM_CM4F/port.c"
   1:Source/portable/GCC/ARM_CM4F/port.c **** /*
   2:Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS V7.5.3 - Copyright (C) 2013 Real Time Engineers Ltd. 
   3:Source/portable/GCC/ARM_CM4F/port.c ****     All rights reserved
   4:Source/portable/GCC/ARM_CM4F/port.c **** 
   5:Source/portable/GCC/ARM_CM4F/port.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Source/portable/GCC/ARM_CM4F/port.c **** 
   7:Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
   8:Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
   9:Source/portable/GCC/ARM_CM4F/port.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:Source/portable/GCC/ARM_CM4F/port.c ****      *    robust, strictly quality controlled, supported, and cross          *
  11:Source/portable/GCC/ARM_CM4F/port.c ****      *    platform software that has become a de facto standard.             *
  12:Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  13:Source/portable/GCC/ARM_CM4F/port.c ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:Source/portable/GCC/ARM_CM4F/port.c ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  15:Source/portable/GCC/ARM_CM4F/port.c ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  17:Source/portable/GCC/ARM_CM4F/port.c ****      *    Thank you!                                                         *
  18:Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  19:Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  20:Source/portable/GCC/ARM_CM4F/port.c **** 
  21:Source/portable/GCC/ARM_CM4F/port.c ****     This file is part of the FreeRTOS distribution.
  22:Source/portable/GCC/ARM_CM4F/port.c **** 
  23:Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  24:Source/portable/GCC/ARM_CM4F/port.c ****     the terms of the GNU General Public License (version 2) as published by the
  25:Source/portable/GCC/ARM_CM4F/port.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:Source/portable/GCC/ARM_CM4F/port.c **** 
  27:Source/portable/GCC/ARM_CM4F/port.c ****     >>! NOTE: The modification to the GPL is included to allow you to distribute
  28:Source/portable/GCC/ARM_CM4F/port.c ****     >>! a combined work that includes FreeRTOS without being obliged to provide
  29:Source/portable/GCC/ARM_CM4F/port.c ****     >>! the source code for proprietary components outside of the FreeRTOS
  30:Source/portable/GCC/ARM_CM4F/port.c ****     >>! kernel.
  31:Source/portable/GCC/ARM_CM4F/port.c **** 
  32:Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:Source/portable/GCC/ARM_CM4F/port.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:Source/portable/GCC/ARM_CM4F/port.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:Source/portable/GCC/ARM_CM4F/port.c ****     link: http://www.freertos.org/a00114.html
  36:Source/portable/GCC/ARM_CM4F/port.c **** 
  37:Source/portable/GCC/ARM_CM4F/port.c ****     1 tab == 4 spaces!
  38:Source/portable/GCC/ARM_CM4F/port.c **** 
  39:Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  40:Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  41:Source/portable/GCC/ARM_CM4F/port.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:Source/portable/GCC/ARM_CM4F/port.c ****      *    not run, what could be wrong?"                                     *
  43:Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  44:Source/portable/GCC/ARM_CM4F/port.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  45:Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  46:Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  47:Source/portable/GCC/ARM_CM4F/port.c **** 
  48:Source/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:Source/portable/GCC/ARM_CM4F/port.c ****     license and Real Time Engineers Ltd. contact details.
  50:Source/portable/GCC/ARM_CM4F/port.c **** 
  51:Source/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:Source/portable/GCC/ARM_CM4F/port.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:Source/portable/GCC/ARM_CM4F/port.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:Source/portable/GCC/ARM_CM4F/port.c **** 
  55:Source/portable/GCC/ARM_CM4F/port.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:Source/portable/GCC/ARM_CM4F/port.c ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:Source/portable/GCC/ARM_CM4F/port.c ****     licenses offer ticketed support, indemnification and middleware.
  58:Source/portable/GCC/ARM_CM4F/port.c **** 
  59:Source/portable/GCC/ARM_CM4F/port.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:Source/portable/GCC/ARM_CM4F/port.c ****     engineered and independently SIL3 certified version for use in safety and
  61:Source/portable/GCC/ARM_CM4F/port.c ****     mission critical applications that require provable dependability.
  62:Source/portable/GCC/ARM_CM4F/port.c **** 
  63:Source/portable/GCC/ARM_CM4F/port.c ****     1 tab == 4 spaces!
  64:Source/portable/GCC/ARM_CM4F/port.c **** */
  65:Source/portable/GCC/ARM_CM4F/port.c **** 
  66:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------
  67:Source/portable/GCC/ARM_CM4F/port.c ****  * Implementation of functions defined in portable.h for the ARM CM4F port.
  68:Source/portable/GCC/ARM_CM4F/port.c ****  *----------------------------------------------------------*/
  69:Source/portable/GCC/ARM_CM4F/port.c **** 
  70:Source/portable/GCC/ARM_CM4F/port.c **** /* Scheduler includes. */
  71:Source/portable/GCC/ARM_CM4F/port.c **** #include "FreeRTOS.h"
  72:Source/portable/GCC/ARM_CM4F/port.c **** #include "task.h"
  73:Source/portable/GCC/ARM_CM4F/port.c **** 
  74:Source/portable/GCC/ARM_CM4F/port.c **** #ifndef __VFP_FP__
  75:Source/portable/GCC/ARM_CM4F/port.c **** 	#error This port can only be used when the project options are configured to enable hardware float
  76:Source/portable/GCC/ARM_CM4F/port.c **** #endif
  77:Source/portable/GCC/ARM_CM4F/port.c **** 
  78:Source/portable/GCC/ARM_CM4F/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  79:Source/portable/GCC/ARM_CM4F/port.c **** 	#define configSYSTICK_CLOCK_HZ configCPU_CLOCK_HZ
  80:Source/portable/GCC/ARM_CM4F/port.c **** #endif
  81:Source/portable/GCC/ARM_CM4F/port.c **** 
  82:Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the core.  Registers first... */
  83:Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CTRL_REG			( * ( ( volatile unsigned long * ) 0xe000e010 ) )
  84:Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_LOAD_REG			( * ( ( volatile unsigned long * ) 0xe000e014 ) )
  85:Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG	( * ( ( volatile unsigned long * ) 0xe000e018 ) )
  86:Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSPRI2_REG				( * ( ( volatile unsigned long * ) 0xe000ed20 ) )
  87:Source/portable/GCC/ARM_CM4F/port.c **** /* ...then bits in the registers. */
  88:Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CLK_BIT			( 1UL << 2UL )
  89:Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_INT_BIT			( 1UL << 1UL )
  90:Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT			( 1UL << 0UL )
  91:Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT		( 1UL << 16UL )
  92:Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSVCLEAR_BIT 			( 1UL << 27UL )
  93:Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT		( 1UL << 25UL )
  94:Source/portable/GCC/ARM_CM4F/port.c **** 
  95:Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSV_PRI					( ( ( unsigned long ) configKERNEL_INTERRUPT_PRIORITY ) << 16UL )
  96:Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_PRI				( ( ( unsigned long ) configKERNEL_INTERRUPT_PRIORITY ) << 24UL )
  97:Source/portable/GCC/ARM_CM4F/port.c **** 
  98:Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to check the validity of an interrupt priority. */
  99:Source/portable/GCC/ARM_CM4F/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER		( 16 )
 100:Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16 	( 0xE000E3F0 )
 101:Source/portable/GCC/ARM_CM4F/port.c **** #define portAIRCR_REG						( * ( ( volatile unsigned long * ) 0xE000ED0C ) )
 102:Source/portable/GCC/ARM_CM4F/port.c **** #define portMAX_8_BIT_VALUE					( ( unsigned char ) 0xff )
 103:Source/portable/GCC/ARM_CM4F/port.c **** #define portTOP_BIT_OF_BYTE					( ( unsigned char ) 0x80 )
 104:Source/portable/GCC/ARM_CM4F/port.c **** #define portMAX_PRIGROUP_BITS				( ( unsigned char ) 7 )
 105:Source/portable/GCC/ARM_CM4F/port.c **** #define portPRIORITY_GROUP_MASK				( 0x07UL << 8UL )
 106:Source/portable/GCC/ARM_CM4F/port.c **** #define portPRIGROUP_SHIFT					( 8UL )
 107:Source/portable/GCC/ARM_CM4F/port.c **** 
 108:Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the VFP. */
 109:Source/portable/GCC/ARM_CM4F/port.c **** #define portFPCCR					( ( volatile unsigned long * ) 0xe000ef34 ) /* Floating point context control
 110:Source/portable/GCC/ARM_CM4F/port.c **** #define portASPEN_AND_LSPEN_BITS	( 0x3UL << 30UL )
 111:Source/portable/GCC/ARM_CM4F/port.c **** 
 112:Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to set up the initial stack. */
 113:Source/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_XPSR			( 0x01000000 )
 114:Source/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_EXEC_RETURN		( 0xfffffffd )
 115:Source/portable/GCC/ARM_CM4F/port.c **** 
 116:Source/portable/GCC/ARM_CM4F/port.c **** /* The systick is a 24-bit counter. */
 117:Source/portable/GCC/ARM_CM4F/port.c **** #define portMAX_24_BIT_NUMBER				( 0xffffffUL )
 118:Source/portable/GCC/ARM_CM4F/port.c **** 
 119:Source/portable/GCC/ARM_CM4F/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
 120:Source/portable/GCC/ARM_CM4F/port.c **** occurred while the SysTick counter is stopped during tickless idle
 121:Source/portable/GCC/ARM_CM4F/port.c **** calculations. */
 122:Source/portable/GCC/ARM_CM4F/port.c **** #define portMISSED_COUNTS_FACTOR			( 45UL )
 123:Source/portable/GCC/ARM_CM4F/port.c **** 
 124:Source/portable/GCC/ARM_CM4F/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
 125:Source/portable/GCC/ARM_CM4F/port.c **** prvTaskExitError() in case is messes up unwinding of the stack in the
 126:Source/portable/GCC/ARM_CM4F/port.c **** debugger. */
 127:Source/portable/GCC/ARM_CM4F/port.c **** #ifdef configTASK_RETURN_ADDRESS
 128:Source/portable/GCC/ARM_CM4F/port.c **** 	#define portTASK_RETURN_ADDRESS	configTASK_RETURN_ADDRESS
 129:Source/portable/GCC/ARM_CM4F/port.c **** #else
 130:Source/portable/GCC/ARM_CM4F/port.c **** 	#define portTASK_RETURN_ADDRESS	prvTaskExitError
 131:Source/portable/GCC/ARM_CM4F/port.c **** #endif
 132:Source/portable/GCC/ARM_CM4F/port.c **** 
 133:Source/portable/GCC/ARM_CM4F/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 134:Source/portable/GCC/ARM_CM4F/port.c **** variable. */
 135:Source/portable/GCC/ARM_CM4F/port.c **** static unsigned portBASE_TYPE uxCriticalNesting = 0xaaaaaaaa;
 136:Source/portable/GCC/ARM_CM4F/port.c **** 
 137:Source/portable/GCC/ARM_CM4F/port.c **** /*
 138:Source/portable/GCC/ARM_CM4F/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 139:Source/portable/GCC/ARM_CM4F/port.c ****  * file is weak to allow application writers to change the timer used to
 140:Source/portable/GCC/ARM_CM4F/port.c ****  * generate the tick interrupt.
 141:Source/portable/GCC/ARM_CM4F/port.c ****  */
 142:Source/portable/GCC/ARM_CM4F/port.c **** void vPortSetupTimerInterrupt( void );
 143:Source/portable/GCC/ARM_CM4F/port.c **** 
 144:Source/portable/GCC/ARM_CM4F/port.c **** /*
 145:Source/portable/GCC/ARM_CM4F/port.c ****  * Exception handlers.
 146:Source/portable/GCC/ARM_CM4F/port.c ****  */
 147:Source/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 148:Source/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void );
 149:Source/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 150:Source/portable/GCC/ARM_CM4F/port.c **** 
 151:Source/portable/GCC/ARM_CM4F/port.c **** /*
 152:Source/portable/GCC/ARM_CM4F/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 153:Source/portable/GCC/ARM_CM4F/port.c ****  */
 154:Source/portable/GCC/ARM_CM4F/port.c **** static void prvPortStartFirstTask( void ) __attribute__ (( naked ));
 155:Source/portable/GCC/ARM_CM4F/port.c **** 
 156:Source/portable/GCC/ARM_CM4F/port.c **** /*
 157:Source/portable/GCC/ARM_CM4F/port.c ****  * Function to enable the VFP.
 158:Source/portable/GCC/ARM_CM4F/port.c ****  */
 159:Source/portable/GCC/ARM_CM4F/port.c ****  static void vPortEnableVFP( void ) __attribute__ (( naked ));
 160:Source/portable/GCC/ARM_CM4F/port.c **** 
 161:Source/portable/GCC/ARM_CM4F/port.c **** /*
 162:Source/portable/GCC/ARM_CM4F/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 163:Source/portable/GCC/ARM_CM4F/port.c ****  */
 164:Source/portable/GCC/ARM_CM4F/port.c **** static void prvTaskExitError( void );
 165:Source/portable/GCC/ARM_CM4F/port.c **** 
 166:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 167:Source/portable/GCC/ARM_CM4F/port.c **** 
 168:Source/portable/GCC/ARM_CM4F/port.c **** /*
 169:Source/portable/GCC/ARM_CM4F/port.c ****  * The number of SysTick increments that make up one tick period.
 170:Source/portable/GCC/ARM_CM4F/port.c ****  */
 171:Source/portable/GCC/ARM_CM4F/port.c **** #if configUSE_TICKLESS_IDLE == 1
 172:Source/portable/GCC/ARM_CM4F/port.c **** 	static unsigned long ulTimerCountsForOneTick = 0;
 173:Source/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 174:Source/portable/GCC/ARM_CM4F/port.c **** 
 175:Source/portable/GCC/ARM_CM4F/port.c **** /*
 176:Source/portable/GCC/ARM_CM4F/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 177:Source/portable/GCC/ARM_CM4F/port.c ****  * 24 bit resolution of the SysTick timer.
 178:Source/portable/GCC/ARM_CM4F/port.c ****  */
 179:Source/portable/GCC/ARM_CM4F/port.c **** #if configUSE_TICKLESS_IDLE == 1
 180:Source/portable/GCC/ARM_CM4F/port.c **** 	static unsigned long xMaximumPossibleSuppressedTicks = 0;
 181:Source/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 182:Source/portable/GCC/ARM_CM4F/port.c **** 
 183:Source/portable/GCC/ARM_CM4F/port.c **** /*
 184:Source/portable/GCC/ARM_CM4F/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 185:Source/portable/GCC/ARM_CM4F/port.c ****  * power functionality only.
 186:Source/portable/GCC/ARM_CM4F/port.c ****  */
 187:Source/portable/GCC/ARM_CM4F/port.c **** #if configUSE_TICKLESS_IDLE == 1
 188:Source/portable/GCC/ARM_CM4F/port.c **** 	static unsigned long ulStoppedTimerCompensation = 0;
 189:Source/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 190:Source/portable/GCC/ARM_CM4F/port.c **** 
 191:Source/portable/GCC/ARM_CM4F/port.c **** /*
 192:Source/portable/GCC/ARM_CM4F/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 193:Source/portable/GCC/ARM_CM4F/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 194:Source/portable/GCC/ARM_CM4F/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 195:Source/portable/GCC/ARM_CM4F/port.c ****  */
 196:Source/portable/GCC/ARM_CM4F/port.c **** #if ( configASSERT_DEFINED == 1 )
 197:Source/portable/GCC/ARM_CM4F/port.c **** 	 static unsigned char ucMaxSysCallPriority = 0;
 198:Source/portable/GCC/ARM_CM4F/port.c **** 	 static unsigned long ulMaxPRIGROUPValue = 0;
 199:Source/portable/GCC/ARM_CM4F/port.c **** 	 static const volatile unsigned char * const pcInterruptPriorityRegisters = ( const volatile unsig
 200:Source/portable/GCC/ARM_CM4F/port.c **** #endif /* configASSERT_DEFINED */
 201:Source/portable/GCC/ARM_CM4F/port.c **** 
 202:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 203:Source/portable/GCC/ARM_CM4F/port.c **** 
 204:Source/portable/GCC/ARM_CM4F/port.c **** /*
 205:Source/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 206:Source/portable/GCC/ARM_CM4F/port.c ****  */
 207:Source/portable/GCC/ARM_CM4F/port.c **** portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvPa
 208:Source/portable/GCC/ARM_CM4F/port.c **** {
  51              		.loc 1 208 0
  52              		.cfi_startproc
  53              		@ args = 0, pretend = 0, frame = 16
  54              		@ frame_needed = 1, uses_anonymous_args = 0
  55              		@ link register save eliminated.
  56 0000 80B4     		push	{r7}
  57              	.LCFI0:
  58              		.cfi_def_cfa_offset 4
  59              		.cfi_offset 7, -4
  60 0002 85B0     		sub	sp, sp, #20
  61              	.LCFI1:
  62              		.cfi_def_cfa_offset 24
  63 0004 00AF     		add	r7, sp, #0
  64              	.LCFI2:
  65              		.cfi_def_cfa_register 7
  66 0006 F860     		str	r0, [r7, #12]
  67 0008 B960     		str	r1, [r7, #8]
  68 000a 7A60     		str	r2, [r7, #4]
 209:Source/portable/GCC/ARM_CM4F/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 210:Source/portable/GCC/ARM_CM4F/port.c **** 	interrupt. */
 211:Source/portable/GCC/ARM_CM4F/port.c **** 
 212:Source/portable/GCC/ARM_CM4F/port.c **** 	/* Offset added to account for the way the MCU uses the stack on entry/exit
 213:Source/portable/GCC/ARM_CM4F/port.c **** 	of interrupts, and to ensure alignment. */
 214:Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
  69              		.loc 1 214 0
  70 000c FB68     		ldr	r3, [r7, #12]
  71 000e A3F10403 		sub	r3, r3, #4
  72 0012 FB60     		str	r3, [r7, #12]
 215:Source/portable/GCC/ARM_CM4F/port.c **** 
 216:Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  73              		.loc 1 216 0
  74 0014 FB68     		ldr	r3, [r7, #12]
  75 0016 4FF08072 		mov	r2, #16777216
  76 001a 1A60     		str	r2, [r3, #0]
 217:Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
  77              		.loc 1 217 0
  78 001c FB68     		ldr	r3, [r7, #12]
  79 001e A3F10403 		sub	r3, r3, #4
  80 0022 FB60     		str	r3, [r7, #12]
 218:Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
  81              		.loc 1 218 0
  82 0024 BA68     		ldr	r2, [r7, #8]
  83 0026 FB68     		ldr	r3, [r7, #12]
  84 0028 1A60     		str	r2, [r3, #0]
 219:Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
  85              		.loc 1 219 0
  86 002a FB68     		ldr	r3, [r7, #12]
  87 002c A3F10403 		sub	r3, r3, #4
  88 0030 FB60     		str	r3, [r7, #12]
 220:Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) portTASK_RETURN_ADDRESS;	/* LR */
  89              		.loc 1 220 0
  90 0032 40F20003 		movw	r3, #:lower16:prvTaskExitError
  91 0036 C0F20003 		movt	r3, #:upper16:prvTaskExitError
  92 003a FA68     		ldr	r2, [r7, #12]
  93 003c 1360     		str	r3, [r2, #0]
 221:Source/portable/GCC/ARM_CM4F/port.c **** 
 222:Source/portable/GCC/ARM_CM4F/port.c **** 	/* Save code space by skipping register initialisation. */
 223:Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
  94              		.loc 1 223 0
  95 003e FB68     		ldr	r3, [r7, #12]
  96 0040 A3F11403 		sub	r3, r3, #20
  97 0044 FB60     		str	r3, [r7, #12]
 224:Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
  98              		.loc 1 224 0
  99 0046 7A68     		ldr	r2, [r7, #4]
 100 0048 FB68     		ldr	r3, [r7, #12]
 101 004a 1A60     		str	r2, [r3, #0]
 225:Source/portable/GCC/ARM_CM4F/port.c **** 
 226:Source/portable/GCC/ARM_CM4F/port.c **** 	/* A save method is being used that requires each task to maintain its
 227:Source/portable/GCC/ARM_CM4F/port.c **** 	own exec return value. */
 228:Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
 102              		.loc 1 228 0
 103 004c FB68     		ldr	r3, [r7, #12]
 104 004e A3F10403 		sub	r3, r3, #4
 105 0052 FB60     		str	r3, [r7, #12]
 229:Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 106              		.loc 1 229 0
 107 0054 FB68     		ldr	r3, [r7, #12]
 108 0056 6FF00202 		mvn	r2, #2
 109 005a 1A60     		str	r2, [r3, #0]
 230:Source/portable/GCC/ARM_CM4F/port.c **** 
 231:Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 110              		.loc 1 231 0
 111 005c FB68     		ldr	r3, [r7, #12]
 112 005e A3F12003 		sub	r3, r3, #32
 113 0062 FB60     		str	r3, [r7, #12]
 232:Source/portable/GCC/ARM_CM4F/port.c **** 
 233:Source/portable/GCC/ARM_CM4F/port.c **** 	return pxTopOfStack;
 114              		.loc 1 233 0
 115 0064 FB68     		ldr	r3, [r7, #12]
 234:Source/portable/GCC/ARM_CM4F/port.c **** }
 116              		.loc 1 234 0
 117 0066 1846     		mov	r0, r3
 118 0068 07F11407 		add	r7, r7, #20
 119 006c BD46     		mov	sp, r7
 120 006e 80BC     		pop	{r7}
 121 0070 7047     		bx	lr
 122              		.cfi_endproc
 123              	.LFE110:
 125 0072 00BF     		.section	.text.prvTaskExitError,"ax",%progbits
 126              		.align	2
 127              		.thumb
 128              		.thumb_func
 130              	prvTaskExitError:
 131              	.LFB111:
 235:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 236:Source/portable/GCC/ARM_CM4F/port.c **** 
 237:Source/portable/GCC/ARM_CM4F/port.c **** static void prvTaskExitError( void )
 238:Source/portable/GCC/ARM_CM4F/port.c **** {
 132              		.loc 1 238 0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 0
 135              		@ frame_needed = 1, uses_anonymous_args = 0
 136 0000 80B5     		push	{r7, lr}
 137              	.LCFI3:
 138              		.cfi_def_cfa_offset 8
 139              		.cfi_offset 7, -8
 140              		.cfi_offset 14, -4
 141 0002 00AF     		add	r7, sp, #0
 142              	.LCFI4:
 143              		.cfi_def_cfa_register 7
 239:Source/portable/GCC/ARM_CM4F/port.c **** 	/* A function that implements a task must not exit or attempt to return to
 240:Source/portable/GCC/ARM_CM4F/port.c **** 	its caller as there is nothing to return to.  If a task wants to exit it
 241:Source/portable/GCC/ARM_CM4F/port.c **** 	should instead call vTaskDelete( NULL ).
 242:Source/portable/GCC/ARM_CM4F/port.c **** 
 243:Source/portable/GCC/ARM_CM4F/port.c **** 	Artificially force an assert() to be triggered if configASSERT() is
 244:Source/portable/GCC/ARM_CM4F/port.c **** 	defined, then stop here so application writers can catch the error. */
 245:Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( uxCriticalNesting == ~0UL );
 144              		.loc 1 245 0
 145 0004 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 146 0008 C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 147 000c 1B68     		ldr	r3, [r3, #0]
 148 000e B3F1FF3F 		cmp	r3, #-1
 149 0012 02D0     		beq	.L4
 150              		.loc 1 245 0 is_stmt 0 discriminator 1
 151 0014 FFF7FEFF 		bl	ulPortSetInterruptMask
 152              	.L5:
 153              		.loc 1 245 0 discriminator 2
 154 0018 FEE7     		b	.L5
 155              	.L4:
 246:Source/portable/GCC/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 156              		.loc 1 246 0 is_stmt 1
 157 001a FFF7FEFF 		bl	ulPortSetInterruptMask
 158              	.L6:
 247:Source/portable/GCC/ARM_CM4F/port.c **** 	for( ;; );
 159              		.loc 1 247 0 discriminator 1
 160 001e FEE7     		b	.L6
 161              		.cfi_endproc
 162              	.LFE111:
 164              		.section	.text.SVC_Handler,"ax",%progbits
 165              		.align	2
 166              		.global	SVC_Handler
 167              		.thumb
 168              		.thumb_func
 170              	SVC_Handler:
 171              	.LFB112:
 248:Source/portable/GCC/ARM_CM4F/port.c **** }
 249:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 250:Source/portable/GCC/ARM_CM4F/port.c **** 
 251:Source/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void )
 252:Source/portable/GCC/ARM_CM4F/port.c **** {
 172              		.loc 1 252 0
 173              		.cfi_startproc
 174              		@ Naked Function: prologue and epilogue provided by programmer.
 175              		@ args = 0, pretend = 0, frame = 0
 176              		@ frame_needed = 1, uses_anonymous_args = 0
 253:Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile (
 177              		.loc 1 253 0
 178              	@ 253 "Source/portable/GCC/ARM_CM4F/port.c" 1
 179 0000 054B     			ldr	r3, pxCurrentTCBConst2		
 180 0002 1968     		ldr r1, [r3]					
 181 0004 0868     		ldr r0, [r1]					
 182 0006 B0E8F04F 		ldmia r0!, {r4-r11, r14}		
 183 000a 80F30988 		msr psp, r0						
 184 000e 4FF00000 		mov r0, #0 						
 185 0012 80F31188 		msr	basepri, r0					
 186 0016 7047     		bx r14							
 187              										
 188              		.align 2						
 189 0018 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 190              	
 191              	@ 0 "" 2
 254:Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 255:Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 256:Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 257:Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldmia r0!, {r4-r11, r14}		\n" /* Pop the registers that are not automatically saved on excep
 258:Source/portable/GCC/ARM_CM4F/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 259:Source/portable/GCC/ARM_CM4F/port.c **** 					"	mov r0, #0 						\n"
 260:Source/portable/GCC/ARM_CM4F/port.c **** 					"	msr	basepri, r0					\n"
 261:Source/portable/GCC/ARM_CM4F/port.c **** 					"	bx r14							\n"
 262:Source/portable/GCC/ARM_CM4F/port.c **** 					"									\n"
 263:Source/portable/GCC/ARM_CM4F/port.c **** 					"	.align 2						\n"
 264:Source/portable/GCC/ARM_CM4F/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 265:Source/portable/GCC/ARM_CM4F/port.c **** 				);
 266:Source/portable/GCC/ARM_CM4F/port.c **** }
 192              		.loc 1 266 0
 193              		.thumb
 194              		.cfi_endproc
 195              	.LFE112:
 197              		.section	.text.prvPortStartFirstTask,"ax",%progbits
 198              		.align	2
 199              		.thumb
 200              		.thumb_func
 202              	prvPortStartFirstTask:
 203              	.LFB113:
 267:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 268:Source/portable/GCC/ARM_CM4F/port.c **** 
 269:Source/portable/GCC/ARM_CM4F/port.c **** static void prvPortStartFirstTask( void )
 270:Source/portable/GCC/ARM_CM4F/port.c **** {
 204              		.loc 1 270 0
 205              		.cfi_startproc
 206              		@ Naked Function: prologue and epilogue provided by programmer.
 207              		@ args = 0, pretend = 0, frame = 0
 208              		@ frame_needed = 1, uses_anonymous_args = 0
 271:Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile(
 209              		.loc 1 271 0
 210              	@ 271 "Source/portable/GCC/ARM_CM4F/port.c" 1
 211 0000 0348     		 ldr r0, =0xE000ED08 	
 212 0002 0068     	 ldr r0, [r0] 			
 213 0004 0068     	 ldr r0, [r0] 			
 214 0006 80F30888 	 msr msp, r0			
 215 000a 62B6     	 cpsie i				
 216 000c 00DF     	 svc 0					
 217 000e 00BF     	 nop					
 218              	
 219              	@ 0 "" 2
 272:Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 273:Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, [r0] 			\n"
 274:Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, [r0] 			\n"
 275:Source/portable/GCC/ARM_CM4F/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 276:Source/portable/GCC/ARM_CM4F/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 277:Source/portable/GCC/ARM_CM4F/port.c **** 					" svc 0					\n" /* System call to start first task. */
 278:Source/portable/GCC/ARM_CM4F/port.c **** 					" nop					\n"
 279:Source/portable/GCC/ARM_CM4F/port.c **** 				);
 280:Source/portable/GCC/ARM_CM4F/port.c **** }
 220              		.loc 1 280 0
 221              		.thumb
 222              		.cfi_endproc
 223              	.LFE113:
 225              		.section	.text.xPortStartScheduler,"ax",%progbits
 226              		.align	2
 227              		.global	xPortStartScheduler
 228              		.thumb
 229              		.thumb_func
 231              	xPortStartScheduler:
 232              	.LFB114:
 281:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 282:Source/portable/GCC/ARM_CM4F/port.c **** 
 283:Source/portable/GCC/ARM_CM4F/port.c **** /*
 284:Source/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 285:Source/portable/GCC/ARM_CM4F/port.c ****  */
 286:Source/portable/GCC/ARM_CM4F/port.c **** portBASE_TYPE xPortStartScheduler( void )
 287:Source/portable/GCC/ARM_CM4F/port.c **** {
 233              		.loc 1 287 0
 234              		.cfi_startproc
 235              		@ args = 0, pretend = 0, frame = 16
 236              		@ frame_needed = 1, uses_anonymous_args = 0
 237 0000 80B5     		push	{r7, lr}
 238              	.LCFI5:
 239              		.cfi_def_cfa_offset 8
 240              		.cfi_offset 7, -8
 241              		.cfi_offset 14, -4
 242 0002 84B0     		sub	sp, sp, #16
 243              	.LCFI6:
 244              		.cfi_def_cfa_offset 24
 245 0004 00AF     		add	r7, sp, #0
 246              	.LCFI7:
 247              		.cfi_def_cfa_register 7
 248              	.LBB2:
 288:Source/portable/GCC/ARM_CM4F/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 289:Source/portable/GCC/ARM_CM4F/port.c **** 	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 290:Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 291:Source/portable/GCC/ARM_CM4F/port.c **** 
 292:Source/portable/GCC/ARM_CM4F/port.c **** 	#if( configASSERT_DEFINED == 1 )
 293:Source/portable/GCC/ARM_CM4F/port.c **** 	{
 294:Source/portable/GCC/ARM_CM4F/port.c **** 		volatile unsigned long ulOriginalPriority;
 295:Source/portable/GCC/ARM_CM4F/port.c **** 		volatile char * const pcFirstUserPriorityRegister = ( volatile char * const ) ( portNVIC_IP_REGIS
 249              		.loc 1 295 0
 250 0006 4FF46443 		mov	r3, #58368
 251 000a CEF20003 		movt	r3, 57344
 252 000e FB60     		str	r3, [r7, #12]
 296:Source/portable/GCC/ARM_CM4F/port.c **** 		volatile unsigned char ucMaxPriorityValue;
 297:Source/portable/GCC/ARM_CM4F/port.c **** 
 298:Source/portable/GCC/ARM_CM4F/port.c **** 		/* Determine the maximum priority from which ISR safe FreeRTOS API
 299:Source/portable/GCC/ARM_CM4F/port.c **** 		functions can be called.  ISR safe functions are those that end in
 300:Source/portable/GCC/ARM_CM4F/port.c **** 		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 301:Source/portable/GCC/ARM_CM4F/port.c **** 		ensure interrupt entry is as fast and simple as possible.
 302:Source/portable/GCC/ARM_CM4F/port.c **** 
 303:Source/portable/GCC/ARM_CM4F/port.c **** 		Save the interrupt priority value that is about to be clobbered. */
 304:Source/portable/GCC/ARM_CM4F/port.c **** 		ulOriginalPriority = *pcFirstUserPriorityRegister;
 253              		.loc 1 304 0
 254 0010 FB68     		ldr	r3, [r7, #12]
 255 0012 1B78     		ldrb	r3, [r3, #0]
 256 0014 DBB2     		uxtb	r3, r3
 257 0016 BB60     		str	r3, [r7, #8]
 305:Source/portable/GCC/ARM_CM4F/port.c **** 
 306:Source/portable/GCC/ARM_CM4F/port.c **** 		/* Determine the number of priority bits available.  First write to all
 307:Source/portable/GCC/ARM_CM4F/port.c **** 		possible bits. */
 308:Source/portable/GCC/ARM_CM4F/port.c **** 		*pcFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 258              		.loc 1 308 0
 259 0018 FB68     		ldr	r3, [r7, #12]
 260 001a 4FF0FF02 		mov	r2, #255
 261 001e 1A70     		strb	r2, [r3, #0]
 309:Source/portable/GCC/ARM_CM4F/port.c **** 
 310:Source/portable/GCC/ARM_CM4F/port.c **** 		/* Read the value back to see how many bits stuck. */
 311:Source/portable/GCC/ARM_CM4F/port.c **** 		ucMaxPriorityValue = *pcFirstUserPriorityRegister;
 262              		.loc 1 311 0
 263 0020 FB68     		ldr	r3, [r7, #12]
 264 0022 1B78     		ldrb	r3, [r3, #0]
 265 0024 DBB2     		uxtb	r3, r3
 266 0026 FB71     		strb	r3, [r7, #7]
 312:Source/portable/GCC/ARM_CM4F/port.c **** 
 313:Source/portable/GCC/ARM_CM4F/port.c **** 		/* Use the same mask on the maximum system call priority. */
 314:Source/portable/GCC/ARM_CM4F/port.c **** 		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 267              		.loc 1 314 0
 268 0028 FB79     		ldrb	r3, [r7, #7]
 269 002a DBB2     		uxtb	r3, r3
 270 002c 03F05003 		and	r3, r3, #80
 271 0030 DAB2     		uxtb	r2, r3
 272 0032 40F20003 		movw	r3, #:lower16:ucMaxSysCallPriority
 273 0036 C0F20003 		movt	r3, #:upper16:ucMaxSysCallPriority
 274 003a 1A70     		strb	r2, [r3, #0]
 315:Source/portable/GCC/ARM_CM4F/port.c **** 
 316:Source/portable/GCC/ARM_CM4F/port.c **** 		/* Calculate the maximum acceptable priority group value for the number
 317:Source/portable/GCC/ARM_CM4F/port.c **** 		of bits read back. */
 318:Source/portable/GCC/ARM_CM4F/port.c **** 		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 275              		.loc 1 318 0
 276 003c 40F20003 		movw	r3, #:lower16:ulMaxPRIGROUPValue
 277 0040 C0F20003 		movt	r3, #:upper16:ulMaxPRIGROUPValue
 278 0044 4FF00702 		mov	r2, #7
 279 0048 1A60     		str	r2, [r3, #0]
 319:Source/portable/GCC/ARM_CM4F/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 280              		.loc 1 319 0
 281 004a 11E0     		b	.L10
 282              	.L11:
 320:Source/portable/GCC/ARM_CM4F/port.c **** 		{
 321:Source/portable/GCC/ARM_CM4F/port.c **** 			ulMaxPRIGROUPValue--;
 283              		.loc 1 321 0
 284 004c 40F20003 		movw	r3, #:lower16:ulMaxPRIGROUPValue
 285 0050 C0F20003 		movt	r3, #:upper16:ulMaxPRIGROUPValue
 286 0054 1B68     		ldr	r3, [r3, #0]
 287 0056 03F1FF32 		add	r2, r3, #-1
 288 005a 40F20003 		movw	r3, #:lower16:ulMaxPRIGROUPValue
 289 005e C0F20003 		movt	r3, #:upper16:ulMaxPRIGROUPValue
 290 0062 1A60     		str	r2, [r3, #0]
 322:Source/portable/GCC/ARM_CM4F/port.c **** 			ucMaxPriorityValue <<= ( unsigned char ) 0x01;
 291              		.loc 1 322 0
 292 0064 FB79     		ldrb	r3, [r7, #7]
 293 0066 DBB2     		uxtb	r3, r3
 294 0068 4FEA4303 		lsl	r3, r3, #1
 295 006c DBB2     		uxtb	r3, r3
 296 006e FB71     		strb	r3, [r7, #7]
 297              	.L10:
 319:Source/portable/GCC/ARM_CM4F/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 298              		.loc 1 319 0 discriminator 1
 299 0070 FB79     		ldrb	r3, [r7, #7]
 300 0072 DBB2     		uxtb	r3, r3
 301 0074 DBB2     		uxtb	r3, r3
 302 0076 5BB2     		sxtb	r3, r3
 303 0078 002B     		cmp	r3, #0
 304 007a E7DB     		blt	.L11
 323:Source/portable/GCC/ARM_CM4F/port.c **** 		}
 324:Source/portable/GCC/ARM_CM4F/port.c **** 
 325:Source/portable/GCC/ARM_CM4F/port.c **** 		/* Shift the priority group value back to its position within the AIRCR
 326:Source/portable/GCC/ARM_CM4F/port.c **** 		register. */
 327:Source/portable/GCC/ARM_CM4F/port.c **** 		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 305              		.loc 1 327 0
 306 007c 40F20003 		movw	r3, #:lower16:ulMaxPRIGROUPValue
 307 0080 C0F20003 		movt	r3, #:upper16:ulMaxPRIGROUPValue
 308 0084 1B68     		ldr	r3, [r3, #0]
 309 0086 4FEA0322 		lsl	r2, r3, #8
 310 008a 40F20003 		movw	r3, #:lower16:ulMaxPRIGROUPValue
 311 008e C0F20003 		movt	r3, #:upper16:ulMaxPRIGROUPValue
 312 0092 1A60     		str	r2, [r3, #0]
 328:Source/portable/GCC/ARM_CM4F/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 313              		.loc 1 328 0
 314 0094 40F20003 		movw	r3, #:lower16:ulMaxPRIGROUPValue
 315 0098 C0F20003 		movt	r3, #:upper16:ulMaxPRIGROUPValue
 316 009c 1B68     		ldr	r3, [r3, #0]
 317 009e 03F4E062 		and	r2, r3, #1792
 318 00a2 40F20003 		movw	r3, #:lower16:ulMaxPRIGROUPValue
 319 00a6 C0F20003 		movt	r3, #:upper16:ulMaxPRIGROUPValue
 320 00aa 1A60     		str	r2, [r3, #0]
 329:Source/portable/GCC/ARM_CM4F/port.c **** 
 330:Source/portable/GCC/ARM_CM4F/port.c **** 		/* Restore the clobbered interrupt priority register to its original
 331:Source/portable/GCC/ARM_CM4F/port.c **** 		value. */
 332:Source/portable/GCC/ARM_CM4F/port.c **** 		*pcFirstUserPriorityRegister = ulOriginalPriority;
 321              		.loc 1 332 0
 322 00ac BB68     		ldr	r3, [r7, #8]
 323 00ae DAB2     		uxtb	r2, r3
 324 00b0 FB68     		ldr	r3, [r7, #12]
 325 00b2 1A70     		strb	r2, [r3, #0]
 326              	.LBE2:
 333:Source/portable/GCC/ARM_CM4F/port.c **** 	}
 334:Source/portable/GCC/ARM_CM4F/port.c **** 	#endif /* conifgASSERT_DEFINED */
 335:Source/portable/GCC/ARM_CM4F/port.c **** 
 336:Source/portable/GCC/ARM_CM4F/port.c **** 	/* Make PendSV and SysTick the lowest priority interrupts. */
 337:Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 327              		.loc 1 337 0
 328 00b4 4EF62053 		movw	r3, #60704
 329 00b8 CEF20003 		movt	r3, 57344
 330 00bc 4EF62052 		movw	r2, #60704
 331 00c0 CEF20002 		movt	r2, 57344
 332 00c4 1268     		ldr	r2, [r2, #0]
 333 00c6 42F47002 		orr	r2, r2, #15728640
 334 00ca 1A60     		str	r2, [r3, #0]
 338:Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 335              		.loc 1 338 0
 336 00cc 4EF62053 		movw	r3, #60704
 337 00d0 CEF20003 		movt	r3, 57344
 338 00d4 4EF62052 		movw	r2, #60704
 339 00d8 CEF20002 		movt	r2, 57344
 340 00dc 1268     		ldr	r2, [r2, #0]
 341 00de 42F07042 		orr	r2, r2, #-268435456
 342 00e2 1A60     		str	r2, [r3, #0]
 339:Source/portable/GCC/ARM_CM4F/port.c **** 
 340:Source/portable/GCC/ARM_CM4F/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 341:Source/portable/GCC/ARM_CM4F/port.c **** 	here already. */
 342:Source/portable/GCC/ARM_CM4F/port.c **** 	vPortSetupTimerInterrupt();
 343              		.loc 1 342 0
 344 00e4 FFF7FEFF 		bl	vPortSetupTimerInterrupt
 343:Source/portable/GCC/ARM_CM4F/port.c **** 
 344:Source/portable/GCC/ARM_CM4F/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 345:Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting = 0;
 345              		.loc 1 345 0
 346 00e8 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 347 00ec C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 348 00f0 4FF00002 		mov	r2, #0
 349 00f4 1A60     		str	r2, [r3, #0]
 346:Source/portable/GCC/ARM_CM4F/port.c **** 
 347:Source/portable/GCC/ARM_CM4F/port.c **** 	/* Ensure the VFP is enabled - it should be anyway. */
 348:Source/portable/GCC/ARM_CM4F/port.c **** 	vPortEnableVFP();
 350              		.loc 1 348 0
 351 00f6 FFF7FEFF 		bl	vPortEnableVFP
 349:Source/portable/GCC/ARM_CM4F/port.c **** 
 350:Source/portable/GCC/ARM_CM4F/port.c **** 	/* Lazy save always. */
 351:Source/portable/GCC/ARM_CM4F/port.c **** 	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 352              		.loc 1 351 0
 353 00fa 4EF63473 		movw	r3, #61236
 354 00fe CEF20003 		movt	r3, 57344
 355 0102 4EF63472 		movw	r2, #61236
 356 0106 CEF20002 		movt	r2, 57344
 357 010a 1268     		ldr	r2, [r2, #0]
 358 010c 42F04042 		orr	r2, r2, #-1073741824
 359 0110 1A60     		str	r2, [r3, #0]
 352:Source/portable/GCC/ARM_CM4F/port.c **** 
 353:Source/portable/GCC/ARM_CM4F/port.c **** 	/* Start the first task. */
 354:Source/portable/GCC/ARM_CM4F/port.c **** 	prvPortStartFirstTask();
 360              		.loc 1 354 0
 361 0112 FFF7FEFF 		bl	prvPortStartFirstTask
 355:Source/portable/GCC/ARM_CM4F/port.c **** 
 356:Source/portable/GCC/ARM_CM4F/port.c **** 	/* Should not get here! */
 357:Source/portable/GCC/ARM_CM4F/port.c **** 	return 0;
 362              		.loc 1 357 0
 363 0116 4FF00003 		mov	r3, #0
 358:Source/portable/GCC/ARM_CM4F/port.c **** }
 364              		.loc 1 358 0
 365 011a 1846     		mov	r0, r3
 366 011c 07F11007 		add	r7, r7, #16
 367 0120 BD46     		mov	sp, r7
 368 0122 80BD     		pop	{r7, pc}
 369              		.cfi_endproc
 370              	.LFE114:
 372              		.section	.text.vPortEndScheduler,"ax",%progbits
 373              		.align	2
 374              		.global	vPortEndScheduler
 375              		.thumb
 376              		.thumb_func
 378              	vPortEndScheduler:
 379              	.LFB115:
 359:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 360:Source/portable/GCC/ARM_CM4F/port.c **** 
 361:Source/portable/GCC/ARM_CM4F/port.c **** void vPortEndScheduler( void )
 362:Source/portable/GCC/ARM_CM4F/port.c **** {
 380              		.loc 1 362 0
 381              		.cfi_startproc
 382              		@ args = 0, pretend = 0, frame = 0
 383              		@ frame_needed = 1, uses_anonymous_args = 0
 384              		@ link register save eliminated.
 385 0000 80B4     		push	{r7}
 386              	.LCFI8:
 387              		.cfi_def_cfa_offset 4
 388              		.cfi_offset 7, -4
 389 0002 00AF     		add	r7, sp, #0
 390              	.LCFI9:
 391              		.cfi_def_cfa_register 7
 363:Source/portable/GCC/ARM_CM4F/port.c **** 	/* It is unlikely that the CM4F port will require this function as there
 364:Source/portable/GCC/ARM_CM4F/port.c **** 	is nothing to return to.  */
 365:Source/portable/GCC/ARM_CM4F/port.c **** }
 392              		.loc 1 365 0
 393 0004 BD46     		mov	sp, r7
 394 0006 80BC     		pop	{r7}
 395 0008 7047     		bx	lr
 396              		.cfi_endproc
 397              	.LFE115:
 399 000a 00BF     		.section	.text.vPortYield,"ax",%progbits
 400              		.align	2
 401              		.global	vPortYield
 402              		.thumb
 403              		.thumb_func
 405              	vPortYield:
 406              	.LFB116:
 366:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 367:Source/portable/GCC/ARM_CM4F/port.c **** 
 368:Source/portable/GCC/ARM_CM4F/port.c **** void vPortYield( void )
 369:Source/portable/GCC/ARM_CM4F/port.c **** {
 407              		.loc 1 369 0
 408              		.cfi_startproc
 409              		@ args = 0, pretend = 0, frame = 0
 410              		@ frame_needed = 1, uses_anonymous_args = 0
 411              		@ link register save eliminated.
 412 0000 80B4     		push	{r7}
 413              	.LCFI10:
 414              		.cfi_def_cfa_offset 4
 415              		.cfi_offset 7, -4
 416 0002 00AF     		add	r7, sp, #0
 417              	.LCFI11:
 418              		.cfi_def_cfa_register 7
 370:Source/portable/GCC/ARM_CM4F/port.c **** 	/* Set a PendSV to request a context switch. */
 371:Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 419              		.loc 1 371 0
 420 0004 4EF60453 		movw	r3, #60676
 421 0008 CEF20003 		movt	r3, 57344
 422 000c 4FF08052 		mov	r2, #268435456
 423 0010 1A60     		str	r2, [r3, #0]
 372:Source/portable/GCC/ARM_CM4F/port.c **** 
 373:Source/portable/GCC/ARM_CM4F/port.c **** 	/* Barriers are normally not required but do ensure the code is completely
 374:Source/portable/GCC/ARM_CM4F/port.c **** 	within the specified behaviour for the architecture. */
 375:Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile( "dsb" );
 424              		.loc 1 375 0
 425              	@ 375 "Source/portable/GCC/ARM_CM4F/port.c" 1
 426 0012 BFF34F8F 		dsb
 427              	@ 0 "" 2
 376:Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile( "isb" );
 428              		.loc 1 376 0
 429              	@ 376 "Source/portable/GCC/ARM_CM4F/port.c" 1
 430 0016 BFF36F8F 		isb
 431              	@ 0 "" 2
 377:Source/portable/GCC/ARM_CM4F/port.c **** }
 432              		.loc 1 377 0
 433              		.thumb
 434 001a BD46     		mov	sp, r7
 435 001c 80BC     		pop	{r7}
 436 001e 7047     		bx	lr
 437              		.cfi_endproc
 438              	.LFE116:
 440              		.section	.text.vPortEnterCritical,"ax",%progbits
 441              		.align	2
 442              		.global	vPortEnterCritical
 443              		.thumb
 444              		.thumb_func
 446              	vPortEnterCritical:
 447              	.LFB117:
 378:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 379:Source/portable/GCC/ARM_CM4F/port.c **** 
 380:Source/portable/GCC/ARM_CM4F/port.c **** void vPortEnterCritical( void )
 381:Source/portable/GCC/ARM_CM4F/port.c **** {
 448              		.loc 1 381 0
 449              		.cfi_startproc
 450              		@ args = 0, pretend = 0, frame = 0
 451              		@ frame_needed = 1, uses_anonymous_args = 0
 452 0000 80B5     		push	{r7, lr}
 453              	.LCFI12:
 454              		.cfi_def_cfa_offset 8
 455              		.cfi_offset 7, -8
 456              		.cfi_offset 14, -4
 457 0002 00AF     		add	r7, sp, #0
 458              	.LCFI13:
 459              		.cfi_def_cfa_register 7
 382:Source/portable/GCC/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 460              		.loc 1 382 0
 461 0004 FFF7FEFF 		bl	ulPortSetInterruptMask
 383:Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting++;
 462              		.loc 1 383 0
 463 0008 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 464 000c C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 465 0010 1B68     		ldr	r3, [r3, #0]
 466 0012 03F10102 		add	r2, r3, #1
 467 0016 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 468 001a C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 469 001e 1A60     		str	r2, [r3, #0]
 384:Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile( "dsb" );
 470              		.loc 1 384 0
 471              	@ 384 "Source/portable/GCC/ARM_CM4F/port.c" 1
 472 0020 BFF34F8F 		dsb
 473              	@ 0 "" 2
 385:Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile( "isb" );
 474              		.loc 1 385 0
 475              	@ 385 "Source/portable/GCC/ARM_CM4F/port.c" 1
 476 0024 BFF36F8F 		isb
 477              	@ 0 "" 2
 386:Source/portable/GCC/ARM_CM4F/port.c **** }
 478              		.loc 1 386 0
 479              		.thumb
 480 0028 80BD     		pop	{r7, pc}
 481              		.cfi_endproc
 482              	.LFE117:
 484 002a 00BF     		.section	.text.vPortExitCritical,"ax",%progbits
 485              		.align	2
 486              		.global	vPortExitCritical
 487              		.thumb
 488              		.thumb_func
 490              	vPortExitCritical:
 491              	.LFB118:
 387:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 388:Source/portable/GCC/ARM_CM4F/port.c **** 
 389:Source/portable/GCC/ARM_CM4F/port.c **** void vPortExitCritical( void )
 390:Source/portable/GCC/ARM_CM4F/port.c **** {
 492              		.loc 1 390 0
 493              		.cfi_startproc
 494              		@ args = 0, pretend = 0, frame = 0
 495              		@ frame_needed = 1, uses_anonymous_args = 0
 496 0000 80B5     		push	{r7, lr}
 497              	.LCFI14:
 498              		.cfi_def_cfa_offset 8
 499              		.cfi_offset 7, -8
 500              		.cfi_offset 14, -4
 501 0002 00AF     		add	r7, sp, #0
 502              	.LCFI15:
 503              		.cfi_def_cfa_register 7
 391:Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting--;
 504              		.loc 1 391 0
 505 0004 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 506 0008 C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 507 000c 1B68     		ldr	r3, [r3, #0]
 508 000e 03F1FF32 		add	r2, r3, #-1
 509 0012 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 510 0016 C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 511 001a 1A60     		str	r2, [r3, #0]
 392:Source/portable/GCC/ARM_CM4F/port.c **** 	if( uxCriticalNesting == 0 )
 512              		.loc 1 392 0
 513 001c 40F20003 		movw	r3, #:lower16:uxCriticalNesting
 514 0020 C0F20003 		movt	r3, #:upper16:uxCriticalNesting
 515 0024 1B68     		ldr	r3, [r3, #0]
 516 0026 002B     		cmp	r3, #0
 517 0028 03D1     		bne	.L16
 393:Source/portable/GCC/ARM_CM4F/port.c **** 	{
 394:Source/portable/GCC/ARM_CM4F/port.c **** 		portENABLE_INTERRUPTS();
 518              		.loc 1 394 0
 519 002a 4FF00000 		mov	r0, #0
 520 002e FFF7FEFF 		bl	vPortClearInterruptMask
 521              	.L16:
 395:Source/portable/GCC/ARM_CM4F/port.c **** 	}
 396:Source/portable/GCC/ARM_CM4F/port.c **** }
 522              		.loc 1 396 0
 523 0032 80BD     		pop	{r7, pc}
 524              		.cfi_endproc
 525              	.LFE118:
 527              		.section	.text.ulPortSetInterruptMask,"ax",%progbits
 528              		.align	2
 529              		.global	ulPortSetInterruptMask
 530              		.thumb
 531              		.thumb_func
 533              	ulPortSetInterruptMask:
 534              	.LFB119:
 397:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 398:Source/portable/GCC/ARM_CM4F/port.c **** 
 399:Source/portable/GCC/ARM_CM4F/port.c **** __attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
 400:Source/portable/GCC/ARM_CM4F/port.c **** {
 535              		.loc 1 400 0
 536              		.cfi_startproc
 537              		@ Naked Function: prologue and epilogue provided by programmer.
 538              		@ args = 0, pretend = 0, frame = 0
 539              		@ frame_needed = 1, uses_anonymous_args = 0
 401:Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile														\
 540              		.loc 1 401 0
 541              	@ 401 "Source/portable/GCC/ARM_CM4F/port.c" 1
 542 0000 EFF31180 			mrs r0, basepri											
 543 0004 4FF05001 		mov r1, #80												
 544 0008 81F31188 		msr basepri, r1											
 545 000c 7047     		bx lr													
 546              	
 547              	@ 0 "" 2
 402:Source/portable/GCC/ARM_CM4F/port.c **** 	(																	\
 403:Source/portable/GCC/ARM_CM4F/port.c **** 		"	mrs r0, basepri											\n" \
 404:Source/portable/GCC/ARM_CM4F/port.c **** 		"	mov r1, %0												\n"	\
 405:Source/portable/GCC/ARM_CM4F/port.c **** 		"	msr basepri, r1											\n" \
 406:Source/portable/GCC/ARM_CM4F/port.c **** 		"	bx lr													\n" \
 407:Source/portable/GCC/ARM_CM4F/port.c **** 		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
 408:Source/portable/GCC/ARM_CM4F/port.c **** 	);
 409:Source/portable/GCC/ARM_CM4F/port.c **** 
 410:Source/portable/GCC/ARM_CM4F/port.c **** 	/* This return will not be reached but is necessary to prevent compiler
 411:Source/portable/GCC/ARM_CM4F/port.c **** 	warnings. */
 412:Source/portable/GCC/ARM_CM4F/port.c **** 	return 0;
 548              		.loc 1 412 0
 549              		.thumb
 550 000e 4FF00003 		mov	r3, #0
 413:Source/portable/GCC/ARM_CM4F/port.c **** }
 551              		.loc 1 413 0
 552 0012 1846     		mov	r0, r3
 553              		.cfi_endproc
 554              	.LFE119:
 556              		.section	.text.vPortClearInterruptMask,"ax",%progbits
 557              		.align	2
 558              		.global	vPortClearInterruptMask
 559              		.thumb
 560              		.thumb_func
 562              	vPortClearInterruptMask:
 563              	.LFB120:
 414:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 415:Source/portable/GCC/ARM_CM4F/port.c **** 
 416:Source/portable/GCC/ARM_CM4F/port.c **** __attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
 417:Source/portable/GCC/ARM_CM4F/port.c **** {
 564              		.loc 1 417 0
 565              		.cfi_startproc
 566              		@ Naked Function: prologue and epilogue provided by programmer.
 567              		@ args = 0, pretend = 0, frame = 0
 568              		@ frame_needed = 1, uses_anonymous_args = 0
 418:Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile													\
 569              		.loc 1 418 0
 570              	@ 418 "Source/portable/GCC/ARM_CM4F/port.c" 1
 571 0000 80F31188 			msr basepri, r0										
 572 0004 7047     		bx lr												
 573              	
 574              	@ 0 "" 2
 419:Source/portable/GCC/ARM_CM4F/port.c **** 	(																\
 420:Source/portable/GCC/ARM_CM4F/port.c **** 		"	msr basepri, r0										\n"	\
 421:Source/portable/GCC/ARM_CM4F/port.c **** 		"	bx lr												\n" \
 422:Source/portable/GCC/ARM_CM4F/port.c **** 		:::"r0"														\
 423:Source/portable/GCC/ARM_CM4F/port.c **** 	);
 424:Source/portable/GCC/ARM_CM4F/port.c **** 
 425:Source/portable/GCC/ARM_CM4F/port.c **** 	/* Just to avoid compiler warnings. */
 426:Source/portable/GCC/ARM_CM4F/port.c **** 	( void ) ulNewMaskValue;
 427:Source/portable/GCC/ARM_CM4F/port.c **** }
 575              		.loc 1 427 0
 576              		.thumb
 577              		.cfi_endproc
 578              	.LFE120:
 580 0006 00BF     		.section	.text.PendSV_Handler,"ax",%progbits
 581              		.align	2
 582              		.global	PendSV_Handler
 583              		.thumb
 584              		.thumb_func
 586              	PendSV_Handler:
 587              	.LFB121:
 428:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 429:Source/portable/GCC/ARM_CM4F/port.c **** 
 430:Source/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void )
 431:Source/portable/GCC/ARM_CM4F/port.c **** {
 588              		.loc 1 431 0
 589              		.cfi_startproc
 590              		@ Naked Function: prologue and epilogue provided by programmer.
 591              		@ args = 0, pretend = 0, frame = 0
 592              		@ frame_needed = 1, uses_anonymous_args = 0
 432:Source/portable/GCC/ARM_CM4F/port.c **** 	/* This is a naked function. */
 433:Source/portable/GCC/ARM_CM4F/port.c **** 
 434:Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile
 593              		.loc 1 434 0
 594              	@ 434 "Source/portable/GCC/ARM_CM4F/port.c" 1
 595 0000 EFF30980 			mrs r0, psp							
 596              											
 597 0004 114B     		ldr	r3, pxCurrentTCBConst			
 598 0006 1A68     		ldr	r2, [r3]						
 599              											
 600 0008 1EF0100F 		tst r14, #0x10						
 601 000c 08BF     		it eq								
 602 000e 20ED108A 		vstmdbeq r0!, {s16-s31}				
 603              											
 604 0012 20E9F04F 		stmdb r0!, {r4-r11, r14}			
 605              											
 606 0016 1060     		str r0, [r2]						
 607              											
 608 0018 2DE90840 		stmdb sp!, {r3, r14}				
 609 001c 4FF05000 		mov r0, #80 							
 610 0020 80F31188 		msr basepri, r0						
 611 0024 FFF7FEFF 		bl vTaskSwitchContext				
 612 0028 4FF00000 		mov r0, #0							
 613 002c 80F31188 		msr basepri, r0						
 614 0030 BDE80840 		ldmia sp!, {r3, r14}				
 615              											
 616 0034 1968     		ldr r1, [r3]						
 617 0036 0868     		ldr r0, [r1]						
 618              											
 619 0038 B0E8F04F 		ldmia r0!, {r4-r11, r14}			
 620              											
 621 003c 1EF0100F 		tst r14, #0x10						
 622 0040 08BF     		it eq								
 623 0042 B0EC108A 		vldmiaeq r0!, {s16-s31}				
 624              											
 625 0046 80F30988 		msr psp, r0							
 626              											
 627              											
 628 004a 7047     		bx r14								
 629              											
 630              		.align 2							
 631 004c 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 632              	
 633              	@ 0 "" 2
 435:Source/portable/GCC/ARM_CM4F/port.c **** 	(
 436:Source/portable/GCC/ARM_CM4F/port.c **** 	"	mrs r0, psp							\n"
 437:Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 438:Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 439:Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr	r2, [r3]						\n"
 440:Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 441:Source/portable/GCC/ARM_CM4F/port.c **** 	"	tst r14, #0x10						\n" /* Is the task using the FPU context?  If so, push high vfp registers. *
 442:Source/portable/GCC/ARM_CM4F/port.c **** 	"	it eq								\n"
 443:Source/portable/GCC/ARM_CM4F/port.c **** 	"	vstmdbeq r0!, {s16-s31}				\n"
 444:Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 445:Source/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb r0!, {r4-r11, r14}			\n" /* Save the core registers. */
 446:Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 447:Source/portable/GCC/ARM_CM4F/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 448:Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 449:Source/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb sp!, {r3, r14}				\n"
 450:Source/portable/GCC/ARM_CM4F/port.c **** 	"	mov r0, %0 							\n"
 451:Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr basepri, r0						\n"
 452:Source/portable/GCC/ARM_CM4F/port.c **** 	"	bl vTaskSwitchContext				\n"
 453:Source/portable/GCC/ARM_CM4F/port.c **** 	"	mov r0, #0							\n"
 454:Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr basepri, r0						\n"
 455:Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia sp!, {r3, r14}				\n"
 456:Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 457:Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr r1, [r3]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 458:Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr r0, [r1]						\n"
 459:Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 460:Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia r0!, {r4-r11, r14}			\n" /* Pop the core registers. */
 461:Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 462:Source/portable/GCC/ARM_CM4F/port.c **** 	"	tst r14, #0x10						\n" /* Is the task using the FPU context?  If so, pop the high vfp registers
 463:Source/portable/GCC/ARM_CM4F/port.c **** 	"	it eq								\n"
 464:Source/portable/GCC/ARM_CM4F/port.c **** 	"	vldmiaeq r0!, {s16-s31}				\n"
 465:Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 466:Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr psp, r0							\n"
 467:Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 468:Source/portable/GCC/ARM_CM4F/port.c **** 	#ifdef WORKAROUND_PMU_CM001 /* XMC4000 specific errata workaround. */
 469:Source/portable/GCC/ARM_CM4F/port.c **** 		#if WORKAROUND_PMU_CM001 == 1
 470:Source/portable/GCC/ARM_CM4F/port.c **** 	"			push { r14 }				\n"
 471:Source/portable/GCC/ARM_CM4F/port.c **** 	"			pop { pc }					\n"
 472:Source/portable/GCC/ARM_CM4F/port.c **** 		#endif
 473:Source/portable/GCC/ARM_CM4F/port.c **** 	#endif
 474:Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 475:Source/portable/GCC/ARM_CM4F/port.c **** 	"	bx r14								\n"
 476:Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 477:Source/portable/GCC/ARM_CM4F/port.c **** 	"	.align 2							\n"
 478:Source/portable/GCC/ARM_CM4F/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 479:Source/portable/GCC/ARM_CM4F/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 480:Source/portable/GCC/ARM_CM4F/port.c **** 	);
 481:Source/portable/GCC/ARM_CM4F/port.c **** }
 634              		.loc 1 481 0
 635              		.thumb
 636              		.cfi_endproc
 637              	.LFE121:
 639              		.section	.text.SysTick_Handler,"ax",%progbits
 640              		.align	2
 641              		.global	SysTick_Handler
 642              		.thumb
 643              		.thumb_func
 645              	SysTick_Handler:
 646              	.LFB122:
 482:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 483:Source/portable/GCC/ARM_CM4F/port.c **** 
 484:Source/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void )
 485:Source/portable/GCC/ARM_CM4F/port.c **** {
 647              		.loc 1 485 0
 648              		.cfi_startproc
 649              		@ args = 0, pretend = 0, frame = 0
 650              		@ frame_needed = 1, uses_anonymous_args = 0
 651 0000 80B5     		push	{r7, lr}
 652              	.LCFI16:
 653              		.cfi_def_cfa_offset 8
 654              		.cfi_offset 7, -8
 655              		.cfi_offset 14, -4
 656 0002 00AF     		add	r7, sp, #0
 657              	.LCFI17:
 658              		.cfi_def_cfa_register 7
 486:Source/portable/GCC/ARM_CM4F/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 487:Source/portable/GCC/ARM_CM4F/port.c **** 	executes all interrupts must be unmasked.  There is therefore no need to
 488:Source/portable/GCC/ARM_CM4F/port.c **** 	save and then restore the interrupt mask value as its value is already
 489:Source/portable/GCC/ARM_CM4F/port.c **** 	known. */
 490:Source/portable/GCC/ARM_CM4F/port.c **** 	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 659              		.loc 1 490 0
 660 0004 FFF7FEFF 		bl	ulPortSetInterruptMask
 491:Source/portable/GCC/ARM_CM4F/port.c **** 	{
 492:Source/portable/GCC/ARM_CM4F/port.c **** 		/* Increment the RTOS tick. */
 493:Source/portable/GCC/ARM_CM4F/port.c **** 		if( xTaskIncrementTick() != pdFALSE )
 661              		.loc 1 493 0
 662 0008 FFF7FEFF 		bl	xTaskIncrementTick
 663 000c 0346     		mov	r3, r0
 664 000e 002B     		cmp	r3, #0
 665 0010 06D0     		beq	.L23
 494:Source/portable/GCC/ARM_CM4F/port.c **** 		{
 495:Source/portable/GCC/ARM_CM4F/port.c **** 			/* A context switch is required.  Context switching is performed in
 496:Source/portable/GCC/ARM_CM4F/port.c **** 			the PendSV interrupt.  Pend the PendSV interrupt. */
 497:Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 666              		.loc 1 497 0
 667 0012 4EF60453 		movw	r3, #60676
 668 0016 CEF20003 		movt	r3, 57344
 669 001a 4FF08052 		mov	r2, #268435456
 670 001e 1A60     		str	r2, [r3, #0]
 671              	.L23:
 498:Source/portable/GCC/ARM_CM4F/port.c **** 		}
 499:Source/portable/GCC/ARM_CM4F/port.c **** 	}
 500:Source/portable/GCC/ARM_CM4F/port.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 672              		.loc 1 500 0
 673 0020 4FF00000 		mov	r0, #0
 674 0024 FFF7FEFF 		bl	vPortClearInterruptMask
 501:Source/portable/GCC/ARM_CM4F/port.c **** }
 675              		.loc 1 501 0
 676 0028 80BD     		pop	{r7, pc}
 677              		.cfi_endproc
 678              	.LFE122:
 680 002a 00BF     		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 681              		.align	2
 682              		.weak	vPortSetupTimerInterrupt
 683              		.thumb
 684              		.thumb_func
 686              	vPortSetupTimerInterrupt:
 687              	.LFB123:
 502:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 503:Source/portable/GCC/ARM_CM4F/port.c **** 
 504:Source/portable/GCC/ARM_CM4F/port.c **** #if configUSE_TICKLESS_IDLE == 1
 505:Source/portable/GCC/ARM_CM4F/port.c **** 
 506:Source/portable/GCC/ARM_CM4F/port.c **** 	__attribute__((weak)) void vPortSuppressTicksAndSleep( portTickType xExpectedIdleTime )
 507:Source/portable/GCC/ARM_CM4F/port.c **** 	{
 508:Source/portable/GCC/ARM_CM4F/port.c **** 	unsigned long ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
 509:Source/portable/GCC/ARM_CM4F/port.c **** 	portTickType xModifiableIdleTime;
 510:Source/portable/GCC/ARM_CM4F/port.c **** 
 511:Source/portable/GCC/ARM_CM4F/port.c **** 		/* Make sure the SysTick reload value does not overflow the counter. */
 512:Source/portable/GCC/ARM_CM4F/port.c **** 		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 513:Source/portable/GCC/ARM_CM4F/port.c **** 		{
 514:Source/portable/GCC/ARM_CM4F/port.c **** 			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 515:Source/portable/GCC/ARM_CM4F/port.c **** 		}
 516:Source/portable/GCC/ARM_CM4F/port.c **** 
 517:Source/portable/GCC/ARM_CM4F/port.c **** 		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
 518:Source/portable/GCC/ARM_CM4F/port.c **** 		is accounted for as best it can be, but using the tickless mode will
 519:Source/portable/GCC/ARM_CM4F/port.c **** 		inevitably result in some tiny drift of the time maintained by the
 520:Source/portable/GCC/ARM_CM4F/port.c **** 		kernel with respect to calendar time. */
 521:Source/portable/GCC/ARM_CM4F/port.c **** 		portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT;
 522:Source/portable/GCC/ARM_CM4F/port.c **** 
 523:Source/portable/GCC/ARM_CM4F/port.c **** 		/* Calculate the reload value required to wait xExpectedIdleTime
 524:Source/portable/GCC/ARM_CM4F/port.c **** 		tick periods.  -1 is used because this code will execute part way
 525:Source/portable/GCC/ARM_CM4F/port.c **** 		through one of the tick periods. */
 526:Source/portable/GCC/ARM_CM4F/port.c **** 		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleT
 527:Source/portable/GCC/ARM_CM4F/port.c **** 		if( ulReloadValue > ulStoppedTimerCompensation )
 528:Source/portable/GCC/ARM_CM4F/port.c **** 		{
 529:Source/portable/GCC/ARM_CM4F/port.c **** 			ulReloadValue -= ulStoppedTimerCompensation;
 530:Source/portable/GCC/ARM_CM4F/port.c **** 		}
 531:Source/portable/GCC/ARM_CM4F/port.c **** 
 532:Source/portable/GCC/ARM_CM4F/port.c **** 		/* Enter a critical section but don't use the taskENTER_CRITICAL()
 533:Source/portable/GCC/ARM_CM4F/port.c **** 		method as that will mask interrupts that should exit sleep mode. */
 534:Source/portable/GCC/ARM_CM4F/port.c **** 		__asm volatile( "cpsid i" );
 535:Source/portable/GCC/ARM_CM4F/port.c **** 
 536:Source/portable/GCC/ARM_CM4F/port.c **** 		/* If a context switch is pending or a task is waiting for the scheduler
 537:Source/portable/GCC/ARM_CM4F/port.c **** 		to be unsuspended then abandon the low power entry. */
 538:Source/portable/GCC/ARM_CM4F/port.c **** 		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 539:Source/portable/GCC/ARM_CM4F/port.c **** 		{
 540:Source/portable/GCC/ARM_CM4F/port.c **** 			/* Restart from whatever is left in the count register to complete
 541:Source/portable/GCC/ARM_CM4F/port.c **** 			this tick period. */
 542:Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 543:Source/portable/GCC/ARM_CM4F/port.c **** 
 544:Source/portable/GCC/ARM_CM4F/port.c **** 			/* Restart SysTick. */
 545:Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 546:Source/portable/GCC/ARM_CM4F/port.c **** 
 547:Source/portable/GCC/ARM_CM4F/port.c **** 			/* Reset the reload register to the value required for normal tick
 548:Source/portable/GCC/ARM_CM4F/port.c **** 			periods. */
 549:Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 550:Source/portable/GCC/ARM_CM4F/port.c **** 
 551:Source/portable/GCC/ARM_CM4F/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 552:Source/portable/GCC/ARM_CM4F/port.c **** 			above. */
 553:Source/portable/GCC/ARM_CM4F/port.c **** 			__asm volatile( "cpsie i" );
 554:Source/portable/GCC/ARM_CM4F/port.c **** 		}
 555:Source/portable/GCC/ARM_CM4F/port.c **** 		else
 556:Source/portable/GCC/ARM_CM4F/port.c **** 		{
 557:Source/portable/GCC/ARM_CM4F/port.c **** 			/* Set the new reload value. */
 558:Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 559:Source/portable/GCC/ARM_CM4F/port.c **** 
 560:Source/portable/GCC/ARM_CM4F/port.c **** 			/* Clear the SysTick count flag and set the count value back to
 561:Source/portable/GCC/ARM_CM4F/port.c **** 			zero. */
 562:Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 563:Source/portable/GCC/ARM_CM4F/port.c **** 
 564:Source/portable/GCC/ARM_CM4F/port.c **** 			/* Restart SysTick. */
 565:Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 566:Source/portable/GCC/ARM_CM4F/port.c **** 
 567:Source/portable/GCC/ARM_CM4F/port.c **** 			/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 568:Source/portable/GCC/ARM_CM4F/port.c **** 			set its parameter to 0 to indicate that its implementation contains
 569:Source/portable/GCC/ARM_CM4F/port.c **** 			its own wait for interrupt or wait for event instruction, and so wfi
 570:Source/portable/GCC/ARM_CM4F/port.c **** 			should not be executed again.  However, the original expected idle
 571:Source/portable/GCC/ARM_CM4F/port.c **** 			time variable must remain unmodified, so a copy is taken. */
 572:Source/portable/GCC/ARM_CM4F/port.c **** 			xModifiableIdleTime = xExpectedIdleTime;
 573:Source/portable/GCC/ARM_CM4F/port.c **** 			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 574:Source/portable/GCC/ARM_CM4F/port.c **** 			if( xModifiableIdleTime > 0 )
 575:Source/portable/GCC/ARM_CM4F/port.c **** 			{
 576:Source/portable/GCC/ARM_CM4F/port.c **** 				__asm volatile( "dsb" );
 577:Source/portable/GCC/ARM_CM4F/port.c **** 				__asm volatile( "wfi" );
 578:Source/portable/GCC/ARM_CM4F/port.c **** 				__asm volatile( "isb" );
 579:Source/portable/GCC/ARM_CM4F/port.c **** 			}
 580:Source/portable/GCC/ARM_CM4F/port.c **** 			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 581:Source/portable/GCC/ARM_CM4F/port.c **** 
 582:Source/portable/GCC/ARM_CM4F/port.c **** 			/* Stop SysTick.  Again, the time the SysTick is stopped for is
 583:Source/portable/GCC/ARM_CM4F/port.c **** 			accounted for as best it can be, but using the tickless mode will
 584:Source/portable/GCC/ARM_CM4F/port.c **** 			inevitably result in some tiny drift of the time maintained by the
 585:Source/portable/GCC/ARM_CM4F/port.c **** 			kernel with respect to calendar time. */
 586:Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT;
 587:Source/portable/GCC/ARM_CM4F/port.c **** 
 588:Source/portable/GCC/ARM_CM4F/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 589:Source/portable/GCC/ARM_CM4F/port.c **** 			above. */
 590:Source/portable/GCC/ARM_CM4F/port.c **** 			__asm volatile( "cpsie i" );
 591:Source/portable/GCC/ARM_CM4F/port.c **** 
 592:Source/portable/GCC/ARM_CM4F/port.c **** 			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 593:Source/portable/GCC/ARM_CM4F/port.c **** 			{
 594:Source/portable/GCC/ARM_CM4F/port.c **** 				unsigned long ulCalculatedLoadValue;
 595:Source/portable/GCC/ARM_CM4F/port.c **** 				
 596:Source/portable/GCC/ARM_CM4F/port.c **** 				/* The tick interrupt has already executed, and the SysTick
 597:Source/portable/GCC/ARM_CM4F/port.c **** 				count reloaded with ulReloadValue.  Reset the
 598:Source/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
 599:Source/portable/GCC/ARM_CM4F/port.c **** 				period. */
 600:Source/portable/GCC/ARM_CM4F/port.c **** 				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_
 601:Source/portable/GCC/ARM_CM4F/port.c **** 
 602:Source/portable/GCC/ARM_CM4F/port.c **** 				/* Don't allow a tiny value, or values that have somehow 
 603:Source/portable/GCC/ARM_CM4F/port.c **** 				underflowed because the post sleep hook did something 
 604:Source/portable/GCC/ARM_CM4F/port.c **** 				that took too long. */
 605:Source/portable/GCC/ARM_CM4F/port.c **** 				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimer
 606:Source/portable/GCC/ARM_CM4F/port.c **** 				{
 607:Source/portable/GCC/ARM_CM4F/port.c **** 					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 608:Source/portable/GCC/ARM_CM4F/port.c **** 				}
 609:Source/portable/GCC/ARM_CM4F/port.c **** 				
 610:Source/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 611:Source/portable/GCC/ARM_CM4F/port.c **** 				
 612:Source/portable/GCC/ARM_CM4F/port.c **** 				/* The tick interrupt handler will already have pended the tick
 613:Source/portable/GCC/ARM_CM4F/port.c **** 				processing in the kernel.  As the pending tick will be
 614:Source/portable/GCC/ARM_CM4F/port.c **** 				processed as soon as this function exits, the tick value
 615:Source/portable/GCC/ARM_CM4F/port.c **** 				maintained by the tick is stepped forward by one less than the
 616:Source/portable/GCC/ARM_CM4F/port.c **** 				time spent waiting. */
 617:Source/portable/GCC/ARM_CM4F/port.c **** 				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 618:Source/portable/GCC/ARM_CM4F/port.c **** 			}
 619:Source/portable/GCC/ARM_CM4F/port.c **** 			else
 620:Source/portable/GCC/ARM_CM4F/port.c **** 			{
 621:Source/portable/GCC/ARM_CM4F/port.c **** 				/* Something other than the tick interrupt ended the sleep.
 622:Source/portable/GCC/ARM_CM4F/port.c **** 				Work out how long the sleep lasted rounded to complete tick
 623:Source/portable/GCC/ARM_CM4F/port.c **** 				periods (not the ulReload value which accounted for part
 624:Source/portable/GCC/ARM_CM4F/port.c **** 				ticks). */
 625:Source/portable/GCC/ARM_CM4F/port.c **** 				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTI
 626:Source/portable/GCC/ARM_CM4F/port.c **** 
 627:Source/portable/GCC/ARM_CM4F/port.c **** 				/* How many complete tick periods passed while the processor
 628:Source/portable/GCC/ARM_CM4F/port.c **** 				was waiting? */
 629:Source/portable/GCC/ARM_CM4F/port.c **** 				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 630:Source/portable/GCC/ARM_CM4F/port.c **** 
 631:Source/portable/GCC/ARM_CM4F/port.c **** 				/* The reload value is set to whatever fraction of a single tick
 632:Source/portable/GCC/ARM_CM4F/port.c **** 				period remains. */
 633:Source/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1 ) * ulTimerCountsForOneTick ) - ulCom
 634:Source/portable/GCC/ARM_CM4F/port.c **** 			}
 635:Source/portable/GCC/ARM_CM4F/port.c **** 
 636:Source/portable/GCC/ARM_CM4F/port.c **** 			/* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 637:Source/portable/GCC/ARM_CM4F/port.c **** 			again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 638:Source/portable/GCC/ARM_CM4F/port.c **** 			value.  The critical section is used to ensure the tick interrupt
 639:Source/portable/GCC/ARM_CM4F/port.c **** 			can only execute once in the case that the reload register is near
 640:Source/portable/GCC/ARM_CM4F/port.c **** 			zero. */
 641:Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 642:Source/portable/GCC/ARM_CM4F/port.c **** 			portENTER_CRITICAL();
 643:Source/portable/GCC/ARM_CM4F/port.c **** 			{
 644:Source/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYST
 645:Source/portable/GCC/ARM_CM4F/port.c **** 				vTaskStepTick( ulCompleteTickPeriods );
 646:Source/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 647:Source/portable/GCC/ARM_CM4F/port.c **** 			}
 648:Source/portable/GCC/ARM_CM4F/port.c **** 			portEXIT_CRITICAL();
 649:Source/portable/GCC/ARM_CM4F/port.c **** 		}
 650:Source/portable/GCC/ARM_CM4F/port.c **** 	}
 651:Source/portable/GCC/ARM_CM4F/port.c **** 
 652:Source/portable/GCC/ARM_CM4F/port.c **** #endif /* #if configUSE_TICKLESS_IDLE */
 653:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 654:Source/portable/GCC/ARM_CM4F/port.c **** 
 655:Source/portable/GCC/ARM_CM4F/port.c **** /*
 656:Source/portable/GCC/ARM_CM4F/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 657:Source/portable/GCC/ARM_CM4F/port.c ****  * frequency.
 658:Source/portable/GCC/ARM_CM4F/port.c ****  */
 659:Source/portable/GCC/ARM_CM4F/port.c **** __attribute__(( weak )) void vPortSetupTimerInterrupt( void )
 660:Source/portable/GCC/ARM_CM4F/port.c **** {
 688              		.loc 1 660 0
 689              		.cfi_startproc
 690              		@ args = 0, pretend = 0, frame = 0
 691              		@ frame_needed = 1, uses_anonymous_args = 0
 692              		@ link register save eliminated.
 693 0000 80B4     		push	{r7}
 694              	.LCFI18:
 695              		.cfi_def_cfa_offset 4
 696              		.cfi_offset 7, -4
 697 0002 00AF     		add	r7, sp, #0
 698              	.LCFI19:
 699              		.cfi_def_cfa_register 7
 661:Source/portable/GCC/ARM_CM4F/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 662:Source/portable/GCC/ARM_CM4F/port.c **** 	#if configUSE_TICKLESS_IDLE == 1
 663:Source/portable/GCC/ARM_CM4F/port.c **** 	{
 664:Source/portable/GCC/ARM_CM4F/port.c **** 		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 665:Source/portable/GCC/ARM_CM4F/port.c **** 		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 666:Source/portable/GCC/ARM_CM4F/port.c **** 		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOC
 667:Source/portable/GCC/ARM_CM4F/port.c **** 	}
 668:Source/portable/GCC/ARM_CM4F/port.c **** 	#endif /* configUSE_TICKLESS_IDLE */
 669:Source/portable/GCC/ARM_CM4F/port.c **** 
 670:Source/portable/GCC/ARM_CM4F/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 671:Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
 700              		.loc 1 671 0
 701 0004 4EF21403 		movw	r3, #57364
 702 0008 CEF20003 		movt	r3, 57344
 703 000c 40F20002 		movw	r2, #:lower16:SystemCoreClock
 704 0010 C0F20002 		movt	r2, #:upper16:SystemCoreClock
 705 0014 1168     		ldr	r1, [r2, #0]
 706 0016 44F6D352 		movw	r2, #19923
 707 001a C1F26202 		movt	r2, 4194
 708 001e A2FB0102 		umull	r0, r2, r2, r1
 709 0022 4FEA9212 		lsr	r2, r2, #6
 710 0026 02F1FF32 		add	r2, r2, #-1
 711 002a 1A60     		str	r2, [r3, #0]
 672:Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK
 712              		.loc 1 672 0
 713 002c 4EF21003 		movw	r3, #57360
 714 0030 CEF20003 		movt	r3, 57344
 715 0034 4FF00702 		mov	r2, #7
 716 0038 1A60     		str	r2, [r3, #0]
 673:Source/portable/GCC/ARM_CM4F/port.c **** }
 717              		.loc 1 673 0
 718 003a BD46     		mov	sp, r7
 719 003c 80BC     		pop	{r7}
 720 003e 7047     		bx	lr
 721              		.cfi_endproc
 722              	.LFE123:
 724              		.section	.text.vPortEnableVFP,"ax",%progbits
 725              		.align	2
 726              		.thumb
 727              		.thumb_func
 729              	vPortEnableVFP:
 730              	.LFB124:
 674:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 675:Source/portable/GCC/ARM_CM4F/port.c **** 
 676:Source/portable/GCC/ARM_CM4F/port.c **** /* This is a naked function. */
 677:Source/portable/GCC/ARM_CM4F/port.c **** static void vPortEnableVFP( void )
 678:Source/portable/GCC/ARM_CM4F/port.c **** {
 731              		.loc 1 678 0
 732              		.cfi_startproc
 733              		@ Naked Function: prologue and epilogue provided by programmer.
 734              		@ args = 0, pretend = 0, frame = 0
 735              		@ frame_needed = 1, uses_anonymous_args = 0
 679:Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile
 736              		.loc 1 679 0
 737              	@ 679 "Source/portable/GCC/ARM_CM4F/port.c" 1
 738 0000 DFF80C00 			ldr.w r0, =0xE000ED88		
 739 0004 0168     		ldr r1, [r0]				
 740              									
 741 0006 41F47001 		orr r1, r1, #( 0xf << 20 )	
 742 000a 0160     		str r1, [r0]				
 743 000c 7047     		bx r14						
 744              	@ 0 "" 2
 680:Source/portable/GCC/ARM_CM4F/port.c **** 	(
 681:Source/portable/GCC/ARM_CM4F/port.c **** 		"	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
 682:Source/portable/GCC/ARM_CM4F/port.c **** 		"	ldr r1, [r0]				\n"
 683:Source/portable/GCC/ARM_CM4F/port.c **** 		"								\n"
 684:Source/portable/GCC/ARM_CM4F/port.c **** 		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
 685:Source/portable/GCC/ARM_CM4F/port.c **** 		"	str r1, [r0]				\n"
 686:Source/portable/GCC/ARM_CM4F/port.c **** 		"	bx r14						"
 687:Source/portable/GCC/ARM_CM4F/port.c **** 	);
 688:Source/portable/GCC/ARM_CM4F/port.c **** }
 745              		.loc 1 688 0
 746              		.thumb
 747              		.cfi_endproc
 748              	.LFE124:
 750 000e 0000     		.section	.text.vPortValidateInterruptPriority,"ax",%progbits
 751              		.align	2
 752              		.global	vPortValidateInterruptPriority
 753              		.thumb
 754              		.thumb_func
 756              	vPortValidateInterruptPriority:
 757              	.LFB125:
 689:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 690:Source/portable/GCC/ARM_CM4F/port.c **** 
 691:Source/portable/GCC/ARM_CM4F/port.c **** #if( configASSERT_DEFINED == 1 )
 692:Source/portable/GCC/ARM_CM4F/port.c **** 
 693:Source/portable/GCC/ARM_CM4F/port.c **** 	void vPortValidateInterruptPriority( void )
 694:Source/portable/GCC/ARM_CM4F/port.c **** 	{
 758              		.loc 1 694 0
 759              		.cfi_startproc
 760              		@ args = 0, pretend = 0, frame = 8
 761              		@ frame_needed = 1, uses_anonymous_args = 0
 762 0000 90B5     		push	{r4, r7, lr}
 763              	.LCFI20:
 764              		.cfi_def_cfa_offset 12
 765              		.cfi_offset 4, -12
 766              		.cfi_offset 7, -8
 767              		.cfi_offset 14, -4
 768 0002 83B0     		sub	sp, sp, #12
 769              	.LCFI21:
 770              		.cfi_def_cfa_offset 24
 771 0004 00AF     		add	r7, sp, #0
 772              	.LCFI22:
 773              		.cfi_def_cfa_register 7
 695:Source/portable/GCC/ARM_CM4F/port.c **** 	unsigned long ulCurrentInterrupt;
 696:Source/portable/GCC/ARM_CM4F/port.c **** 	unsigned char ucCurrentPriority;
 697:Source/portable/GCC/ARM_CM4F/port.c **** 
 698:Source/portable/GCC/ARM_CM4F/port.c **** 		/* Obtain the number of the currently executing interrupt. */
 699:Source/portable/GCC/ARM_CM4F/port.c **** 		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 774              		.loc 1 699 0
 775              	@ 699 "Source/portable/GCC/ARM_CM4F/port.c" 1
 776 0006 EFF30584 		mrs r4, ipsr
 777              	@ 0 "" 2
 778              		.thumb
 779 000a 7C60     		str	r4, [r7, #4]
 700:Source/portable/GCC/ARM_CM4F/port.c **** 
 701:Source/portable/GCC/ARM_CM4F/port.c **** 		/* Is the interrupt number a user defined interrupt? */
 702:Source/portable/GCC/ARM_CM4F/port.c **** 		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 780              		.loc 1 702 0
 781 000c 7B68     		ldr	r3, [r7, #4]
 782 000e 0F2B     		cmp	r3, #15
 783 0010 13D9     		bls	.L27
 703:Source/portable/GCC/ARM_CM4F/port.c **** 		{
 704:Source/portable/GCC/ARM_CM4F/port.c **** 			/* Look up the interrupt's priority. */
 705:Source/portable/GCC/ARM_CM4F/port.c **** 			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 784              		.loc 1 705 0
 785 0012 40F20003 		movw	r3, #:lower16:pcInterruptPriorityRegisters
 786 0016 C0F20003 		movt	r3, #:upper16:pcInterruptPriorityRegisters
 787 001a 1A68     		ldr	r2, [r3, #0]
 788 001c 7B68     		ldr	r3, [r7, #4]
 789 001e D318     		adds	r3, r2, r3
 790 0020 1B78     		ldrb	r3, [r3, #0]
 791 0022 FB70     		strb	r3, [r7, #3]
 706:Source/portable/GCC/ARM_CM4F/port.c **** 
 707:Source/portable/GCC/ARM_CM4F/port.c **** 			/* The following assertion will fail if a service routine (ISR) for
 708:Source/portable/GCC/ARM_CM4F/port.c **** 			an interrupt that has been assigned a priority above
 709:Source/portable/GCC/ARM_CM4F/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY calls an ISR safe FreeRTOS API
 710:Source/portable/GCC/ARM_CM4F/port.c **** 			function.  ISR safe FreeRTOS API functions must *only* be called
 711:Source/portable/GCC/ARM_CM4F/port.c **** 			from interrupts that have been assigned a priority at or below
 712:Source/portable/GCC/ARM_CM4F/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY.
 713:Source/portable/GCC/ARM_CM4F/port.c **** 
 714:Source/portable/GCC/ARM_CM4F/port.c **** 			Numerically low interrupt priority numbers represent logically high
 715:Source/portable/GCC/ARM_CM4F/port.c **** 			interrupt priorities, therefore the priority of the interrupt must
 716:Source/portable/GCC/ARM_CM4F/port.c **** 			be set to a value equal to or numerically *higher* than
 717:Source/portable/GCC/ARM_CM4F/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY.
 718:Source/portable/GCC/ARM_CM4F/port.c **** 
 719:Source/portable/GCC/ARM_CM4F/port.c **** 			Interrupts that	use the FreeRTOS API must not be left at their
 720:Source/portable/GCC/ARM_CM4F/port.c **** 			default priority of	zero as that is the highest possible priority,
 721:Source/portable/GCC/ARM_CM4F/port.c **** 			which is guaranteed to be above configMAX_SYSCALL_INTERRUPT_PRIORITY,
 722:Source/portable/GCC/ARM_CM4F/port.c **** 			and	therefore also guaranteed to be invalid.
 723:Source/portable/GCC/ARM_CM4F/port.c **** 
 724:Source/portable/GCC/ARM_CM4F/port.c **** 			FreeRTOS maintains separate thread and ISR API functions to ensure
 725:Source/portable/GCC/ARM_CM4F/port.c **** 			interrupt entry is as fast and simple as possible.
 726:Source/portable/GCC/ARM_CM4F/port.c **** 
 727:Source/portable/GCC/ARM_CM4F/port.c **** 			The following links provide detailed information:
 728:Source/portable/GCC/ARM_CM4F/port.c **** 			http://www.freertos.org/RTOS-Cortex-M3-M4.html
 729:Source/portable/GCC/ARM_CM4F/port.c **** 			http://www.freertos.org/FAQHelp.html */
 730:Source/portable/GCC/ARM_CM4F/port.c **** 			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 792              		.loc 1 730 0
 793 0024 40F20003 		movw	r3, #:lower16:ucMaxSysCallPriority
 794 0028 C0F20003 		movt	r3, #:upper16:ucMaxSysCallPriority
 795 002c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 796 002e FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 797 0030 9A42     		cmp	r2, r3
 798 0032 02D2     		bcs	.L27
 799              		.loc 1 730 0 is_stmt 0 discriminator 1
 800 0034 FFF7FEFF 		bl	ulPortSetInterruptMask
 801              	.L28:
 802              		.loc 1 730 0 discriminator 2
 803 0038 FEE7     		b	.L28
 804              	.L27:
 731:Source/portable/GCC/ARM_CM4F/port.c **** 		}
 732:Source/portable/GCC/ARM_CM4F/port.c **** 
 733:Source/portable/GCC/ARM_CM4F/port.c **** 		/* Priority grouping:  The interrupt controller (NVIC) allows the bits
 734:Source/portable/GCC/ARM_CM4F/port.c **** 		that define each interrupt's priority to be split between bits that
 735:Source/portable/GCC/ARM_CM4F/port.c **** 		define the interrupt's pre-emption priority bits and bits that define
 736:Source/portable/GCC/ARM_CM4F/port.c **** 		the interrupt's sub-priority.  For simplicity all bits must be defined
 737:Source/portable/GCC/ARM_CM4F/port.c **** 		to be pre-emption priority bits.  The following assertion will fail if
 738:Source/portable/GCC/ARM_CM4F/port.c **** 		this is not the case (if some bits represent a sub-priority).
 739:Source/portable/GCC/ARM_CM4F/port.c **** 
 740:Source/portable/GCC/ARM_CM4F/port.c **** 		If the application only uses CMSIS libraries for interrupt
 741:Source/portable/GCC/ARM_CM4F/port.c **** 		configuration then the correct setting can be achieved on all Cortex-M
 742:Source/portable/GCC/ARM_CM4F/port.c **** 		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
 743:Source/portable/GCC/ARM_CM4F/port.c **** 		scheduler.  Note however that some vendor specific peripheral libraries
 744:Source/portable/GCC/ARM_CM4F/port.c **** 		assume a non-zero priority group setting, in which cases using a value
 745:Source/portable/GCC/ARM_CM4F/port.c **** 		of zero will result in unpredicable behaviour. */
 746:Source/portable/GCC/ARM_CM4F/port.c **** 		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 805              		.loc 1 746 0 is_stmt 1
 806 003a 4EF60C53 		movw	r3, #60684
 807 003e CEF20003 		movt	r3, 57344
 808 0042 1B68     		ldr	r3, [r3, #0]
 809 0044 03F4E062 		and	r2, r3, #1792
 810 0048 40F20003 		movw	r3, #:lower16:ulMaxPRIGROUPValue
 811 004c C0F20003 		movt	r3, #:upper16:ulMaxPRIGROUPValue
 812 0050 1B68     		ldr	r3, [r3, #0]
 813 0052 9A42     		cmp	r2, r3
 814 0054 02D9     		bls	.L26
 815              		.loc 1 746 0 is_stmt 0 discriminator 1
 816 0056 FFF7FEFF 		bl	ulPortSetInterruptMask
 817              	.L30:
 818              		.loc 1 746 0 discriminator 2
 819 005a FEE7     		b	.L30
 820              	.L26:
 747:Source/portable/GCC/ARM_CM4F/port.c **** 	}
 821              		.loc 1 747 0 is_stmt 1
 822 005c 07F10C07 		add	r7, r7, #12
 823 0060 BD46     		mov	sp, r7
 824 0062 90BD     		pop	{r4, r7, pc}
 825              		.cfi_endproc
 826              	.LFE125:
 828              		.text
 829              	.Letext0:
 830              		.file 2 "Source/include/projdefs.h"
 831              		.file 3 "/home/thanhtruong/embedded-development/toolchain/gcc-arm-none-eabi-4_7-2013q1/bin/../lib/
 832              		.file 4 "Source/portable/GCC/ARM_CM4F/portmacro.h"
 833              		.file 5 "App/STM32F4-Discovery/Libraries/CMSIS/Include/core_cm4.h"
 834              		.file 6 "App/STM32F4-Discovery/Libraries/CMSIS/ST/STM32F4xx/Include/system_stm32f4xx.h"
DEFINED SYMBOLS
                            *ABS*:00000000 port.c
     /tmp/cchYkuCQ.s:20     .data.uxCriticalNesting:00000000 $d
     /tmp/cchYkuCQ.s:23     .data.uxCriticalNesting:00000000 uxCriticalNesting
     /tmp/cchYkuCQ.s:28     .bss.ucMaxSysCallPriority:00000000 ucMaxSysCallPriority
     /tmp/cchYkuCQ.s:29     .bss.ucMaxSysCallPriority:00000000 $d
     /tmp/cchYkuCQ.s:31     .bss.ulMaxPRIGROUPValue:00000000 $d
     /tmp/cchYkuCQ.s:34     .bss.ulMaxPRIGROUPValue:00000000 ulMaxPRIGROUPValue
     /tmp/cchYkuCQ.s:37     .rodata.pcInterruptPriorityRegisters:00000000 $d
     /tmp/cchYkuCQ.s:40     .rodata.pcInterruptPriorityRegisters:00000000 pcInterruptPriorityRegisters
     /tmp/cchYkuCQ.s:43     .text.pxPortInitialiseStack:00000000 $t
     /tmp/cchYkuCQ.s:48     .text.pxPortInitialiseStack:00000000 pxPortInitialiseStack
     /tmp/cchYkuCQ.s:130    .text.prvTaskExitError:00000000 prvTaskExitError
     /tmp/cchYkuCQ.s:126    .text.prvTaskExitError:00000000 $t
     /tmp/cchYkuCQ.s:533    .text.ulPortSetInterruptMask:00000000 ulPortSetInterruptMask
     /tmp/cchYkuCQ.s:165    .text.SVC_Handler:00000000 $t
     /tmp/cchYkuCQ.s:170    .text.SVC_Handler:00000000 SVC_Handler
     /tmp/cchYkuCQ.s:189    .text.SVC_Handler:00000018 pxCurrentTCBConst2
     /tmp/cchYkuCQ.s:189    .text.SVC_Handler:00000018 $d
     /tmp/cchYkuCQ.s:198    .text.prvPortStartFirstTask:00000000 $t
     /tmp/cchYkuCQ.s:202    .text.prvPortStartFirstTask:00000000 prvPortStartFirstTask
     /tmp/cchYkuCQ.s:226    .text.xPortStartScheduler:00000000 $t
     /tmp/cchYkuCQ.s:231    .text.xPortStartScheduler:00000000 xPortStartScheduler
     /tmp/cchYkuCQ.s:686    .text.vPortSetupTimerInterrupt:00000000 vPortSetupTimerInterrupt
     /tmp/cchYkuCQ.s:729    .text.vPortEnableVFP:00000000 vPortEnableVFP
     /tmp/cchYkuCQ.s:373    .text.vPortEndScheduler:00000000 $t
     /tmp/cchYkuCQ.s:378    .text.vPortEndScheduler:00000000 vPortEndScheduler
     /tmp/cchYkuCQ.s:400    .text.vPortYield:00000000 $t
     /tmp/cchYkuCQ.s:405    .text.vPortYield:00000000 vPortYield
     /tmp/cchYkuCQ.s:441    .text.vPortEnterCritical:00000000 $t
     /tmp/cchYkuCQ.s:446    .text.vPortEnterCritical:00000000 vPortEnterCritical
     /tmp/cchYkuCQ.s:485    .text.vPortExitCritical:00000000 $t
     /tmp/cchYkuCQ.s:490    .text.vPortExitCritical:00000000 vPortExitCritical
     /tmp/cchYkuCQ.s:562    .text.vPortClearInterruptMask:00000000 vPortClearInterruptMask
     /tmp/cchYkuCQ.s:528    .text.ulPortSetInterruptMask:00000000 $t
     /tmp/cchYkuCQ.s:557    .text.vPortClearInterruptMask:00000000 $t
     /tmp/cchYkuCQ.s:581    .text.PendSV_Handler:00000000 $t
     /tmp/cchYkuCQ.s:586    .text.PendSV_Handler:00000000 PendSV_Handler
     /tmp/cchYkuCQ.s:631    .text.PendSV_Handler:0000004c pxCurrentTCBConst
     /tmp/cchYkuCQ.s:631    .text.PendSV_Handler:0000004c $d
     /tmp/cchYkuCQ.s:640    .text.SysTick_Handler:00000000 $t
     /tmp/cchYkuCQ.s:645    .text.SysTick_Handler:00000000 SysTick_Handler
     /tmp/cchYkuCQ.s:681    .text.vPortSetupTimerInterrupt:00000000 $t
     /tmp/cchYkuCQ.s:725    .text.vPortEnableVFP:00000000 $t
     /tmp/cchYkuCQ.s:751    .text.vPortValidateInterruptPriority:00000000 $t
     /tmp/cchYkuCQ.s:756    .text.vPortValidateInterruptPriority:00000000 vPortValidateInterruptPriority
     /tmp/cchYkuCQ.s:750    .text.vPortEnableVFP:0000000e $d
     /tmp/cchYkuCQ.s:225    .text.prvPortStartFirstTask:00000010 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
xTaskIncrementTick
SystemCoreClock
